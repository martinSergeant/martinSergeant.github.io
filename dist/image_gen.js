/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/indexes/image_gen_index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/bam.js":
/*!********************!*\
  !*** ./src/bam.js ***!
  \********************/
/*! exports provided: loadBamIndex, BamReader, BamSource, BamFilter, BamAlignment, PairedAlignment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Zlib) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadBamIndex\", function() { return loadBamIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BamReader\", function() { return BamReader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BamSource\", function() { return BamSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BamFilter\", function() { return BamFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BamAlignment\", function() { return BamAlignment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PairedAlignment\", function() { return PairedAlignment; });\n/* harmony import */ var _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./igvxhr.js */ \"./src/igvxhr.js\");\n/* harmony import */ var _bigwig_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bigwig.js */ \"./src/bigwig.js\");\n/* harmony import */ var _vendor_inflate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vendor/inflate.js */ \"./src/vendor/inflate.js\");\n/* harmony import */ var _feature_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./feature.js */ \"./src/feature.js\");\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst BAI_MAGIC = 21578050;\r\nconst TABIX_MAGIC = 21578324;\r\nconst MAX_HEADER_SIZE = 100000000;   // IF the header is larger than this we can't read it !\r\nconst B_MAX_GZIP_BLOCK_SIZE = (1 << 16);\r\n\r\n\r\n    /**\r\n     * @param indexURL\r\n     * @param config\r\n     * @param tabix\r\n     *\r\n     * @returns a Promised for the bam or tabix index.  The fulfill function takes the index as an argument.\r\n     */\r\nlet loadBamIndex = function (indexURL, config, tabix) {\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            var genome = null;\r\n\r\n            _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(indexURL,\r\n                {\r\n                    headers: config.headers,\r\n                    withCredentials: config.withCredentials\r\n                }).then(function (arrayBuffer) {\r\n\r\n                var indices = [],\r\n                    magic, nbin, nintv, nref, parser,\r\n                    blockMin = Number.MAX_VALUE,\r\n                    blockMax = 0,\r\n                    binIndex, linearIndex, binNumber, cs, ce, b, i, ref, sequenceIndexMap;\r\n\r\n                if (!arrayBuffer) {\r\n                    fulfill(null);\r\n                    return;\r\n                }\r\n\r\n                if (tabix) {\r\n                \t  console.log(Zlib);\r\n                    var inflate = new Zlib.Zlib.Gunzip(new Uint8Array(arrayBuffer));\r\n                    arrayBuffer = inflate.decompress().buffer;\r\n                   \r\n                   /*let r =pako.inflate(new Uint8Array(arrayBuffer));\r\n\r\n                    arrayBuffer =r.buffer;*/\r\n                }\r\n\r\n                parser = new _bigwig_js__WEBPACK_IMPORTED_MODULE_1__[\"BinaryParser\"](new DataView(arrayBuffer));\r\n\r\n                magic = parser.getInt();\r\n\r\n                if (magic === BAI_MAGIC || (tabix && magic === TABIX_MAGIC)) {\r\n\r\n                    nref = parser.getInt();\r\n\r\n\r\n                    if (tabix) {\r\n                        // Tabix header parameters aren't used, but they must be read to advance the pointer\r\n                        var format = parser.getInt();\r\n                        var col_seq = parser.getInt();\r\n                        var col_beg = parser.getInt();\r\n                        var col_end = parser.getInt();\r\n                        var meta = parser.getInt();\r\n                        var skip = parser.getInt();\r\n                        var l_nm = parser.getInt();\r\n\r\n                        sequenceIndexMap = {};\r\n                        for (i = 0; i < nref; i++) {\r\n                            var seq_name = parser.getString();\r\n\r\n                            // Translate to \"official\" chr name.\r\n                            if (genome) seq_name = genome.getChromosomeName(seq_name);\r\n\r\n                            sequenceIndexMap[seq_name] = i;\r\n                        }\r\n                    }\r\n\r\n                    for (ref = 0; ref < nref; ++ref) {\r\n\r\n                        binIndex = {};\r\n                        linearIndex = [];\r\n\r\n                        nbin = parser.getInt();\r\n\r\n                        for (b = 0; b < nbin; ++b) {\r\n\r\n                            binNumber = parser.getInt();\r\n\r\n                            if (binNumber == 37450) {\r\n                                // This is a psuedo bin, not used but we have to consume the bytes\r\n                                nchnk = parser.getInt(); // # of chunks for this bin\r\n                                cs = parser.getVPointer();   // unmapped beg\r\n                                ce = parser.getVPointer();   // unmapped end\r\n                                var n_maped = parser.getLong();\r\n                                var nUnmapped = parser.getLong();\r\n\r\n                            }\r\n                            else {\r\n                                \r\n                                binIndex[binNumber] = [];\r\n                                var nchnk = parser.getInt(); // # of chunks for this bin\r\n\r\n                                for (i = 0; i < nchnk; i++) {\r\n                                    cs = parser.getVPointer();\r\n                                    ce = parser.getVPointer();\r\n                                    if (cs && ce) {\r\n                                        if (cs.block < blockMin) {\r\n                                            blockMin = cs.block;    // Block containing first alignment\r\n                                        }\r\n                                        if (ce.block > blockMax) {\r\n                                            blockMax = ce.block;\r\n                                        }\r\n                                        binIndex[binNumber].push([cs, ce]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        nintv = parser.getInt();\r\n                        for (i = 0; i < nintv; i++) {\r\n                            cs = parser.getVPointer();\r\n                            linearIndex.push(cs);   // Might be null\r\n                        }\r\n\r\n                        if (nbin > 0) {\r\n                            indices[ref] = {\r\n                                binIndex: binIndex,\r\n                                linearIndex: linearIndex\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    throw new Error(indexURL + \" is not a \" + (tabix ? \"tabix\" : \"bai\") + \" file\");\r\n                }\r\n                fulfill(new BamIndex(indices, blockMin, sequenceIndexMap, tabix));\r\n            }).catch(reject);\r\n        })\r\n    }\r\n\r\n\r\nclass BamIndex{\r\n    constructor (indices, blockMin, sequenceIndexMap, tabix) {\r\n        this.firstAlignmentBlock = blockMin;\r\n        this.indices = indices;\r\n        this.sequenceIndexMap = sequenceIndexMap;\r\n        this.tabix = tabix;\r\n    }\r\n\r\n    /**\r\n     * Fetch blocks for a particular genomic range.  This method is public so it can be unit-tested.\r\n     *\r\n     * @param refId  the sequence dictionary index of the chromosome\r\n     * @param min  genomic start position\r\n     * @param max  genomic end position\r\n     * @param return an array of {minv: {filePointer, offset}, {maxv: {filePointer, offset}}\r\n     */\r\n    blocksForRange(refId, min, max) {\r\n\r\n        var bam = this,\r\n            ba = bam.indices[refId],\r\n            overlappingBins,\r\n            leafChunks,\r\n            otherChunks,\r\n            nintv,\r\n            lowest,\r\n            minLin,\r\n            maxLin,\r\n            lb,\r\n            prunedOtherChunks,\r\n            i,\r\n            chnk,\r\n            dif,\r\n            intChunks,\r\n            mergedChunks;\r\n\r\n        if (!ba) {\r\n            return [];\r\n        }\r\n        else {\r\n\r\n            overlappingBins = BamIndex.reg2bins(min, max);        // List of bin #s that might overlap min, max\r\n            leafChunks = [];\r\n            otherChunks = [];\r\n\r\n\r\n            overlappingBins.forEach(function (bin) {\r\n\r\n                if (ba.binIndex[bin]) {\r\n                    var chunks = ba.binIndex[bin],\r\n                        nchnk = chunks.length;\r\n\r\n                    for (var c = 0; c < nchnk; ++c) {\r\n                        var cs = chunks[c][0];\r\n                        var ce = chunks[c][1];\r\n                        (bin < 4681 ? otherChunks : leafChunks).push({minv: cs, maxv: ce, bin: bin});\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            // Use the linear index to find the lowest chunk that could contain alignments in the region\r\n            nintv = ba.linearIndex.length;\r\n            lowest = null;\r\n            minLin = Math.min(min >> 14, nintv - 1), maxLin = Math.min(max >> 14, nintv - 1);\r\n            for (i = minLin; i <= maxLin; ++i) {\r\n                lb = ba.linearIndex[i];\r\n                if (!lb) {\r\n                    continue;\r\n                }\r\n                if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {\r\n                    lowest = lb;\r\n                }\r\n            }\r\n\r\n            // Prune chunks that end before the lowest chunk\r\n            prunedOtherChunks = [];\r\n            if (lowest != null) {\r\n                for (i = 0; i < otherChunks.length; ++i) {\r\n                    chnk = otherChunks[i];\r\n                    if (chnk.maxv.block > lowest.block || (chnk.maxv.block == lowest.block && chnk.maxv.offset >= lowest.offset)) {\r\n                        prunedOtherChunks.push(chnk);\r\n                    }\r\n                }\r\n            }\r\n\r\n            intChunks = [];\r\n            for (i = 0; i < prunedOtherChunks.length; ++i) {\r\n                intChunks.push(prunedOtherChunks[i]);\r\n            }\r\n            for (i = 0; i < leafChunks.length; ++i) {\r\n                intChunks.push(leafChunks[i]);\r\n            }\r\n\r\n            intChunks.sort(function (c0, c1) {\r\n                dif = c0.minv.block - c1.minv.block;\r\n                if (dif != 0) {\r\n                    return dif;\r\n                } else {\r\n                    return c0.minv.offset - c1.minv.offset;\r\n                }\r\n            });\r\n\r\n            mergedChunks = [];\r\n            if (intChunks.length > 0) {\r\n                var cur = intChunks[0];\r\n                for (var i = 1; i < intChunks.length; ++i) {\r\n                    var nc = intChunks[i];\r\n                    if ((nc.minv.block - cur.maxv.block) < 65000) { // Merge blocks that are withing 65k of each other\r\n                        cur = {minv: cur.minv, maxv: nc.maxv};\r\n                    } else {\r\n                        mergedChunks.push(cur);\r\n                        cur = nc;\r\n                    }\r\n                }\r\n                mergedChunks.push(cur);\r\n            }\r\n            return mergedChunks;\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Calculate the list of bins that may overlap with region [beg, end]\r\n     *\r\n     */\r\n    static reg2bins(beg, end) {\r\n        var i = 0, k, list = [];\r\n        if (end >= 1 << 29)   end = 1 << 29;\r\n        --end;\r\n        list.push(0);\r\n        for (k = 1 + (beg >> 26); k <= 1 + (end >> 26); ++k) list.push(k);\r\n        for (k = 9 + (beg >> 23); k <= 9 + (end >> 23); ++k) list.push(k);\r\n        for (k = 73 + (beg >> 20); k <= 73 + (end >> 20); ++k) list.push(k);\r\n        for (k = 585 + (beg >> 17); k <= 585 + (end >> 17); ++k) list.push(k);\r\n        for (k = 4681 + (beg >> 14); k <= 4681 + (end >> 14); ++k) list.push(k);\r\n        return list;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nclass BGZFile{\r\n\r\n    constructor (config) {\r\n        this.filePosition = 0;\r\n        this.config = config;\r\n    }\r\n\r\n    nextBlock() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.path,\r\n                {\r\n                    headers: self.config.headers,\r\n                    range: {start: self.filePosition, size: BLOCK_HEADER_LENGTH},\r\n                    withCredentials: self.config.withCredentials\r\n\r\n                }).then(function (arrayBuffer) {\r\n\r\n                var ba = new Uint8Array(arrayBuffer);\r\n                var xlen = (ba[11] << 8) | (ba[10]);\r\n                var si1 = ba[12];\r\n                var si2 = ba[13];\r\n                var slen = (ba[15] << 8) | (ba[14]);\r\n                var bsize = (ba[17] << 8) | (ba[16]) + 1;\r\n\r\n                self.filePosition += BLOCK_HEADER_LENGTH;\r\n\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.path, {\r\n                    headers: self.config.headers,\r\n                    range: {start: self.filePosition, size: bsize},\r\n                    withCredentials: self.config.withCredentials\r\n\r\n                }).then(function (arrayBuffer) {\r\n\r\n                    var unc = Object(_vendor_inflate_js__WEBPACK_IMPORTED_MODULE_2__[\"jszlib_inflate_buffer\"])(arrayBuffer);\r\n\r\n                    self.filePosition += (bsize + 8);  // \"8\" for CRC-32 and size of uncompressed data\r\n\r\n                    fulfill(unc);\r\n\r\n                }).catch(reject)\r\n            }).catch(reject);\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n    var BAM_MAGIC = 21840194;\r\n    var SECRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];\r\n    var CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];\r\n    var READ_STRAND_FLAG = 0x10;\r\n    var MATE_STRAND_FLAG = 0x20;\r\n    var FIRST_OF_PAIR_FLAG = 0x40;\r\n    var SECOND_OF_PAIR_FLAG = 0x80;\r\n    var READ_UNMAPPED_FLAG = 0x4;\r\n    var MATE_UNMAPPED_FLAG = 0x8;\r\n    var READ_PAIRED_FLAG = 0x1;\r\n    var PROPER_PAIR_FLAG = 0x2;\r\n    var SECONDARY_ALIGNMNET_FLAG = 0x100;\r\n    var SUPPLEMENTARY_ALIGNMENT_FLAG = 0x800;\r\n\r\n\r\n\r\n\r\n    var NOT_PRIMARY_ALIGNMENT_FLAG = 0x100;\r\n    var READ_FAILS_VENDOR_QUALITY_CHECK_FLAG = 0x200;\r\n    var DUPLICATE_READ_FLAG = 0x400;\r\n    var SUPPLEMENTARY_FLAG = 0x800;\r\n\r\n    const MAX_GZIP_BLOCK_SIZE = 65536;   //  APPARENTLY.  Where is this documented???\r\n    const DEFAULT_SAMPLING_WINDOW_SIZE = 100;\r\n    const DEFAULT_SAMPLING_DEPTH = 50;\r\n    const MAXIMUM_SAMPLING_DEPTH = 2500;\r\n\r\n    /**\r\n     * Class for reading a bam file\r\n     *\r\n     * @param config\r\n     * @constructor\r\n     */\r\n class BamReader{\r\n     constructor(config) {\r\n\r\n        this.config = config;\r\n\r\n        this.filter = config.filter || new BamFilter();\r\n\r\n        this.bamPath = config.url;\r\n        // Todo - deal with Picard convention.  WHY DOES THERE HAVE TO BE 2?\r\n        this.baiPath = config.indexURL || this.bamPath + \".bai\"; // If there is an indexURL provided, use it!\r\n        this.headPath = config.headURL || this.bamPath;\r\n\r\n\r\n        this.samplingWindowSize = config.samplingWindowSize === undefined ? DEFAULT_SAMPLING_WINDOW_SIZE : config.samplingWindowSize;\r\n        this.samplingDepth = config.samplingDepth === undefined ? DEFAULT_SAMPLING_DEPTH : config.samplingDepth;\r\n        if(this.samplingDepth > MAXIMUM_SAMPLING_DEPTH) {\r\n            igv.log(\"Warning: attempt to set sampling depth > maximum value of 2500\");\r\n            this.samplingDepth = MAXIMUM_SAMPLING_DEPTH;\r\n        }\r\n\r\n        if (config.viewAsPairs) {\r\n            this.pairsSupported = true;\r\n        }\r\n        else {\r\n            this.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;\r\n        }\r\n\r\n    }\r\n\r\n    readAlignments(chr, bpStart, bpEnd) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n\r\n            getChrIndex(self).then(function (chrToIndex) {\r\n\r\n                var chrId = chrToIndex[chr],\r\n\r\n                    alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported);\r\n                    \r\n                if (chrId === undefined) {\r\n                    fulfill(alignmentContainer);\r\n                } else {\r\n\r\n                    getIndex(self).then(function (bamIndex) {\r\n\r\n                        var chunks = bamIndex.blocksForRange(chrId, bpStart, bpEnd),\r\n                            promises = [];\r\n\r\n\r\n                        if (!chunks) {\r\n                            fulfill(null);\r\n                            reject(\"Error reading bam index\");\r\n                            return;\r\n                        }\r\n                        if (chunks.length === 0) {\r\n                            fulfill(alignmentContainer);\r\n                            return;\r\n                        }\r\n\r\n                        chunks.forEach(function (c) {\r\n\r\n                            promises.push(new Promise(function (fulfill, reject) {\r\n\r\n                                var fetchMin = c.minv.block,\r\n                                    fetchMax = c.maxv.block + MAX_GZIP_BLOCK_SIZE,   // Make sure we get the whole block.\r\n                                    range = {start: fetchMin, size: fetchMax - fetchMin + 1};\r\n\r\n                                _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.bamPath,\r\n                                    {\r\n                                        headers: self.config.headers,\r\n                                        range: range,\r\n                                        withCredentials: self.config.withCredentials\r\n                                    }).then(function (compressed) {\r\n\r\n                                    var ba = new Uint8Array(new unbgzf(compressed)); //new Uint8Array(igv.unbgzf(compressed)); //, c.maxv.block - c.minv.block + 1));\r\n                                    decodeBamRecords(ba, c.minv.offset, alignmentContainer, bpStart, bpEnd, chrId, self.filter);\r\n\r\n                                    fulfill(alignmentContainer);\r\n\r\n                                }).catch(function (obj) {\r\n                                    reject(obj);\r\n                                });\r\n\r\n                            }))\r\n                        });\r\n\r\n\r\n                        Promise.all(promises).then(function (ignored) {\r\n                            alignmentContainer.finish();\r\n                            fulfill(alignmentContainer);\r\n                        }).catch(function (obj) {\r\n                            reject(obj);\r\n                        });\r\n                    }).catch(reject);\r\n                }\r\n            }).catch(reject);\r\n        });\r\n\r\n\r\n        function decodeBamRecords(ba, offset, alignmentContainer, min, max, chrId, filter) {\r\n\r\n            var blockSize,\r\n                blockEnd,\r\n                alignment,\r\n                blocks,\r\n                refID,\r\n                pos,\r\n                bmn,\r\n                bin,\r\n                mq,\r\n                nl,\r\n                flag_nc,\r\n                flag,\r\n                nc,\r\n                lseq,\r\n                mateRefID,\r\n                matePos,\r\n                readName,\r\n                j,\r\n                p,\r\n                lengthOnRef,\r\n                cigar,\r\n                c,\r\n                cigarArray,\r\n                seq,\r\n                seqBytes;\r\n\r\n            while (true) {\r\n\r\n                blockSize = readInt(ba, offset);\r\n                blockEnd = offset + blockSize + 4;\r\n\r\n                if (blockEnd > ba.length) {\r\n                    return;\r\n                }\r\n\r\n                alignment = new BamAlignment();\r\n\r\n                refID = readInt(ba, offset + 4);\r\n                pos = readInt(ba, offset + 8);\r\n\r\n                if(refID < 0) {\r\n                    return;   // unmapped reads\r\n                }\r\n                else if (refID > chrId || pos > max) {\r\n                    return;    // off right edge, we're done\r\n                }\r\n                else if (refID < chrId) {\r\n                    continue;   // to left of start, not sure this is possible\r\n                }\r\n\r\n                bmn = readInt(ba, offset + 12);\r\n                bin = (bmn & 0xffff0000) >> 16;\r\n                mq = (bmn & 0xff00) >> 8;\r\n                nl = bmn & 0xff;\r\n\r\n                flag_nc = readInt(ba, offset + 16);\r\n                flag = (flag_nc & 0xffff0000) >> 16;\r\n                nc = flag_nc & 0xffff;\r\n\r\n                alignment.flags = flag;\r\n                alignment.strand = !(flag & READ_STRAND_FLAG);\r\n\r\n                lseq = readInt(ba, offset + 20);\r\n\r\n                mateRefID = readInt(ba, offset + 24);\r\n                matePos = readInt(ba, offset + 28);\r\n                alignment.fragmentLength = readInt(ba, offset + 32);\r\n\r\n                readName = '';\r\n                for (j = 0; j < nl - 1; ++j) {\r\n                    readName += String.fromCharCode(ba[offset + 36 + j]);\r\n                }\r\n\r\n                p = offset + 36 + nl;\r\n\r\n                lengthOnRef = 0;\r\n                cigar = '';\r\n\r\n\r\n                cigarArray = [];\r\n                for (c = 0; c < nc; ++c) {\r\n                    var cigop = readInt(ba, p);\r\n                    var opLen = (cigop >> 4);\r\n                    var opLtr = CIGAR_DECODER[cigop & 0xf];\r\n                    if (opLtr == 'M' || opLtr == 'EQ' || opLtr == 'X' || opLtr == 'D' || opLtr == 'N' || opLtr == '=')\r\n                        lengthOnRef += opLen;\r\n                    cigar = cigar + opLen + opLtr;\r\n                    p += 4;\r\n\r\n                    cigarArray.push({len: opLen, ltr: opLtr});\r\n                }\r\n                alignment.cigar = cigar;\r\n                alignment.lengthOnRef = lengthOnRef;\r\n\r\n                if (alignment.start + alignment.lengthOnRef < min) continue;  // Record out-of-range \"to the left\", skip to next one\r\n\r\n\r\n                seq = '';\r\n                seqBytes = (lseq + 1) >> 1;\r\n                for (j = 0; j < seqBytes; ++j) {\r\n                    var sb = ba[p + j];\r\n                    seq += SECRET_DECODER[(sb & 0xf0) >> 4];\r\n                    seq += SECRET_DECODER[(sb & 0x0f)];\r\n                }\r\n                seq = seq.substring(0, lseq);  // seq might have one extra character (if lseq is an odd number)\r\n\r\n                p += seqBytes;\r\n                alignment.seq = seq;\r\n\r\n\r\n                if (lseq === 1 && String.fromCharCode(ba[p + j] + 33) === \"*\") {\r\n                    // TODO == how to represent this?\r\n                }\r\n                else {\r\n                    alignment.qual = [];\r\n                    for (j = 0; j < lseq; ++j) {\r\n                        alignment.qual.push(ba[p + j]);\r\n                    }\r\n                }\r\n                p += lseq;\r\n\r\n\r\n                alignment.start = pos;\r\n                alignment.mq = mq;\r\n                alignment.readName = readName;\r\n                alignment.chr = self.indexToChr[refID];\r\n\r\n                if (mateRefID >= 0) {\r\n                    alignment.mate = {\r\n                        chr: self.indexToChr[mateRefID],\r\n                        position: matePos,\r\n                        strand: !(flag & MATE_STRAND_FLAG)\r\n                    };\r\n                }\r\n\r\n\r\n                alignment.tagBA = new Uint8Array(ba.buffer.slice(p, blockEnd));  // decode thiese on demand\r\n                p += blockEnd;\r\n\r\n                if (!min || alignment.start <= max &&\r\n                    alignment.start + alignment.lengthOnRef >= min &&\r\n                    filter.pass(alignment)) {\r\n                    if (chrId === undefined || refID == chrId) {\r\n                        blocks = makeBlocks(alignment, cigarArray);\r\n                        alignment.blocks = blocks.blocks;\r\n                        alignment.insertions = blocks.insertions;\r\n                        alignmentContainer.push(alignment);\r\n                    }\r\n                }\r\n                offset = blockEnd;\r\n            }\r\n            // Exits via top of loop.\r\n        }\r\n\r\n        /**\r\n         * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains\r\n         * its portion of the read sequence and base quality strings.  A read sequence or base quality string\r\n         * of \"*\" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)\r\n         * and quality string (block.qual) must == the block length.\r\n         *\r\n         * NOTE: Insertions are not yet treated // TODO\r\n         *\r\n         * @param record\r\n         * @param cigarArray\r\n         * @returns array of blocks\r\n         */\r\n        function makeBlocks(record, cigarArray) {\r\n\r\n            var blocks = [],\r\n                insertions,\r\n                seqOffset = 0,\r\n                pos = record.start,\r\n                len = cigarArray.length,\r\n                blockSeq,\r\n                blockQuals,\r\n                gapType,\r\n                minQ = 5,  //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MIN)\r\n                maxQ = 20; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MAX)\r\n\r\n            for (var i = 0; i < len; i++) {\r\n\r\n                var c = cigarArray[i];\r\n\r\n                switch (c.ltr) {\r\n                    case 'H' :\r\n                        break; // ignore hard clips\r\n                    case 'P' :\r\n                        break; // ignore pads\r\n                    case 'S' :\r\n                        seqOffset += c.len;\r\n                        gapType = 'S';\r\n                        break; // soft clip read bases\r\n                    case 'N' :\r\n                        pos += c.len;\r\n                        gapType = 'N';\r\n                        break;  // reference skip\r\n                    case 'D' :\r\n                        pos += c.len;\r\n                        gapType = 'D';\r\n                        break;\r\n                    case 'I' :\r\n                        blockSeq = record.seq === \"*\" ? \"*\" : record.seq.substr(seqOffset, c.len);\r\n                        blockQuals = record.qual ? record.qual.slice(seqOffset, c.len) : undefined;\r\n                        if (insertions === undefined) insertions = [];\r\n                        insertions.push({start: pos, len: c.len, seq: blockSeq, qual: blockQuals});\r\n                        seqOffset += c.len;\r\n                        break;\r\n                    case 'M' :\r\n                    case 'EQ' :\r\n                    case '=' :\r\n                    case 'X' :\r\n\r\n                        blockSeq = record.seq === \"*\" ? \"*\" : record.seq.substr(seqOffset, c.len);\r\n                        blockQuals = record.qual ? record.qual.slice(seqOffset, c.len) : undefined;\r\n                        blocks.push({start: pos, len: c.len, seq: blockSeq, qual: blockQuals, gapType: gapType});\r\n                        seqOffset += c.len;\r\n                        pos += c.len;\r\n\r\n                        break;\r\n\r\n                    default :\r\n                        console.log(\"Error processing cigar element: \" + c.len + c.ltr);\r\n                }\r\n            }\r\n\r\n            return {blocks: blocks, insertions: insertions};\r\n\r\n        }\r\n    }\r\n\r\n    readHeader() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            getIndex(self).then(function (index) {\r\n\r\n                var len = index.firstAlignmentBlock + MAX_GZIP_BLOCK_SIZE;   // Insure we get the complete compressed block containing the header\r\n\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.bamPath,\r\n                    {\r\n                        headers: self.config.headers,\r\n\r\n                        range: {start: 0, size: len},\r\n\r\n                        withCredentials: self.config.withCredentials\r\n                    }).then(function (compressedBuffer) {\r\n\r\n                    var unc = new unbgzf(compressedBuffer, len),\r\n                        uncba = new Uint8Array(unc),\r\n                        magic = readInt(uncba, 0),\r\n                        samHeaderLen = readInt(uncba, 4),\r\n                        samHeader = '',\r\n                        genome = null;\r\n\r\n                    for (var i = 0; i < samHeaderLen; ++i) {\r\n                        samHeader += String.fromCharCode(uncba[i + 8]);\r\n                    }\r\n\r\n                    var nRef = readInt(uncba, samHeaderLen + 8);\r\n                    var p = samHeaderLen + 12;\r\n\r\n                    self.chrToIndex = {};\r\n                    self.indexToChr = [];\r\n                    for (var i = 0; i < nRef; ++i) {\r\n                        var lName = readInt(uncba, p);\r\n                        var name = '';\r\n                        for (var j = 0; j < lName - 1; ++j) {\r\n                            name += String.fromCharCode(uncba[p + 4 + j]);\r\n                        }\r\n                        var lRef = readInt(uncba, p + lName + 4);\r\n                        //dlog(name + ': ' + lRef);\r\n\r\n                        if (genome && genome.getChromosomeName) {\r\n                            name = genome.getChromosomeName(name);\r\n                        }\r\n\r\n                        self.chrToIndex[name] = i;\r\n                        self.indexToChr.push(name);\r\n\r\n                        p = p + 8 + lName;\r\n                    }\r\n\r\n                    fulfill();\r\n\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n}\r\n    function getIndex(bam) {\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (bam.index) {\r\n                fulfill(bam.index);\r\n            }\r\n            else {\r\n                loadBamIndex(bam.baiPath, bam.config).then(function (index) {\r\n                    bam.index = index;\r\n\r\n                    fulfill(bam.index);\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function getChrIndex(bam) {\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (bam.chrToIndex) {\r\n                fulfill(bam.chrToIndex);\r\n            }\r\n            else {\r\n                bam.readHeader().then(function () {\r\n                    fulfill(bam.chrToIndex);\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    function readInt(ba, offset) {\r\n        return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\r\n    }\r\n\r\n    function readShort(ba, offset) {\r\n        return (ba[offset + 1] << 8) | (ba[offset]);\r\n    }\r\n\r\n\r\n\r\n\r\nclass BamSource{\r\n    constructor(config) {\r\n\r\n        this.config = config;\r\n        this.alignmentContainer = undefined;\r\n        this.maxRows = config.maxRows || 1000;\r\n        this.sequence_source=new _feature_js__WEBPACK_IMPORTED_MODULE_3__[\"FastaSequence\"](config.seq_url);\r\n\r\n        if (config.sourceType === \"ga4gh\") {\r\n            this.bamReader = new igv.Ga4ghAlignmentReader(config);\r\n        }\r\n        else {\r\n            this.bamReader = new BamReader(config);\r\n        }\r\n\r\n       this.viewAsPairs = config.viewAsPairs;\r\n    };\r\n\r\n    setViewAsPairs(bool) {\r\n        var self = this;\r\n\r\n        if (this.viewAsPairs !== bool) {\r\n            this.viewAsPairs = bool;\r\n            // TODO -- repair alignments\r\n            if (this.alignmentContainer) {\r\n                var alignmentContainer = this.alignmentContainer,\r\n                    alignments;\r\n\r\n                if (bool) {\r\n                    alignments = pairAlignments(alignmentContainer.packedAlignmentRows);\r\n                }\r\n                else {\r\n                    alignments = unpairAlignments(alignmentContainer.packedAlignmentRows);\r\n                }\r\n                alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, self.maxRows);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    getAlignments(chr, bpStart, bpEnd) {\r\n\r\n        var self = this;\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (self.alignmentContainer && self.alignmentContainer.contains(chr, bpStart, bpEnd)) {\r\n                fulfill(self.alignmentContainer);\r\n            } else {\r\n\r\n                self.bamReader.readAlignments(chr, bpStart, bpEnd).then(function (alignmentContainer) {\r\n\r\n                    var maxRows = self.config.maxRows || 500,\r\n                        alignments = alignmentContainer.alignments;\r\n\r\n                    if (!self.viewAsPairs) {\r\n                        alignments = unpairAlignments([{alignments: alignments}]);\r\n                    }\r\n\r\n                    alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, maxRows);\r\n\r\n\r\n                    alignmentContainer.alignments = undefined;  // Don't need to hold onto these anymore\r\n                    self.alignmentContainer = alignmentContainer;\r\n\r\n                   self.sequence_source.getSequence(alignmentContainer.chr, alignmentContainer.start, alignmentContainer.end).then(\r\n                        function (sequence) {\r\n\r\n\r\n                            if (sequence) {\r\n\r\n                                alignmentContainer.coverageMap.refSeq = sequence;    // TODO -- fix this\r\n                                alignmentContainer.sequence = sequence;           // TODO -- fix this\r\n\r\n\r\n                                fulfill(alignmentContainer);\r\n                            }\r\n                        }).catch(reject);\r\n\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n    function pairAlignments(rows) {\r\n\r\n        var pairCache = {},\r\n            result = [];\r\n\r\n        rows.forEach(function (row) {\r\n\r\n            row.alignments.forEach(function (alignment) {\r\n\r\n                var pairedAlignment;\r\n\r\n                if (canBePaired(alignment)) {\r\n\r\n                    pairedAlignment = pairCache[alignment.readName];\r\n                    if (pairedAlignment) {\r\n                        pairedAlignment.setSecondAlignment(alignment);\r\n                        pairCache[alignment.readName] = undefined;   // Don't need to track this anymore.\r\n                    }\r\n                    else {\r\n                        pairedAlignment = new igv.PairedAlignment(alignment);\r\n                        pairCache[alignment.readName] = pairedAlignment;\r\n                        result.push(pairedAlignment);\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    result.push(alignment);\r\n                }\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    function unpairAlignments(rows) {\r\n        var result = [];\r\n        rows.forEach(function (row) {\r\n            row.alignments.forEach(function (alignment) {\r\n                if (alignment instanceof PairedAlignment) {\r\n                    if (alignment.firstAlignment) result.push(alignment.firstAlignment);  // shouldn't need the null test\r\n                    if (alignment.secondAlignment) result.push(alignment.secondAlignment);\r\n\r\n                }\r\n                else {\r\n                    result.push(alignment);\r\n                }\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    function canBePaired(alignment) {\r\n        return alignment.isPaired() &&\r\n            alignment.isMateMapped() &&\r\n            alignment.chr === alignment.mate.chr &&\r\n            (alignment.isFirstOfPair() || alignment.isSecondOfPair()) && !(alignment.isSecondary() || alignment.isSupplementary());\r\n    }\r\n\r\n\r\n    function packAlignmentRows(alignments, start, end, maxRows) {\r\n\r\n        if (!alignments) return;\r\n\r\n        alignments.sort(function (a, b) {\r\n            return a.start - b.start;\r\n        });\r\n\r\n        if (alignments.length === 0) {\r\n\r\n            return [];\r\n\r\n        } else {\r\n\r\n            var bucketList = [],\r\n                allocatedCount = 0,\r\n                lastAllocatedCount = 0,\r\n                nextStart = start,\r\n                alignmentRow,\r\n                index,\r\n                bucket,\r\n                alignment,\r\n                alignmentSpace = 4 * 2,\r\n                packedAlignmentRows = [],\r\n                bucketStart = Math.max(start, alignments[0].start);\r\n\r\n            alignments.forEach(function (alignment) {\r\n\r\n                var buckListIndex = Math.max(0, alignment.start - bucketStart);\r\n                if (bucketList[buckListIndex] === undefined) {\r\n                    bucketList[buckListIndex] = [];\r\n                }\r\n                bucketList[buckListIndex].push(alignment);\r\n            });\r\n\r\n\r\n            while (allocatedCount < alignments.length && packedAlignmentRows.length < maxRows) {\r\n\r\n                alignmentRow = new BamAlignmentRow();\r\n\r\n                while (nextStart <= end) {\r\n\r\n                    bucket = undefined;\r\n\r\n                    while (!bucket && nextStart <= end) {\r\n\r\n                        index = nextStart - bucketStart;\r\n                        if (bucketList[index] === undefined) {\r\n                            ++nextStart;                     // No alignments at this index\r\n                        } else {\r\n                            bucket = bucketList[index];\r\n                        }\r\n\r\n                    } // while (bucket)\r\n\r\n                    if (!bucket) {\r\n                        break;\r\n                    }\r\n                    alignment = bucket.pop();\r\n                    if (0 === bucket.length) {\r\n                        bucketList[index] = undefined;\r\n                    }\r\n\r\n                    alignmentRow.alignments.push(alignment);\r\n                    nextStart = alignment.start + alignment.lengthOnRef + alignmentSpace;\r\n                    ++allocatedCount;\r\n\r\n                } // while (nextStart)\r\n\r\n                if (alignmentRow.alignments.length > 0) {\r\n                    packedAlignmentRows.push(alignmentRow);\r\n                }\r\n\r\n                nextStart = bucketStart;\r\n\r\n                if (allocatedCount === lastAllocatedCount) break;   // Protect from infinite loops\r\n\r\n                lastAllocatedCount = allocatedCount;\r\n\r\n            } // while (allocatedCount)\r\n\r\n            return packedAlignmentRows;\r\n        }\r\n    }\r\n\r\n\r\n\r\nclass BamAlignment{\r\n    constructor(){\r\n        this.hidden = false;\r\n    }\r\n\r\n    isMapped() {\r\n        return (this.flags & READ_UNMAPPED_FLAG) == 0;\r\n    }\r\n\r\n    isPaired () {\r\n        return (this.flags & READ_PAIRED_FLAG) != 0;\r\n    }\r\n\r\n    isProperPair () {\r\n        return (this.flags & PROPER_PAIR_FLAG) != 0;\r\n    }\r\n\r\n    isFirstOfPair() {\r\n        return (this.flags & FIRST_OF_PAIR_FLAG) != 0;\r\n    }\r\n\r\n    isSecondOfPair() {\r\n        return (this.flags & SECOND_OF_PAIR_FLAG) != 0;\r\n    }\r\n\r\n    isSecondary() {\r\n        return (this.flags & SECONDARY_ALIGNMNET_FLAG) != 0;\r\n    }\r\n\r\n    isSupplementary() {\r\n        return (this.flags & SUPPLEMENTARY_ALIGNMENT_FLAG) != 0;\r\n    }\r\n\r\n    isFailsVendorQualityCheck() {\r\n        return (this.flags & READ_FAILS_VENDOR_QUALITY_CHECK_FLAG) != 0;\r\n    }\r\n\r\n    isDuplicate() {\r\n        return (this.flags & DUPLICATE_READ_FLAG) != 0;\r\n    }\r\n\r\n    isMateMapped() {\r\n        return (this.flags & MATE_UNMAPPED_FLAG) == 0;\r\n    }\r\n\r\n    isNegativeStrand() {\r\n        return (this.flags & READ_STRAND_FLAG) != 0;\r\n    }\r\n\r\n    isMateNegativeStrand() {\r\n        return (this.flags & MATE_STRAND_FLAG) != 0;\r\n    }\r\n\r\n    tags() {\r\n\r\n        function decodeTags(ba) {\r\n\r\n            var p = 0,\r\n                len = ba.length,\r\n                tags = {};\r\n\r\n            while (p < len) {\r\n                var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);\r\n                var type = String.fromCharCode(ba[p + 2]);\r\n                var value;\r\n\r\n                if (type == 'A') {\r\n                    value = String.fromCharCode(ba[p + 3]);\r\n                    p += 4;\r\n                } else if (type === 'i' || type === 'I') {\r\n                    value = readInt(ba, p + 3);\r\n                    p += 7;\r\n                } else if (type === 'c' || type === 'C') {\r\n                    value = ba[p + 3];\r\n                    p += 4;\r\n                } else if (type === 's' || type === 'S') {\r\n                    value = readShort(ba, p + 3);\r\n                    p += 5;\r\n                } else if (type === 'f') {\r\n                    // TODO 'FIXME need floats';\r\n                    value = readFloat(ba, p + 3);\r\n                    p += 7;\r\n                } else if (type === 'Z') {\r\n                    p += 3;\r\n                    value = '';\r\n                    for (; ;) {\r\n                        var cc = ba[p++];\r\n                        if (cc === 0) {\r\n                            break;\r\n                        } else {\r\n                            value += String.fromCharCode(cc);\r\n                        }\r\n                    }\r\n                } else {\r\n                    //'Unknown type ' + type;\r\n                    value = 'Error unknown type: ' + type;\r\n                    tags[tag] = value;\r\n                    break;\r\n                }\r\n                tags[tag] = value;\r\n            }\r\n            return tags;\r\n        }\r\n\r\n        if (!this.tagDict) {\r\n            if (this.tagBA) {\r\n                this.tagDict = decodeTags(this.tagBA);\r\n                this.tagBA = undefined;\r\n            } else {\r\n                this.tagDict = {};  // Mark so we don't try again.  The record has not tags\r\n            }\r\n        }\r\n        return this.tagDict;\r\n\r\n    }\r\n\r\n    popupData(genomicLocation) {\r\n\r\n        // if the user clicks on a base next to an insertion, show just the\r\n        // inserted bases in a popup (like in desktop IGV).\r\n        var nameValues = [], isFirst, tagDict;\r\n\r\n        if(this.insertions) {\r\n            for(var i = 0; i < this.insertions.length; i += 1) {\r\n                var ins_start = this.insertions[i].start;\r\n                if(genomicLocation == ins_start || genomicLocation == ins_start - 1) {\r\n                    nameValues.push({name: 'Insertion', value: this.insertions[i].seq });\r\n                    nameValues.push({name: 'Location', value: ins_start });\r\n                    return nameValues;\r\n                }\r\n            }\r\n        }\r\n\r\n        nameValues.push({ name: 'Read Name', value: this.readName });\r\n\r\n        // Sample\r\n        // Read group\r\n        nameValues.push(\"<hr>\");\r\n\r\n        // Add 1 to genomic location to map from 0-based computer units to user-based units\r\n        nameValues.push({ name: 'Alignment Start', value: igv.numberFormatter(1 + this.start), borderTop: true });\r\n\r\n        nameValues.push({ name: 'Read Strand', value: (true === this.strand ? '(+)' : '(-)'), borderTop: true });\r\n        nameValues.push({ name: 'Cigar', value: this.cigar });\r\n        nameValues.push({ name: 'Mapped', value: yesNo(this.isMapped()) });\r\n        nameValues.push({ name: 'Mapping Quality', value: this.mq });\r\n        nameValues.push({ name: 'Secondary', value: yesNo(this.isSecondary()) });\r\n        nameValues.push({ name: 'Supplementary', value: yesNo(this.isSupplementary()) });\r\n        nameValues.push({ name: 'Duplicate', value: yesNo(this.isDuplicate()) });\r\n        nameValues.push({ name: 'Failed QC', value: yesNo(this.isFailsVendorQualityCheck()) });\r\n\r\n        if (this.isPaired()) {\r\n            nameValues.push(\"<hr>\");\r\n            nameValues.push({ name: 'First in Pair', value: !this.isSecondOfPair(), borderTop: true });\r\n            nameValues.push({ name: 'Mate is Mapped', value: yesNo(this.isMateMapped()) });\r\n            if (this.isMateMapped()) {\r\n                nameValues.push({ name: 'Mate Chromosome', value: this.mate.chr });\r\n                nameValues.push({ name: 'Mate Start', value: (this.mate.position + 1)});\r\n                nameValues.push({ name: 'Mate Strand', value: (true === this.mate.strand ? '(+)' : '(-)')});\r\n                nameValues.push({ name: 'Insert Size', value: this.fragmentLength });\r\n                // Mate Start\r\n                // Mate Strand\r\n                // Insert Size\r\n            }\r\n            // First in Pair\r\n            // Pair Orientation\r\n\r\n        }\r\n\r\n        nameValues.push(\"<hr>\");\r\n        tagDict = this.tags();\r\n        isFirst = true;\r\n        for (var key in tagDict) {\r\n\r\n            if (tagDict.hasOwnProperty(key)) {\r\n\r\n                if (isFirst) {\r\n                    nameValues.push({ name: key, value: tagDict[key], borderTop: true });\r\n                    isFirst = false;\r\n                } else {\r\n                    nameValues.push({ name: key, value: tagDict[key] });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return nameValues;\r\n\r\n\r\n        function yesNo(bool) {\r\n            return bool ? 'Yes' : 'No';\r\n        }\r\n    }\r\n}\r\n\r\n\r\n   \r\n\r\n   \r\n\r\n    function readFloat(ba, offset) {\r\n\r\n        var dataView = new DataView(ba.buffer),\r\n            littleEndian = true;\r\n\r\n        return dataView.getFloat32(offset, littleEndian);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nclass BamFilter{\r\n\r\n  constructor (options) {\r\n        if (!options) options = {};\r\n        this.vendorFailed = options.vendorFailed === undefined ? true : options.vendorFailed;\r\n        this.duplicates = options.duplicates === undefined ? true : options.duplicates;\r\n        this.secondary = options.secondary || false;\r\n        this.supplementary = options.supplementary || false;\r\n        this.mqThreshold = options.mqThreshold === undefined ? 0 : options.mqThreshold;\r\n    }\r\n\r\n    pass(alignment) {\r\n\r\n        if (this.vendorFailed && alignment.isFailsVendorQualityCheck()) return false;\r\n        if (this.duplicates && alignment.isDuplicate()) return false;\r\n        if (this.secondary && alignment.isSecondary()) return false;\r\n        if (this.supplementary && alignment.isSupplementary()) return false;\r\n        if (alignment.mq < this.mqThreshold) return false;\r\n\r\n        return true;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n    var BLOCK_HEADER_LENGTH = 18;\r\n    var BLOCK_LENGTH_OFFSET = 16;  // Location in the gzip block of the total block size (actually total block size - 1)\r\n    var BLOCK_FOOTER_LENGTH = 8; // Number of bytes that follow the deflated data\r\n    var MAX_COMPRESSED_BLOCK_SIZE = 64 * 1024; // We require that a compressed block (including header and footer, be <= this)\r\n    var GZIP_OVERHEAD = BLOCK_HEADER_LENGTH + BLOCK_FOOTER_LENGTH + 2; // Gzip overhead is the header, the footer, and the block size (encoded as a short).\r\n    var GZIP_ID1 = 31;   // Magic number\r\n    var GZIP_ID2 = 139;  // Magic number\r\n    var GZIP_FLG = 4; // FEXTRA flag means there are optional fields\r\n\r\n\r\n    // Uncompress data,  assumed to be series of bgzipped blocks\r\n    // Code is based heavily on bam.js, part of the Dalliance Genome Explorer,  (c) Thomas Down 2006-2001.\r\nclass unbgzf{\r\n    constructor(data, lim) {\r\n        for (let a in data){\r\n           console.log(a);\r\n         }\r\n        var oBlockList = [],\r\n            ptr = [0],\r\n            totalSize = 0;\r\n\r\n        lim = lim || data.byteLength - 18;\r\n\r\n        while (ptr[0] < lim) {\r\n\r\n            var ba = new Uint8Array(data, ptr[0], 18);\r\n\r\n            var xlen = (ba[11] << 8) | (ba[10]);\r\n            var si1 = ba[12];\r\n            var si2 = ba[13];\r\n            var slen = (ba[15] << 8) | (ba[14]);\r\n            var bsize = (ba[17] << 8) | (ba[16]) + 1;\r\n\r\n            var start = 12 + xlen + ptr[0];    // Start of CDATA\r\n            var length = data.byteLength - start;\r\n\r\n            if (length < (bsize + 8)) break;\r\n\r\n            var unc = Object(_vendor_inflate_js__WEBPACK_IMPORTED_MODULE_2__[\"jszlib_inflate_buffer\"])(data, start, length, ptr);\r\n\r\n            ptr[0] += 8;    // Skipping CRC-32 and size of uncompressed data\r\n\r\n            totalSize += unc.byteLength;\r\n            oBlockList.push(unc);\r\n        }\r\n\r\n        // Concatenate decompressed blocks\r\n        if (oBlockList.length == 1) {\r\n            return oBlockList[0];\r\n        } else {\r\n            var out = new Uint8Array(totalSize);\r\n            var cursor = 0;\r\n            for (var i = 0; i < oBlockList.length; ++i) {\r\n                var b = new Uint8Array(oBlockList[i]);\r\n                Object(_vendor_inflate_js__WEBPACK_IMPORTED_MODULE_2__[\"arrayCopy\"])(b, 0, out, cursor, b.length);\r\n                cursor += b.length;\r\n            }\r\n            return out.buffer;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nclass AlignmentContainer{\r\n    constructor(chr, start, end, samplingWindowSize, samplingDepth, pairsSupported) {\r\n\r\n        this.chr = chr;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.length = (end - start);\r\n\r\n        this.coverageMap = new CoverageMap(chr, start, end);\r\n        this.alignments = [];\r\n        this.downsampledIntervals = [];\r\n\r\n        this.samplingWindowSize = samplingWindowSize === undefined ? 100 : samplingWindowSize;\r\n        this.samplingDepth = samplingDepth === undefined ? 50 : samplingDepth;\r\n\r\n        this.pairsSupported = pairsSupported;\r\n        this.paired = false;  // false until proven otherwise\r\n        this.pairsCache = {};  // working cache of paired alignments by read name\r\n\r\n        this.downsampledReads = new Set();\r\n\r\n        this.currentBucket = new DownsampleBucket(this.start, this.start + this.samplingWindowSize, this);\r\n\r\n        this.filter = function filter(alignment) {         // TODO -- pass this in\r\n            return alignment.isMapped() && !alignment.isFailsVendorQualityCheck();\r\n        }\r\n\r\n    }\r\n\r\n    push(alignment) {\r\n\r\n        if (this.filter(alignment) === false) return;\r\n\r\n        this.coverageMap.incCounts(alignment);   // Count coverage before any downsampling\r\n\r\n        if (this.pairsSupported && this.downsampledReads.has(alignment.readName)) {\r\n            return;   // Mate already downsampled -- pairs are treated as a single alignment for downsampling\r\n        }\r\n\r\n        if (alignment.start >= this.currentBucket.end) {\r\n            finishBucket.call(this);\r\n            this.currentBucket = new DownsampleBucket(alignment.start, alignment.start + this.samplingWindowSize, this);\r\n        }\r\n\r\n        this.currentBucket.addAlignment(alignment);\r\n\r\n    }\r\n\r\n    forEach(callback) {\r\n        this.alignments.forEach(callback);\r\n    }\r\n\r\n    finish() {\r\n\r\n        if (this.currentBucket !== undefined) {\r\n            finishBucket.call(this);\r\n        }\r\n\r\n        // Need to remove partial pairs whose mate was downsampled\r\n        if(this.pairsSupported) {\r\n            var tmp = [], ds = this.downsampledReads;\r\n\r\n            this.alignments.forEach(function (a) {\r\n                if (!ds.has(a.readName)) {\r\n                    tmp.push(a);\r\n                }\r\n            })\r\n            this.alignments = tmp;\r\n        }\r\n\r\n        this.alignments.sort(function (a, b) {\r\n            return a.start - b.start\r\n        });\r\n\r\n        this.pairsCache = undefined;\r\n        this.downsampledReads = undefined;\r\n    }\r\n\r\n    contains(chr, start, end) {\r\n        return this.chr == chr &&\r\n            this.start <= start &&\r\n            this.end >= end;\r\n    }\r\n\r\n    hasDownsampledIntervals() {\r\n        return this.downsampledIntervals && this.downsampledIntervals.length > 0;\r\n    }\r\n}\r\n    function finishBucket() {\r\n        this.alignments = this.alignments.concat(this.currentBucket.alignments);\r\n        if (this.currentBucket.downsampledCount > 0) {\r\n            this.downsampledIntervals.push(new DownsampledInterval(\r\n                this.currentBucket.start,\r\n                this.currentBucket.end,\r\n                this.currentBucket.downsampledCount));\r\n        }\r\n        this.paired = this.paired || this.currentBucket.paired;\r\n    }\r\n\r\nclass DownsampleBucket{\r\n    constructor(start, end, alignmentContainer) {\r\n\r\n        this.start = start;\r\n        this.end = end;\r\n        this.alignments = [];\r\n        this.downsampledCount = 0;\r\n        this.samplingDepth = alignmentContainer.samplingDepth;\r\n        this.pairsSupported = alignmentContainer.pairsSupported;\r\n        this.downsampledReads = alignmentContainer.downsampledReads;\r\n        this.pairsCache = alignmentContainer.pairsCache;\r\n    }\r\n\r\n    addAlignment(alignment) {\r\n\r\n        var samplingProb, idx, replacedAlignment, pairedAlignment;\r\n\r\n        if (this.alignments.length < this.samplingDepth) {\r\n\r\n            if (this.pairsSupported && canBePaired(alignment)) {\r\n                pairedAlignment = this.pairsCache[alignment.readName];\r\n                if (pairedAlignment) {\r\n                    //Not subject to downsampling, just update the existing alignment\r\n                    pairedAlignment.setSecondAlignment(alignment);\r\n                    this.pairsCache[alignment.readName] = undefined;   // Don't need to track this anymore. NOTE: Don't \"delete\", causes runtime performance issues\r\n                }\r\n                else {\r\n                    // First alignment in a pair\r\n                    pairedAlignment = new PairedAlignment(alignment);\r\n                    this.paired = true;\r\n                    this.pairsCache[alignment.readName] = pairedAlignment;\r\n                    this.alignments.push(pairedAlignment);\r\n                }\r\n            }\r\n            else {\r\n                this.alignments.push(alignment);\r\n            }\r\n\r\n        } else {\r\n\r\n            samplingProb = this.samplingDepth / (this.samplingDepth + this.downsampledCount + 1);\r\n\r\n            if (Math.random() < samplingProb) {\r\n\r\n                idx = Math.floor(Math.random() * (this.alignments.length - 1));\r\n                replacedAlignment = this.alignments[idx];   // To be replaced\r\n\r\n                if (this.pairsSupported && canBePaired(alignment)) {\r\n\r\n                    if(this.pairsCache[replacedAlignment.readName] !== undefined) {\r\n                        this.pairsCache[replacedAlignment.readName] = undefined;\r\n                    }\r\n\r\n                    pairedAlignment = new PairedAlignment(alignment);\r\n                    this.paired = true;\r\n                    this.pairsCache[alignment.readName] = pairedAlignment;\r\n                    this.alignments[idx] = pairedAlignment;\r\n\r\n                }\r\n                else {\r\n                    this.alignments[idx] = alignment;\r\n                }\r\n                this.downsampledReads.add(replacedAlignment.readName);\r\n\r\n            }\r\n            else {\r\n                this.downsampledReads.add(alignment.readName);\r\n            }\r\n\r\n            this.downsampledCount++;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n    // TODO -- refactor this to use an object, rather than an array,  if end-start is > some threshold\r\nclass CoverageMap{\r\n    constructor(chr, start, end) {\r\n\r\n        this.chr = chr;\r\n        this.bpStart = start;\r\n        this.length = (end - start);\r\n\r\n        this.coverage = new Array(this.length);\r\n\r\n        this.maximum = 0;\r\n\r\n       \r\n    }\r\n\r\n    incCounts(alignment) {\r\n\r\n        var self = this;\r\n\r\n        if (alignment.blocks === undefined) {\r\n\r\n            incBlockCount(alignment);\r\n        }\r\n        else {\r\n            alignment.blocks.forEach(function (block) {\r\n                incBlockCount(block);\r\n            });\r\n        }\r\n\r\n        function incBlockCount(block) {\r\n\r\n            var key,\r\n                base,\r\n                i,\r\n                j,\r\n                q;\r\n\r\n            for (i = block.start - self.bpStart, j = 0; j < block.len; i++, j++) {\r\n\r\n                if (!self.coverage[i]) {\r\n                    self.coverage[i] = new Coverage();\r\n                }\r\n\r\n                base = block.seq.charAt(j);\r\n                key = (alignment.strand) ? \"pos\" + base : \"neg\" + base;\r\n                q = block.qual[j];\r\n\r\n                self.coverage[i][key] += 1;\r\n                self.coverage[i][\"qual\" + base] += q;\r\n\r\n                self.coverage[i].total += 1;\r\n                self.coverage[i].qual += q;\r\n\r\n                self.maximum = Math.max(self.coverage[i].total, self.maximum);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nCoverageMap.threshold = 0.2;\r\nCoverageMap.qualityWeight = true;\r\n\r\nclass Coverage{\r\n    constructor() {\r\n        this.posA = 0;\r\n        this.negA = 0;\r\n\r\n        this.posT = 0;\r\n        this.negT = 0;\r\n\r\n        this.posC = 0;\r\n        this.negC = 0;\r\n        this.posG = 0;\r\n\r\n        this.negG = 0;\r\n\r\n        this.posN = 0;\r\n        this.negN = 0;\r\n\r\n        this.pos = 0;\r\n        this.neg = 0;\r\n\r\n        this.qualA = 0;\r\n        this.qualT = 0;\r\n        this.qualC = 0;\r\n        this.qualG = 0;\r\n        this.qualN = 0;\r\n\r\n        this.qual = 0;\r\n\r\n        this.total = 0;\r\n    }\r\n\r\n    isMismatch(refBase) {\r\n\r\n        var myself = this,\r\n            mismatchQualitySum,\r\n            threshold = CoverageMap.threshold * ((CoverageMap.qualityWeight && this.qual) ? this.qual : this.total);\r\n\r\n        mismatchQualitySum = 0;\r\n        [\"A\", \"T\", \"C\", \"G\"].forEach(function (base) {\r\n\r\n            if (base !== refBase) {\r\n                mismatchQualitySum += ((CoverageMap.qualityWeight && myself.qual) ? myself[\"qual\" + base] : (myself[\"pos\" + base] + myself[\"neg\" + base]));\r\n            }\r\n        });\r\n\r\n        return mismatchQualitySum >= threshold;\r\n\r\n    }\r\n}\r\n\r\nclass DownsampledInterval{\r\n    constructor(start, end, counts) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.counts = counts;\r\n    }\r\n\r\n    popupData(genomicLocation) {\r\n        return [\r\n            {name: \"start\", value: this.start + 1},\r\n            {name: \"end\", value: this.end},\r\n            {name: \"# downsampled:\", value: this.counts}]\r\n    }\r\n}\r\n\r\n\r\nclass PairedAlignment{\r\n    constructor(firstAlignment) {\r\n\r\n        this.firstAlignment = firstAlignment;\r\n        this.chr = firstAlignment.chr;\r\n        this.readName = firstAlignment.readName;\r\n\r\n        if (firstAlignment.start < firstAlignment.mate.position) {\r\n            this.start = firstAlignment.start;\r\n            this.end = Math.max(firstAlignment.mate.position, firstAlignment.start + firstAlignment.lengthOnRef);  // Approximate\r\n            this.connectingStart = firstAlignment.start + firstAlignment.lengthOnRef;\r\n            this.connectingEnd = firstAlignment.mate.position;\r\n        }\r\n        else {\r\n            this.start = firstAlignment.mate.position;\r\n            this.end = firstAlignment.start + firstAlignment.lengthOnRef;\r\n            this.connectingStart = firstAlignment.mate.position;\r\n            this.connectingEnd = firstAlignment.start;\r\n        }\r\n        this.lengthOnRef = this.end - this.start;\r\n\r\n    }\r\n\r\n    setSecondAlignment(alignment) {\r\n\r\n        // TODO -- check the chrs are equal,  error otherwise\r\n        this.secondAlignment = alignment;\r\n\r\n        if (alignment.start > this.firstAlignment.start) {\r\n            this.end = alignment.start + alignment.lengthOnRef;\r\n            this.connectingEnd = alignment.start;\r\n        }\r\n        else {\r\n            this.start = alignment.start;\r\n            this.connectingStart = alignment.start + alignment.lengthOnRef;\r\n        }\r\n        this.lengthOnRef = this.end - this.start;\r\n\r\n\r\n    }\r\n\r\n    popupData(genomicLocation) {\r\n\r\n        var nameValues = [];\r\n\r\n        nameValues = nameValues.concat(this.firstAlignment.popupData(genomicLocation));\r\n\r\n        if (this.secondAlignment) {\r\n            nameValues.push(\"-------------------------------\");\r\n            nameValues = nameValues.concat(this.secondAlignment.popupData(genomicLocation));\r\n        }\r\n        return nameValues;\r\n    }\r\n\r\n    isPaired () {\r\n        return true; // By definition\r\n    }\r\n\r\n    firstOfPairStrand () {\r\n        if (this.firstAlignment.isFirstOfPair()) {\r\n            return this.firstAlignment.strand;\r\n        }\r\n        else if (this.secondAlignment) {\r\n            return this.secondAlignment.strand;\r\n        }\r\n        else {\r\n            return this.firstAlignment.strand;          // This assumes inward pointing pairs\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass BamAlignmentRow {\r\n    constructor(){\r\n        this.alignments = [];\r\n        this.score = undefined;\r\n    }\r\n\r\n    findCenterAlignment(bpStart, bpEnd) {\r\n\r\n        var centerAlignment = undefined;\r\n\r\n        // find single alignment that overlaps sort location\r\n        this.alignments.forEach(function(a){\r\n\r\n            if (undefined === centerAlignment) {\r\n\r\n                if ((a.start + a.lengthOnRef) < bpStart || a.start > bpEnd) {\r\n                    // do nothing\r\n                } else {\r\n                    centerAlignment = a;\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        return centerAlignment;\r\n    }\r\n\r\n    updateScore(genomicLocation, genomicInterval, sortOption) {\r\n\r\n        this.score = this.caculateScore(genomicLocation, (1 + genomicLocation), genomicInterval, sortOption);\r\n\r\n    };\r\n\r\n    caculateScore(bpStart, bpEnd, genomicInterval, sortOption) {\r\n\r\n        var baseScore,\r\n            alignment;\r\n\r\n        alignment = this.findCenterAlignment(bpStart, bpEnd);\r\n        if (undefined === alignment) {\r\n            return Number.MAX_VALUE;\r\n        }\r\n\r\n        if (\"NUCLEOTIDE\" === sortOption.sort) {\r\n\r\n            baseScore = undefined;\r\n\r\n            alignment.blocks.forEach(function (block) {\r\n\r\n                var sequence = genomicInterval.sequence,\r\n                    coverageMap = genomicInterval.coverageMap,\r\n                    reference,\r\n                    base,\r\n                    coverage,\r\n                    count,\r\n                    phred;\r\n\r\n                if (\"*\" !== block.seq) {\r\n\r\n                    for (var i = 0, indexReferenceSequence = block.start - genomicInterval.start, bpBlockSequence = block.start, lengthBlockSequence = block.seq.length;\r\n                         i < lengthBlockSequence;\r\n                         i++, indexReferenceSequence++, bpBlockSequence++) {\r\n\r\n                        if (bpStart === bpBlockSequence) {\r\n\r\n                            reference = sequence.charAt(indexReferenceSequence);\r\n                            base = block.seq.charAt(i);\r\n\r\n                            if (base === \"=\") {\r\n                                base = reference;\r\n                            }\r\n\r\n                            if (base === 'N') {\r\n                                baseScore = 2;\r\n                            }\r\n                            else if (base === reference) {\r\n                                baseScore = 3;\r\n                            }\r\n                            else if (base === \"X\" || base !== reference){\r\n\r\n                                coverage = coverageMap.coverage[ (bpBlockSequence - coverageMap.bpStart) ];\r\n                                count = coverage[ \"pos\" + base ] + coverage[ \"neg\" + base ];\r\n                                phred = (coverage.qual) ? coverage.qual : 0;\r\n                                baseScore = -(count + (phred / 1000.0));\r\n                            } else {\r\n                                console.log(\"BamAlignmentRow.caculateScore - huh?\");\r\n                            }\r\n\r\n                        } // bpStart === bpBlockSequence\r\n\r\n                    } // block.seq.length\r\n\r\n                }\r\n                else {\r\n                    baseScore = 3;\r\n                }\r\n\r\n            });\r\n\r\n            return (undefined === baseScore) ? Number.MAX_VALUE : baseScore;\r\n        }\r\n        else if (\"STRAND\" === sortOption.sort) {\r\n\r\n            return alignment.strand ? 1 : -1;\r\n        }\r\n        else if (\"START\" === sortOption.sort) {\r\n\r\n            return alignment.start;\r\n        }\r\n\r\n        return Number.MAX_VALUE;\r\n\r\n    }\r\n}\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./src/vendor/zlib_and_gzip.min.js */ \"./src/vendor/zlib_and_gzip.min.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/bam.js\n");

/***/ }),

/***/ "./src/bigwig.js":
/*!***********************!*\
  !*** ./src/bigwig.js ***!
  \***********************/
/*! exports provided: BWSource, BinaryParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Zlib, __webpack_provided_$_dot_extend) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BWSource\", function() { return BWSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BinaryParser\", function() { return BinaryParser; });\n/* harmony import */ var _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./igvxhr.js */ \"./src/igvxhr.js\");\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\n\r\n//***********js/bigwig/bufferedReader.js*****************\r\nclass BufferedReader{\r\n    constructor(config, contentLength, bufferSize) {\r\n        this.path = config.url;\r\n        this.contentLength = contentLength;\r\n        this.bufferSize = bufferSize ? bufferSize : 512000;\r\n        this.range = {start: -1, size: -1};\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param requestedRange - byte rangeas {start, size}\r\n     * @param fulfill - function to receive result\r\n     * @param asUint8 - optional flag to return result as an UInt8Array\r\n     */\r\n    dataViewForRange(requestedRange, asUint8) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var hasData = (self.data && (self.range.start <= requestedRange.start) &&\r\n                ((self.range.start + self.range.size) >= (requestedRange.start + requestedRange.size))),\r\n                bufferSize,\r\n                loadRange;\r\n\r\n            if (hasData) {\r\n                subbuffer(self, requestedRange, asUint8);\r\n            }\r\n            else {\r\n                // Expand buffer size if needed, but not beyond content length\r\n                bufferSize = Math.max(self.bufferSize, requestedRange.size);\r\n\r\n                if (self.contentLength > 0 && requestedRange.start + bufferSize > self.contentLength) {\r\n                    loadRange = {start: requestedRange.start};\r\n                }\r\n                else {\r\n                    loadRange = {start: requestedRange.start, size: bufferSize};\r\n                }\r\n\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.path, Object.assign(self.config, {range: loadRange}))\r\n                    .then(function (arrayBuffer) {\r\n                    self.data = arrayBuffer;\r\n                    self.range = loadRange;\r\n                    subbuffer(self, requestedRange, asUint8);\r\n                }).catch(reject);\r\n\r\n            }\r\n\r\n\r\n            function subbuffer(bufferedReader, requestedRange, asUint8) {\r\n\r\n                var len = bufferedReader.data.byteLength,\r\n                    bufferStart = requestedRange.start - bufferedReader.range.start,\r\n                    result = asUint8 ?\r\n                        new Uint8Array(bufferedReader.data, bufferStart, len - bufferStart) :\r\n                        new DataView(bufferedReader.data, bufferStart, len - bufferStart);\r\n                fulfill(result);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n//**********js/bigwig/bwSource.js***************\r\nclass BWSource{\r\n\r\n    constructor(config,create_feature_function) {\r\n        this.reader = new BWReader(config);\r\n        this.bufferedReader = new BufferedReader(config);\r\n        if (!create_feature_function){\r\n            this.create_feature=BWSource.createFeature;\r\n        }\r\n        else{\r\n            this.create_feature=create_feature_function;\r\n        }\r\n    }\r\n    \r\n    /**\r\n\t* Creates a panel\r\n\t* @param {string} chr - The chromosome\r\n\t* @param {int} bpStart The starting postition \r\n\t* @param {int} bpEnd - The end of the region to show\r\n\t* @param {boolean} use_existing - If true then the cached feature will be used- only used\r\n\t* if the co-oridinates have not changed. Although, the BWreader has a cache, it is sometimes\r\n\t* ignored and features are re-fetched for the same region\r\n\t* @param {object} data - Should contain pixelWidth- the width of the entire canvas and \r\n\t* bpPerPixel.\r\n\t*/\r\n    getFeatures(chr, bpStart, bpEnd,use_existing,data) {\r\n        this.st = new Date().getTime();\r\n        var self = this;\r\n        return new Promise(function (fulfill, reject) {\r\n            if (self.features && use_existing){\r\n                fulfill(self.features);\r\n                return;\r\n            }\r\n            self.reader.getZoomHeaders().then(function (zoomLevelHeaders) {\r\n\r\n                // Select a biwig \"zoom level\" appropriate for the current resolution\r\n                var bwReader = self.reader,\r\n                    bufferedReader = self.bufferedReader,\r\n                    bpp =data.bpPerPixel,\r\n                    zoomLevelHeader=BWSource.zoomLevelForScale(bpp, zoomLevelHeaders),\r\n                    treeOffset\r\n                \r\n               \r\n                if (zoomLevelHeader && bwReader.type===\"BigWig\") {\r\n                    treeOffset = zoomLevelHeader.indexOffset;\r\n                    self.decodeFunction = BWSource.decodeZoomData;\r\n                } else {\r\n                    treeOffset = bwReader.header.fullIndexOffset;\r\n                    if (bwReader.type === \"BigWig\") {\r\n                        self.decodeFunction =BWSource.decodeWigData;\r\n                    }\r\n                    else {\r\n                        self.decodeFunction =self.decodeBedData;\r\n                    }\r\n                }\r\n\r\n                bwReader.loadRPTree(treeOffset).then(function (rpTree) {\r\n\r\n                    var chrIdx = self.reader.chromTree.dictionary[chr];\r\n                    if (chrIdx === undefined) {\r\n                        fulfill(null);\r\n                    }\r\n                    else {\r\n\r\n                        rpTree.findLeafItemsOverlapping(chrIdx, bpStart, bpEnd).then(function (leafItems) {\r\n\r\n                            var promises = [];\r\n\r\n                            if (!leafItems || leafItems.length == 0) fulfill([]);\r\n\r\n                            leafItems.forEach(function (item) {\r\n\r\n                                promises.push(new Promise(function (fulfill, reject) {\r\n                                    var features = [];\r\n\r\n                                    bufferedReader.dataViewForRange({\r\n                                        start: item.dataOffset,\r\n                                        size: item.dataSize\r\n                                    }, true).then(function (uint8Array) {\r\n                                  \r\n                                       var inflate = new Zlib.Zlib.Inflate(uint8Array);\r\n                                       var plain= inflate.decompress();\r\n                                       //var inflate = new pako.Inflate();\r\n                                       //inflate.push(uint8Array, true);\r\n                                        //var plain = inflate.result;\r\n                                        self.decodeFunction(new DataView(plain.buffer), chr, chrIdx, bpStart, bpEnd, features);\r\n\r\n                                        fulfill(features);\r\n\r\n                                    }).catch(reject);\r\n                                }));\r\n                            });\r\n\r\n\r\n                            Promise.all(promises).then(function (featureArrays) {\r\n                                var en = new Date().getTime();\r\n                                var e = en-self.st;\r\n                                var a = bpp;\r\n                                //console.log(e);\r\n                                var i, allFeatures = featureArrays[0];\r\n                                if(featureArrays.length > 1) {\r\n                                   for(i=1; i<featureArrays.length; i++) {\r\n                                       allFeatures = allFeatures.concat(featureArrays[i]);\r\n                                   }\r\n                                }  \r\n                                allFeatures.sort(function (a, b) {\r\n                                    return a.start - b.start;\r\n                                })\r\n                                self.features=allFeatures;\r\n                                fulfill(allFeatures)\r\n                            }).catch(reject);\r\n\r\n                        }).catch(function(error){\r\n                            reject(error);\r\n                        });\r\n                    }\r\n                }).catch(function(error){\r\n                    reject(error)\r\n                });\r\n            }).catch(function(error){\r\n                reject(error);\r\n            }\r\n            );\r\n\r\n\r\n        });\r\n    }\r\n    \r\n    \r\n    getDefaultRange() {\r\n        \r\n        if(this.reader.totalSummary != undefined) {\r\n            return this.reader.totalSummary.defaultRange;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    static zoomLevelForScale(bpPerPixel, zoomLevelHeaders) {\r\n\r\n        var level = null, i, zl;\r\n\r\n        for (i = 0; i < zoomLevelHeaders.length; i++) {\r\n\r\n            zl = zoomLevelHeaders[i];\r\n\r\n            if (zl.reductionLevel > bpPerPixel) {\r\n                level = zl;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (null == level) {\r\n            level = zoomLevelHeaders[zoomLevelHeaders.length - 1];\r\n        }\r\n\r\n        return (level && level.reductionLevel < 4 * bpPerPixel) ? level : null;\r\n    }\r\n\r\n\r\n    static decodeWigData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\r\n\r\n        var binaryParser = new BinaryParser(data),\r\n            chromId = binaryParser.getInt(),\r\n            chromStart = binaryParser.getInt(),\r\n            chromEnd = binaryParser.getInt(),\r\n            itemStep = binaryParser.getInt(),\r\n            itemSpan = binaryParser.getInt(),\r\n            type = binaryParser.getByte(),\r\n            reserved = binaryParser.getByte(),\r\n            itemCount = binaryParser.getUShort(),\r\n            value;\r\n\r\n        if (chromId === chrIdx) {\r\n\r\n            while (itemCount-- > 0) {\r\n\r\n                switch (type) {\r\n                    case 1:\r\n                        chromStart = binaryParser.getInt();\r\n                        chromEnd = binaryParser.getInt();\r\n                        value = binaryParser.getFloat();\r\n                        break;\r\n                    case 2:\r\n                        chromStart = binaryParser.getInt();\r\n                        value = binaryParser.getFloat();\r\n                        chromEnd = chromStart + itemSpan;\r\n                        break;\r\n                    case 3:  // Fixed step\r\n                        value = binaryParser.getFloat();\r\n                        chromEnd = chromStart + itemSpan;\r\n                        chromStart += itemStep;\r\n                        break;\r\n\r\n                }\r\n\r\n                if (chromStart >= bpEnd) {\r\n                    break; // Out of interval\r\n                } else if (chromEnd > bpStart && Number.isFinite(value)) {\r\n                    featureArray.push({chr: chr, start: chromStart, end: chromEnd, value: value});\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    static decodeZoomData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\r\n\r\n        var binaryParser = new BinaryParser(data),\r\n            minSize = 8 * 4,   // Minimum # of bytes required for a zoom record\r\n            chromId,\r\n            chromStart,\r\n            chromEnd,\r\n            validCount,\r\n            minVal,\r\n            maxVal,\r\n            sumData,\r\n            sumSquares,\r\n            value;\r\n\r\n        while (binaryParser.remLength() >= minSize) {\r\n            chromId = binaryParser.getInt();\r\n            if (chromId === chrIdx) {\r\n\r\n                chromStart = binaryParser.getInt();\r\n                chromEnd = binaryParser.getInt();\r\n                validCount = binaryParser.getInt();\r\n                minVal = binaryParser.getFloat();\r\n                maxVal = binaryParser.getFloat();\r\n                sumData = binaryParser.getFloat();\r\n                sumSquares = binaryParser.getFloat();\r\n                value = validCount == 0 ? 0 : sumData / validCount;\r\n\r\n                if (chromStart >= bpEnd && chromStart<1000000000) {\r\n                     console.log(\"should have broken\")\r\n\r\n                    break; // Out of interval\r\n                   \r\n                } else if (chromEnd > bpStart && Number.isFinite(value)) {\r\n                    featureArray.push({chr: chr, start: chromStart, end: chromEnd, value: value});\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    decodeBedData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\r\n\r\n        var binaryParser = new BinaryParser(data),\r\n            minSize = 3 * 4 + 1,   // Minimum # of bytes required for a bed record\r\n            chromId,\r\n            chromStart,\r\n            chromEnd,\r\n            rest,\r\n            tokens,\r\n            feature,\r\n            exonCount, exonSizes, exonStarts, exons, eStart, eEnd;\r\n\r\n\r\n        while (binaryParser.remLength() >= minSize) {\r\n\r\n            chromId = binaryParser.getInt();\r\n            if (chromId != chrIdx) continue;\r\n\r\n            chromStart = binaryParser.getInt();\r\n            chromEnd = binaryParser.getInt();\r\n            rest = binaryParser.getString();\r\n\r\n            feature = {chr: chr, start: chromStart, end: chromEnd};\r\n\r\n            if (chromStart < bpEnd && chromEnd >= bpStart) {\r\n                featureArray.push(feature);\r\n\r\n                tokens = rest.split(\"\\t\");\r\n                this.create_feature(tokens,feature);\r\n\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    static createFeature(tokens,feature){\r\n        if (tokens.length > 0) {\r\n                    feature.name = tokens[0];\r\n                }\r\n\r\n                if (tokens.length > 1) {\r\n                    feature.score = parseFloat(tokens[1]);\r\n                }\r\n                if (tokens.length > 2) {\r\n                    feature.strand = tokens[2];\r\n                }\r\n                if (tokens.length > 3) {\r\n                    feature.cdStart = parseInt(tokens[3]);\r\n                }\r\n                if (tokens.length > 4) {\r\n                    feature.cdEnd = parseInt(tokens[4]);\r\n                }\r\n                if (tokens.length > 5) {\r\n                    //if (tokens[5] !== \".\" && tokens[5] !== \"0\")\r\n                        //feature.color = igv.createColorString(tokens[5]);\r\n                }\r\n                if (tokens.length > 8) {\r\n                    exonCount = parseInt(tokens[6]);\r\n                    exonSizes = tokens[7].split(',');\r\n                    exonStarts = tokens[8].split(',');\r\n                    exons = [];\r\n\r\n                    for (var i = 0; i < exonCount; i++) {\r\n                        eStart = start + parseInt(exonStarts[i]);\r\n                        eEnd = eStart + parseInt(exonSizes[i]);\r\n                        exons.push({start: eStart, end: eEnd});\r\n                    }\r\n\r\n                    feature.exons = exons;\r\n                }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n//************js/bigwig/bwReader.js*****************\r\n\r\n\r\nconst BIGWIG_MAGIC_LTH = 0x888FFC26; // BigWig Magic Low to High\r\nconst BIGWIG_MAGIC_HTL = 0x26FC8F66; // BigWig Magic High to Low\r\nconst BIGBED_MAGIC_LTH = 0x8789F2EB; // BigBed Magic Low to High\r\nconst BIGBED_MAGIC_HTL = 0xEBF28987; // BigBed Magic High to Low\r\nconst BBFILE_HEADER_SIZE = 64;\r\n\r\n\r\nclass BWReader{\r\n    constructor(config) {\r\n        this.path = config.url;\r\n        this.headPath = config.headURL || this.path;\r\n        this.rpTreeCache = {};\r\n        this.config = __webpack_provided_$_dot_extend({},config,true);\r\n    };\r\n\r\n    getZoomHeaders() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            if (self.zoomLevelHeaders) {\r\n                fulfill(self.zoomLevelHeaders);\r\n            }\r\n            else {\r\n                self.loadHeader().then(function () {\r\n                    fulfill(self.zoomLevelHeaders);\r\n                }).catch(function (error) {\r\n                    reject(error);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    loadHeader() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.path, Object.assign(self.config, {range: {start: 0, size: BBFILE_HEADER_SIZE}}))\r\n                .then(function (data) {\r\n\r\n                if (!data) return;\r\n\r\n                // Assume low-to-high unless proven otherwise\r\n                self.littleEndian = true;\r\n\r\n                var binaryParser = new BinaryParser(new DataView(data));\r\n\r\n                var magic = binaryParser.getUInt();\r\n\r\n                if (magic === BIGWIG_MAGIC_LTH) {\r\n                    self.type = \"BigWig\";\r\n                }\r\n                else if (magic == BIGBED_MAGIC_LTH) {\r\n                    self.type = \"BigBed\";\r\n                }\r\n                else {\r\n                    //Try big endian order\r\n                    self.littleEndian = false;\r\n\r\n                    binaryParser.littleEndian = false;\r\n                    binaryParser.position = 0;\r\n                    var magic = binaryParser.getUInt();\r\n\r\n                    if (magic === BIGWIG_MAGIC_HTL) {\r\n                        self.type = \"BigWig\";\r\n                    }\r\n                    else if (magic == BIGBED_MAGIC_HTL) {\r\n                        self.type = \"BigBed\";\r\n                    }\r\n                    else {\r\n                        // TODO -- error, unknown file type  or BE\r\n                    }\r\n\r\n                }\r\n                // Table 5  \"Common header for BigWig and BigBed files\"\r\n                self.header = {};\r\n                self.header.bwVersion = binaryParser.getUShort();\r\n                self.header.nZoomLevels = binaryParser.getUShort();\r\n                self.header.chromTreeOffset = binaryParser.getLong();\r\n                self.header.fullDataOffset = binaryParser.getLong();\r\n                self.header.fullIndexOffset = binaryParser.getLong();\r\n                self.header.fieldCount = binaryParser.getUShort();\r\n                self.header.definedFieldCount = binaryParser.getUShort();\r\n                self.header.autoSqlOffset = binaryParser.getLong();\r\n                self.header.totalSummaryOffset = binaryParser.getLong();\r\n                self.header.uncompressBuffSize = binaryParser.getInt();\r\n                self.header.reserved = binaryParser.getLong();\r\n\r\n                self.loadZoomHeadersAndChrTree().then(fulfill).catch(reject);\r\n            }).catch(function (error) {\r\n                    reject(error);\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n\r\n   loadZoomHeadersAndChrTree() {\r\n\r\n\r\n        var startOffset = BBFILE_HEADER_SIZE,\r\n            self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            \r\n            var range = {start: startOffset, size: (self.header.fullDataOffset - startOffset + 5)};\r\n\r\n            _igvxhr_js__WEBPACK_IMPORTED_MODULE_0__[\"igvxhr\"].loadArrayBuffer(self.path, Object.assign(self.config, {range: range}))\r\n                .then(function (data) {\r\n\r\n                var nZooms = self.header.nZoomLevels,\r\n                    binaryParser = new BinaryParser(new DataView(data)),\r\n                    i,\r\n                    len,\r\n                    zoomNumber,\r\n                    zlh;\r\n\r\n                self.zoomLevelHeaders = [];\r\n\r\n                self.firstZoomDataOffset = Number.MAX_VALUE;\r\n                for (i = 0; i < nZooms; i++) {\r\n                    zoomNumber = nZooms - i;\r\n                    zlh = new ZoomLevelHeader(zoomNumber, binaryParser);\r\n                    self.firstZoomDataOffset = Math.min(zlh.dataOffset, self.firstZoomDataOffset);\r\n                    self.zoomLevelHeaders.push(zlh);\r\n                }\r\n\r\n                // Autosql\r\n                if (self.header.autoSqlOffset > 0) {\r\n                    binaryParser.position = self.header.autoSqlOffset - startOffset;\r\n                    self.autoSql = binaryParser.getString();\r\n                }\r\n\r\n                // Total summary\r\n                if (self.header.totalSummaryOffset > 0) {\r\n                    binaryParser.position = self.header.totalSummaryOffset - startOffset;\r\n                    self.totalSummary = new BWTotalSummary(binaryParser);\r\n                }\r\n\r\n                // Chrom data index\r\n                if (self.header.chromTreeOffset > 0) {\r\n                    binaryParser.position = self.header.chromTreeOffset - startOffset;\r\n                    self.chromTree = new BPTree(binaryParser, startOffset);\r\n                }\r\n                else {\r\n                    // TODO -- this is an error, not expected\r\n                }\r\n\r\n                //Finally total data count\r\n                binaryParser.position = self.header.fullDataOffset - startOffset;\r\n                self.dataCount = binaryParser.getInt();\r\n\r\n                fulfill();\r\n\r\n            }).catch(function(error){\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    loadRPTree(offset) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var rpTree = self.rpTreeCache[offset];\r\n            if (rpTree) {\r\n                fulfill(rpTree);\r\n            }\r\n            else {\r\n                rpTree = new RPTree(offset, self.contentLength, self.config, self.littleEndian);\r\n                self.rpTreeCache[offset] = rpTree;\r\n                rpTree.load().then(function () {\r\n                    fulfill(rpTree);\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n class ZoomLevelHeader{\r\n     constructor(index, byteBuffer) {\r\n        this.index = index;\r\n        this.reductionLevel = byteBuffer.getInt();\r\n        this.reserved = byteBuffer.getInt();\r\n        this.dataOffset = byteBuffer.getLong();\r\n        this.indexOffset = byteBuffer.getLong();\r\n    }\r\n }\r\n\r\n\r\nconst RPTREE_MAGIC_LTH = 0x2468ACE0;\r\nconst RPTREE_MAGIC_HTL = 0xE0AC6824;\r\nconst RPTREE_HEADER_SIZE = 48;\r\nconst RPTREE_NODE_LEAF_ITEM_SIZE = 32;   // leaf item size\r\nconst RPTREE_NODE_CHILD_ITEM_SIZE = 24;  // child item size\r\nconst BUFFER_SIZE = 512000; \r\n\r\n//***********js/bigwig/RPTree*******************\r\n\r\n\r\n     //  buffer\r\n\r\nclass RPTree{\r\n\r\n    constructor (fileOffset, contentLength, config, littleEndian) {\r\n\r\n        this.config = config;\r\n        this.filesize = contentLength;\r\n        this.fileOffset = fileOffset; // File offset to beginning of tree\r\n        this.path = config.url;\r\n        this.littleEndian = littleEndian;\r\n    }\r\n\r\n\r\n    load() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var rootNodeOffset = self.fileOffset + RPTREE_HEADER_SIZE,\r\n                bufferedReader = new BufferedReader(self.config, self.filesize, BUFFER_SIZE);\r\n\r\n            self.readNode(rootNodeOffset, bufferedReader).then(function (node) {\r\n                self.rootNode = node;\r\n                fulfill(self);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n\r\n    readNode(filePosition, bufferedReader) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            bufferedReader.dataViewForRange({start: filePosition, size: 4}, false).then(function (dataView) {\r\n                var binaryParser = new BinaryParser(dataView, self.littleEndian);\r\n\r\n                var type = binaryParser.getByte();\r\n                var isLeaf = (type === 1) ? true : false;\r\n                var reserved = binaryParser.getByte();\r\n                var count = binaryParser.getUShort();\r\n\r\n                filePosition += 4;\r\n\r\n                var bytesRequired = count * (isLeaf ? RPTREE_NODE_LEAF_ITEM_SIZE : RPTREE_NODE_CHILD_ITEM_SIZE);\r\n                var range2 = {start: filePosition, size: bytesRequired};\r\n\r\n                bufferedReader.dataViewForRange(range2, false).then(function (dataView) {\r\n\r\n                    var i,\r\n                        items = new Array(count),\r\n                        binaryParser = new BinaryParser(dataView);\r\n\r\n                    if (isLeaf) {\r\n                        for (i = 0; i < count; i++) {\r\n                            var item = {\r\n                                isLeaf: true,\r\n                                startChrom: binaryParser.getInt(),\r\n                                startBase: binaryParser.getInt(),\r\n                                endChrom: binaryParser.getInt(),\r\n                                endBase: binaryParser.getInt(),\r\n                                dataOffset: binaryParser.getLong(),\r\n                                dataSize: binaryParser.getLong()\r\n                            };\r\n                            items[i] = item;\r\n\r\n                        }\r\n                        fulfill(new RPTreeNode(items));\r\n                    }\r\n                    else { // non-leaf\r\n                        for (i = 0; i < count; i++) {\r\n\r\n                            var item = {\r\n                                isLeaf: false,\r\n                                startChrom: binaryParser.getInt(),\r\n                                startBase: binaryParser.getInt(),\r\n                                endChrom: binaryParser.getInt(),\r\n                                endBase: binaryParser.getInt(),\r\n                                childOffset: binaryParser.getLong()\r\n                            };\r\n                            items[i] = item;\r\n\r\n                        }\r\n\r\n                        fulfill(new RPTreeNode(items));\r\n                    }\r\n                }).catch(reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n\r\n    findLeafItemsOverlapping(chrIdx, startBase, endBase) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            var leafItems = [],\r\n                processing = new Set(),\r\n                bufferedReader = new BufferedReader(self.config, self.filesize, BUFFER_SIZE);\r\n\r\n            processing.add(0);  // Zero represents the root node\r\n            findLeafItems(self.rootNode, 0);\r\n\r\n            function findLeafItems(node, nodeId) {\r\n\r\n                if (RPTree.overlaps(node, chrIdx, startBase, endBase)) {\r\n\r\n                    var items = node.items;\r\n\r\n                    items.forEach(function (item) {\r\n\r\n                        if (RPTree.overlaps(item, chrIdx, startBase, endBase)) {\r\n\r\n                            if (item.isLeaf) {\r\n                                leafItems.push(item);\r\n                            }\r\n\r\n                            else {\r\n                                if (item.childNode) {\r\n                                    findLeafItems(item.childNode);\r\n                                }\r\n                                else {\r\n                                    processing.add(item.childOffset);  // Represent node to-be-loaded by its file position\r\n                                    self.readNode(item.childOffset, bufferedReader).then(function (node) {\r\n                                        item.childNode = node;\r\n                                        findLeafItems(node, item.childOffset);\r\n                                    }).catch(reject);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n                if (nodeId != undefined) processing.delete(nodeId);\r\n\r\n                // Wait until all nodes are processed\r\n                if (processing.size===0) {\r\n                    fulfill(leafItems);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Return true if {chrIdx:startBase-endBase} overlaps item's interval\r\n     * @returns {boolean}\r\n     */\r\n    static overlaps(item, chrIdx, startBase, endBase) {\r\n\r\n        //  if (chrIdx > item.endChrom || chrIdx < item.startChrom) return false;\r\n\r\n        if (!item) {\r\n            console.log(\"null item\");\r\n            return false;\r\n        }\r\n\r\n        return ((chrIdx > item.startChrom) || (chrIdx == item.startChrom && endBase >= item.startBase)) &&\r\n            ((chrIdx < item.endChrom) || (chrIdx == item.endChrom && startBase < item.endBase));\r\n    }\r\n}\r\n\r\n\r\nclass RPTreeNode{\r\n    constructor(items) {\r\n        this.items = items;\r\n\r\n        var minChromId = Number.MAX_VALUE,\r\n            maxChromId = 0,\r\n            minStartBase = Number.MAX_VALUE,\r\n            maxEndBase = 0,\r\n            i,\r\n            item;\r\n\r\n        for (i = 0; i < items.length; i++) {\r\n            item = items[i];\r\n            minChromId = Math.min(minChromId, item.startChrom);\r\n            maxChromId = Math.max(maxChromId, item.endChrom);\r\n            minStartBase = Math.min(minStartBase, item.startBase);\r\n            maxEndBase = Math.max(maxEndBase, item.endBase);\r\n        }\r\n\r\n        this.startChrom = minChromId;\r\n        this.endChrom = maxChromId;\r\n        this.startBase = minStartBase;\r\n        this.endBase = maxEndBase;\r\n\r\n    }\r\n}\r\n\r\n//*******************js/binary.js******************\r\nclass BinaryParser{\r\n    constructor(dataView, littleEndian) {\r\n\r\n        this.littleEndian = (littleEndian ? littleEndian : true);\r\n        this.position = 0;\r\n        this.view = dataView;\r\n        this.length = dataView.byteLength;\r\n    }\r\n\r\n    available() {\r\n        return this.length - this.position;\r\n    }\r\n\r\n    remLength() {\r\n        return this.length - this.position;\r\n    }\r\n\r\n    hasNext() {\r\n        return this.position < this.length - 1;\r\n    }\r\n\r\n    getByte() {\r\n        var retValue = this.view.getUint8(this.position, this.littleEndian);\r\n        this.position++;\r\n        return retValue;\r\n    }\r\n\r\n    getShort() {\r\n\r\n        var retValue = this.view.getInt16(this.position, this.littleEndian);\r\n        this.position += 2\r\n        return retValue;\r\n    }\r\n\r\n    getUShort(){\r\n\r\n        // var byte1 = this.getByte(),\r\n        //     byte2 = this.getByte(),\r\n        //     retValue = ((byte2 << 24 >>> 16) + (byte1 << 24 >>> 24));\r\n        //     return retValue;\r\n\r\n       //\r\n        var retValue = this.view.getUint16 (this.position, this.littleEndian);\r\n        this.position += 2\r\n        return retValue;\r\n    }\r\n\r\n\r\n    getInt() {\r\n\r\n        var retValue = this.view.getInt32(this.position, this.littleEndian);\r\n        this.position += 4;\r\n        return retValue;\r\n    }\r\n\r\n\r\n    getUInt() {\r\n        var retValue = this.view.getUint32(this.position, this.littleEndian);\r\n        this.position += 4;\r\n        return retValue;\r\n    }\r\n\r\n    getLong() {\r\n\r\n        // DataView doesn't support long. So we'll try manually\r\n\r\n        var b = [];\r\n        b[0] = this.view.getUint8(this.position);\r\n        b[1] = this.view.getUint8(this.position + 1);\r\n        b[2] = this.view.getUint8(this.position + 2);\r\n        b[3] = this.view.getUint8(this.position + 3);\r\n        b[4] = this.view.getUint8(this.position + 4);\r\n        b[5] = this.view.getUint8(this.position + 5);\r\n        b[6] = this.view.getUint8(this.position + 6);\r\n        b[7] = this.view.getUint8(this.position + 7);\r\n\r\n        var value = 0;\r\n        if (this.littleEndian) {\r\n            for (var i = b.length - 1; i >= 0; i--) {\r\n                value = (value * 256) + b[i];\r\n            }\r\n        } else {\r\n            for (var i = 0; i < b.length; i++) {\r\n                value = (value * 256) + b[i];\r\n            }\r\n        }\r\n\r\n\r\n        this.position += 8;\r\n        return value;\r\n    }\r\n\r\n    getString(len) {\r\n\r\n        var s = \"\";\r\n        var c;\r\n        while ((c = this.view.getUint8(this.position++)) != 0) {\r\n            s += String.fromCharCode(c);\r\n            if (len && s.length == len) break;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    getFixedLengthString(len) {\r\n\r\n        var s = \"\";\r\n        var i;\r\n        var c;\r\n        for (i = 0; i < len; i++) {\r\n            c = this.view.getUint8(this.position++);\r\n            if (c > 0) {\r\n                s += String.fromCharCode(c);\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n\r\n    getFixedLengthTrimmedString(len) {\r\n\r\n        var s = \"\";\r\n        var i;\r\n        var c;\r\n        for (i = 0; i < len; i++) {\r\n            c = this.view.getUint8(this.position++);\r\n            if (c > 32) {\r\n                s += String.fromCharCode(c);\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n\r\n    getFloat() {\r\n\r\n        var retValue = this.view.getFloat32(this.position, this.littleEndian);\r\n        this.position += 4;\r\n        return retValue;\r\n\r\n\r\n    }\r\n\r\n    getDouble() {\r\n\r\n        var retValue = this.view.getFloat64(this.position, this.littleEndian);\r\n        this.position += 8;\r\n        return retValue;\r\n    }\r\n\r\n    skip(n) {\r\n\r\n        this.position += n;\r\n        return this.position;\r\n    }\r\n\r\n\r\n    /**\r\n     * Return a bgzip (bam and tabix) virtual pointer\r\n     * TODO -- why isn't 8th byte used ?\r\n     * @returns {*}\r\n     */\r\n    getVPointer() {\r\n\r\n        var position = this.position,\r\n            offset = (this.view.getUint8(position + 1) << 8) | (this.view.getUint8(position)),\r\n            byte6 = ((this.view.getUint8(position + 6) & 0xff) * 0x100000000),\r\n            byte5 = ((this.view.getUint8(position + 5) & 0xff) * 0x1000000),\r\n            byte4 = ((this.view.getUint8(position + 4) & 0xff) * 0x10000),\r\n            byte3 = ((this.view.getUint8(position + 3) & 0xff) * 0x100),\r\n            byte2 = ((this.view.getUint8(position + 2) & 0xff)),\r\n            block = byte6 + byte5 + byte4 + byte3 + byte2;\r\n        this.position += 8;\r\n\r\n        //       if (block == 0 && offset == 0) {\r\n        //           return null;\r\n        //       } else {\r\n        return new VPointer(block, offset);\r\n        //       }\r\n    }\r\n}\r\n\r\nclass VPointer{\r\n    constructor(block, offset) {\r\n        this.block = block;\r\n        this.offset = offset;\r\n    }\r\n\r\n    isLessThan(vp) {\r\n        return this.block < vp.block ||\r\n            (this.block === vp.block && this.offset < vp.offset);\r\n    }\r\n\r\n    isGreaterThan(vp) {\r\n        return this.block > vp.block ||\r\n            (this.block === vp.block && this.offset > vp.offset);\r\n    }\r\n\r\n    print() {\r\n        return \"\" + this.block + \":\" + this.offset;\r\n    }\r\n}\r\n\r\n\r\n//*******js/bigwig/bwTotalSummary.js*************\r\n\r\n\r\n\r\nclass BWTotalSummary{\r\n    constructor(byteBuffer) {\r\n\r\n        if (byteBuffer) {\r\n\r\n            this.basesCovered = byteBuffer.getLong();\r\n            this.minVal = byteBuffer.getDouble();\r\n            this.maxVal = byteBuffer.getDouble();\r\n            this.sumData = byteBuffer.getDouble();\r\n            this.sumSquares = byteBuffer.getDouble();\r\n\r\n            this.computeStats();\r\n        }\r\n        else {\r\n            this.basesCovered = 0;\r\n            this.minVal = 0;\r\n            this.maxVal = 0;\r\n            this.sumData = 0;\r\n            this.sumSquares = 0;\r\n            this.mean = 0;\r\n            this.stddev = 0;\r\n        }\r\n    }\r\n\r\n\r\n     computeStats() {\r\n        var n = this.basesCovered;\r\n        if (n > 0) {\r\n            this.mean = this.sumData / n;\r\n            this.stddev = Math.sqrt(this.sumSquares / (n - 1));\r\n\r\n            var min = this.minVal < 0 ? this.mean - 2 * this.stddev : 0,\r\n                max = this.maxVal > 0 ? this.mean + 2 * this.stddev : 0;\r\n\r\n            this.defaultRange = {\r\n                min: 0,\r\n                max: this.mean + 3 * this.stddev\r\n            }\r\n        }\r\n    }\r\n\r\n    updateStats(stats) {\r\n\r\n        this.basesCovered += stats.count;\r\n        this.sumData += status.sumData;\r\n        this.sumSquares += sumSquares;\r\n        this.minVal = MIN(_minVal, min);\r\n        this.maxVal = MAX(_maxVal, max);\r\n\r\n        computeStats.call(this);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//***************js/bigwig/bwBPTree.js**************\r\n\r\n\r\nconst BPTREE_MAGIC_LTH = 0x78CA8C91;\r\nconst BPTREE_MAGIC_HTL = 0x918CCA78;\r\nconst BPTREE_HEADER_SIZE = 32;\r\n\r\n\r\n class BPTree{\r\n     constructor(binaryParser, startOffset) {\r\n\r\n        var self = this,\r\n            genome =  null;\r\n\r\n        this.header = {};\r\n        this.header.magic = binaryParser.getInt();\r\n        this.header.blockSize = binaryParser.getInt();\r\n        this.header.keySize = binaryParser.getInt();\r\n        this.header.valSize = binaryParser.getInt();\r\n        this.header.itemCount = binaryParser.getLong();\r\n        this.header.reserved = binaryParser.getLong();\r\n\r\n        this.dictionary = {};\r\n\r\n        // Recursively walk tree to populate dictionary\r\n        readTreeNode(binaryParser, -1, this.header.keySize, this.dictionary);\r\n\r\n        var itemSize = 8 + this.header.keySize;\r\n        var minSize = 4 + itemSize;   // Bytes for a node with 1 item\r\n\r\n        function readTreeNode(byteBuffer, offset, keySize, dictionary) {\r\n\r\n            if (offset >= 0) byteBuffer.position = offset;\r\n\r\n            var type = byteBuffer.getByte(),\r\n                reserved = byteBuffer.getByte(),\r\n                count = byteBuffer.getUShort(),\r\n                i,\r\n                key,\r\n                chromId,\r\n                chromSize,\r\n                childOffset,\r\n                bufferOffset,\r\n                currOffset;\r\n\r\n\r\n            if (type == 1) {\r\n\r\n                for (i = 0; i < count; i++) {\r\n\r\n                    key = byteBuffer.getFixedLengthTrimmedString(keySize);\r\n                    chromId = byteBuffer.getInt();\r\n                    chromSize = byteBuffer.getInt();\r\n\r\n                    if(genome) key = genome.getChromosomeName(key);  // Translate to canonical chr name\r\n                    dictionary[key] = chromId;\r\n\r\n                }\r\n            }\r\n            else { // non-leaf\r\n\r\n                for (i = 0; i < count; i++) {\r\n\r\n                    key = byteBuffer.getFixedLengthTrimmedString(keySize);\r\n                    childOffset = byteBuffer.getLong();\r\n                    bufferOffset = childOffset - startOffset;\r\n                    currOffset = byteBuffer.position;\r\n                    readTreeNode(byteBuffer, bufferOffset, keySize, dictionary);\r\n                    byteBuffer.position = currOffset;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./src/vendor/zlib_and_gzip.min.js */ \"./src/vendor/zlib_and_gzip.min.js\"), __webpack_require__(/*! extend */ \"extend\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/bigwig.js\n");

/***/ }),

/***/ "./src/feature.js":
/*!************************!*\
  !*** ./src/feature.js ***!
  \************************/
/*! exports provided: FeatureSource, FastaSequence, BigBedFeatureSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeatureSource\", function() { return FeatureSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FastaSequence\", function() { return FastaSequence; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BigBedFeatureSource\", function() { return BigBedFeatureSource; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./igvxhr.js */ \"./src/igvxhr.js\");\n/* harmony import */ var _bam_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bam.js */ \"./src/bam.js\");\n/* harmony import */ var _bigwig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bigwig.js */ \"./src/bigwig.js\");\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MAX_GZIP_BLOCK_SIZE = (1 << 16);\r\n\r\n    /**\r\n     * feature source for \"bed like\" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)\r\n     *\r\n     * @param config\r\n     * @constructor\r\n     */\r\nclass FeatureSource{\r\n    constructor(config) {\r\n\r\n        this.config = config || {};\r\n\r\n        this.sourceType = (config.sourceType === undefined ? \"file\" : config.sourceType);\r\n\r\n        if (config.sourceType === \"ga4gh\") {\r\n            this.reader = new igv.Ga4ghVariantReader(config);\r\n        } else if (config.sourceType === \"immvar\") {\r\n            this.reader = new igv.ImmVarReader(config);\r\n        } else if (config.type === \"eqtl\") {\r\n            if (config.sourceType === \"gtex-ws\") {\r\n                this.reader = new igv.GtexReader(config);\r\n            }\r\n            else {\r\n                this.reader = new igv.GtexFileReader(config);\r\n            }\r\n        } else if (config.sourceType === \"bigquery\") {\r\n            this.reader = new igv.BigQueryFeatureReader(config);\r\n        }\r\n        else {\r\n            // Default for all sorts of ascii tab-delimited file formts\r\n            this.reader = new FeatureFileReader(config);\r\n        }\r\n        this.visibilityWindow = config.visibilityWindow;\r\n\r\n    }\r\n\r\n\r\n    getFileHeader() {\r\n\r\n        var self = this,\r\n            maxRows = this.config.maxRows || 500;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (self.header) {\r\n                fulfill(self.header);\r\n            } else {\r\n                if (typeof self.reader.readHeader === \"function\") {\r\n\r\n                    self.reader.readHeader().then(function (header) {\r\n                        self.is_indexed=true;\r\n                        // Non-indexed readers will return features as a side effect.  This is an important,\r\n                        // if unfortunate, performance hack\r\n\r\n                        if(header) {\r\n                            var features = header.features;\r\n                            if (features) {\r\n\r\n                                if (\"gtf\" === self.config.format || \"gff3\" === self.config.format || \"gff\" === self.config.format) {\r\n                                    features = (new igv.GFFHelper(self.config.format)).combineFeatures(features);\r\n                                }\r\n\r\n                                // Assign overlapping features to rows\r\n\r\n                                packFeatures(features, maxRows);\r\n                                self.featureCache = new FeatureCache(features);\r\n\r\n                                // If track is marked \"searchable\"< cache features by name -- use this with caution, memory intensive\r\n                                if (self.config.searchable) {\r\n                                    self.addFeaturesToDB(features);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (header && header.format) {\r\n                            self.config.format = header.format;\r\n                        }\r\n\r\n                        fulfill(header);\r\n                    }).catch(reject);\r\n                }\r\n                else {\r\n                    fulfill(null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static addFeaturesToDB(featureList) {\r\n        featureList.forEach(function (feature) {\r\n            if (feature.name) {\r\n                igv.browser.featureDB[feature.name.toUpperCase()] = feature;\r\n            }\r\n        })\r\n    }\r\n\r\n    getFeatures(chr,start,end,force,data){\r\n      \r\n        //no need to get header\r\n        if (this.is_indexed){\r\n            return this._getFeatures(chr,start,end,force,data);\r\n        }\r\n        //get headers/index then get features\r\n        var self = this;\r\n        return new Promise(function(fulfill,reject){\r\n            self.getFileHeader().then(function(){\r\n                self._getFeatures(chr,start,end,force,data).then(function(features){\r\n                    fulfill(features);\r\n                }).catch(reject)\r\n            }).catch(reject);\r\n        });\r\n        \r\n    }\r\n    /**\r\n     * Required function fo all data source objects.  Fetches features for the\r\n     * range requested and passes them on to the success function.  Usually this is\r\n     * a function that renders the features on the canvas\r\n     *\r\n     * @param chr\r\n     * @param bpStart\r\n     * @param bpEnd\r\n     */\r\n\r\n    _getFeatures(chr, bpStart, bpEnd,force,data) {\r\n        if (bpStart===0){\r\n            bpStart=1;\r\n        }\r\n        var self = this;\r\n        self.time=Date.now();\r\n        return new Promise(function (fulfill, reject) {\r\n            if (self.featureCache && chr !== self.featureCache.range.chr){\r\n                self.featureCache=null;\r\n            }\r\n            var genomicInterval = new GenomicInterval(chr, bpStart, bpEnd),\r\n                featureCache = self.featureCache,\r\n                maxRows = self.config.maxRows || 500;\r\n           \r\n            let ranges_to_get=false;\r\n            if (!featureCache){\r\n                ranges_to_get={all:[bpStart,bpEnd]};\r\n            }\r\n            else{\r\n                if (featureCache.range !== undefined){\r\n                    ranges_to_get=featureCache.range.rangesToGet(genomicInterval)\r\n                }\r\n            }\r\n            if (!ranges_to_get) {\r\n                fulfill(self.featureCache.queryFeatures(chr, bpStart, bpEnd));\r\n\r\n            }\r\n            else {\r\n         \r\n             let promises=[];\r\n             let p_types=[];\r\n             for (let type in ranges_to_get){\r\n                    let range= ranges_to_get[type];\r\n                     promises.push(self.retrieveFeatures(chr, range[0], range[1],force,data));\r\n                     p_types.push([type,ranges_to_get[type]]);\r\n             }\r\n            \r\n\r\n            \r\n              Promise.all(promises).then(\r\n\r\n                    function (all_features) {\r\n                       \r\n                        let existing_features=[];\r\n                        if (self.featureCache){\r\n                            existing_features=self.featureCache.allFeatures();//featureCache.allFeatures(chr,self.featureCache.range.start,self.featureCache.range.end);\r\n                        }\r\n                        console.log(\"exisiting features:\"+existing_features.length)\r\n                    \r\n                        let index=0;\r\n                       \r\n                        for (let featureList of all_features){\r\n                            if (featureList === null){\r\n                                featureList=[];\r\n                            }\r\n                            \r\n                          /*  if (p_types[index][0]===\"all\"){\r\n                                new_range.start=p_types[index][1][0];\r\n                                new_range.end=p_types[index][1][1]\r\n                                if (featureList.length>0){\r\n                                   let st = featureList[0].start;\r\n                                   let end =featureList[featureList.length-1].end;\r\n                                   if (end>new_range.end){\r\n                                       new_range.end=end;\r\n                                   } \r\n                                   if (st<new_range.start){\r\n                                       new_range.start=st;\r\n                                   }      \r\n                                }\r\n                               */\r\n                               if (p_types[index][0]===\"left\"){\r\n                                   let end = p_types[index][1][1];\r\n                                   \r\n                                   //remove any already retieved\r\n                                  \r\n                                   let splice=0;\r\n                                   for (let n=featureList.length-1;n>=0;n--){\r\n                                       \r\n                                        if (featureList[n].end< end){\r\n                                            break;\r\n                                        }\r\n                                        splice++;\r\n                                   }\r\n                                   if (splice!==0){\r\n                                       featureList.splice(-splice)\r\n                                   }\r\n                                   console.log(\":::!!\"+featureList.length)\r\n                                   \r\n\r\n                                     \r\n                               \r\n                              }\r\n                              if (p_types[index][0]===\"right\"){\r\n                                  let start=p_types[index][1][0];\r\n                                \r\n                                   \r\n                                   //remove any already retieved\r\n                                   let n=0\r\n                                   for (n=0;n<featureList.length;n++){\r\n                                       \r\n                                        if (featureList[n].start> start){\r\n                                            break;\r\n                                        }\r\n                                   }\r\n                                   if (n!==0){\r\n                                       featureList.splice(0,n)\r\n                                   }\r\n                             }\r\n                            \r\n                            index++;\r\n\r\n                            console.log(\"new_features:\"+featureList.length)\r\n                            if (featureList && typeof featureList.forEach === 'function') {  // Have result AND its an array type\r\n\r\n                                var isIndexed =\r\n                                self.reader.indexed ||\r\n                                self.config.sourceType === \"ga4gh\" ||\r\n                                self.config.sourceType === \"immvar\" ||\r\n                                self.config.sourceType === \"gtex\" ||\r\n                                self.config.sourceType === \"bigquery\"||\r\n                                self.config.sourceType === \"custom\";\r\n\r\n                            // TODO -- COMBINE GFF FEATURES HERE\r\n                            // if(self.isGFF) featureList = combineFeatures(featureList);\r\n                                if (\"gtf\" === self.config.format || \"gff3\" === self.config.format || \"gff\" === self.config.format) {\r\n                                    featureList = (new igv.GFFHelper(self.config.format)).combineFeatures(featureList);\r\n                                }\r\n                                existing_features=existing_features.concat(featureList);\r\n                                console.log(\"all features:\"+existing_features.length)\r\n\r\n                            }\r\n                        }\r\n\r\n            \r\n\r\n                    \r\n                        let gi = self.featureCache?self.featureCache.range:genomicInterval;\r\n\r\n                        self.featureCache = isIndexed ?\r\n                                new FeatureCache(existing_features, gi) :\r\n                                new FeatureCache(featureList);   // Note - replacing previous cache with new one\r\n\r\n\r\n                            // Assign overlapping features to rows\r\n                            FeatureSource.packFeatures(existing_features, maxRows);\r\n\r\n                            // If track is marked \"searchable\"< cache features by name -- use this with caution, memory intensive\r\n                            if (self.config.searchable) {\r\n                                addFeaturesToDB(existing_features);\r\n                            }\r\n\r\n                            // Finally pass features for query interval to continuation\r\n                          /*  let alr ={};\r\n                            let f= self.featureCache.allFeatures();\r\n                            for (let i of f){\r\n                                if (alr[i.id]){\r\n                                    //console.log(i);\r\n                                    //console.log(alr[i.id]);\r\n                                }\r\n                                alr[i.id]=i;\r\n                            }\r\n                         */\r\n                        \r\n                            fulfill(self.featureCache.queryFeatures(chr, bpStart, bpEnd));\r\n                      \r\n                        \r\n                      \r\n\r\n                    }).catch(function(error){\r\n                        reject(error);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    retrieveFeatures(chr,start,end){\r\n        return this.reader.readFeatures(chr,start,end);\r\n    }\r\n\r\n\r\n    static packFeatures(features, maxRows) {\r\n\r\n        if (features == null || features.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Segregate by chromosome\r\n\r\n        var chrFeatureMap = {},\r\n            chrs = [];\r\n        features.forEach(function (feature) {\r\n\r\n            var chr = feature.chr,\r\n                flist = chrFeatureMap[chr];\r\n\r\n            if (!flist) {\r\n                flist = [];\r\n                chrFeatureMap[chr] = flist;\r\n                chrs.push(chr);\r\n            }\r\n\r\n            flist.push(feature);\r\n        });\r\n\r\n        // Loop through chrosomosomes and pack features;\r\n\r\n        chrs.forEach(function (chr) {\r\n\r\n            pack(chrFeatureMap[chr], maxRows);\r\n        });\r\n\r\n\r\n        // Assigns a row # to each feature.  If the feature does not fit in any row and #rows == maxRows no\r\n        // row number is assigned.\r\n        function pack(featureList, maxRows) {\r\n\r\n            var rows = [];\r\n\r\n            featureList.sort(function (a, b) {\r\n                return a.start - b.start;\r\n            })\r\n\r\n\r\n            rows.push(-1000);\r\n            featureList.forEach(function (feature) {\r\n\r\n                var i,\r\n                    r,\r\n                    len = Math.min(rows.length, maxRows),\r\n                    start = feature.start;\r\n\r\n                for (r = 0; r < len; r++) {\r\n                    if (start >= rows[r]) {\r\n                        feature.row = r;\r\n                        rows[r] = feature.end;\r\n                        return;\r\n                    }\r\n                }\r\n                feature.row = r;\r\n                rows[r] = feature.end;\r\n\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass BigBedFeatureSource extends FeatureSource{\r\n    constructor(config,decode_function){\r\n\t\tconfig.sourceType=\"gtex\";\r\n\t\tsuper(config);\r\n\t\tthis.header=true;\r\n\t\tthis.feature_source=new _bigwig_js__WEBPACK_IMPORTED_MODULE_3__[\"BWSource\"](config,decode_function);\r\n\t}\r\n\r\n\tretrieveFeatures(chr,bpStart,bpEnd,force,data){\r\n\t\treturn this.feature_source.getFeatures(chr,bpStart,bpEnd,false,data);     \t\r\n\t}\r\n}\r\n\r\n//********js/FeatureFileReader.js*****\r\n\r\n\r\n\r\nconst F_MAX_GZIP_BLOCK_SIZE = (1 << 16);\r\n\r\n    /**\r\n     * Reader for \"bed like\" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)\r\n     *\r\n     * @param config\r\n     * @constructor\r\n     */\r\nclass FeatureFileReader{\r\n    constructor(config) {\r\n\r\n        this.config = config || {};\r\n\r\n        if (config.localFile) {\r\n            this.localFile = config.localFile;\r\n            this.filename = config.localFile.name;\r\n        }\r\n        else {\r\n            this.url = config.url;\r\n            this.indexURL = config.indexURL;\r\n            this.headURL = config.headURL || this.filename;\r\n\r\n            var uriParts = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].parseUri(config.url);\r\n            this.filename = uriParts.file;\r\n            this.path = uriParts.path;\r\n        }\r\n\r\n        this.format = config.format;\r\n\r\n        this.parser = this.getParser(this.format, config.decode);\r\n    };\r\n\r\n\r\n    getParser(format, decode) {\r\n        switch (format) {\r\n            case \"vcf\":\r\n                return new VcfParser();\r\n            case \"seg\" :\r\n                return new SegParser();\r\n            default:\r\n                return new FeatureParser(format, decode, this.config);\r\n        }\r\n\r\n    }\r\n\r\n    // seg files don't have an index\r\n    isIndexable() {\r\n        var configIndexURL = this.config.indexURL,\r\n            type = this.type,\r\n            configIndexed = this.config.indexed;\r\n\r\n        return configIndexURL || (type != \"wig\" && configIndexed != false);\r\n    }\r\n\r\n\r\n    /**\r\n     * Return a Promise for the async loaded index\r\n     */\r\n    loadIndex() {\r\n        var idxFile = this.indexURL;\r\n        if (this.filename.endsWith(\".gz\")) {\r\n            if (!idxFile) idxFile = this.url + \".tbi\";\r\n            return Object(_bam_js__WEBPACK_IMPORTED_MODULE_2__[\"loadBamIndex\"])(idxFile, this.config, true);\r\n        }\r\n        else {\r\n            if (!idxFile) idxFile = this.url + \".idx\";\r\n            return loadTribbleIndex(idxFile, this.config);\r\n        }\r\n    }\r\n\r\n    loadFeaturesNoIndex() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var parser = self.parser,\r\n                options = {\r\n                    headers: self.config.headers,           // http headers, not file header\r\n                    withCredentials: self.config.withCredentials\r\n                };\r\n\r\n            if (self.localFile) {\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadStringFromFile(self.localFile, options).then(parseData).catch(reject);\r\n            }\r\n            else {\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadString(self.url, options).then(parseData).catch(reject);\r\n            }\r\n\r\n\r\n            function parseData(data) {\r\n                self.header = parser.parseHeader(data);\r\n                if (self.header instanceof String && self.header.startsWith(\"##gff-version 3\")) {\r\n                    self.format = 'gff3';\r\n                }\r\n                fulfill(parser.parseFeatures(data));   // <= PARSING DONE HERE\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n    loadFeaturesWithIndex(chr, start, end) {\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            var blocks,\r\n                index = self.index,\r\n                tabix = index && index.tabix,\r\n                refId = tabix ? index.sequenceIndexMap[chr] : chr,\r\n                promises = [];\r\n\r\n            blocks = index.blocksForRange(refId, start, end);\r\n\r\n            if (!blocks || blocks.length === 0) {\r\n                fulfill(null);       // TODO -- is this correct?  Should it return an empty array?\r\n            }\r\n            else {\r\n\r\n                blocks.forEach(function (block) {\r\n\r\n                    promises.push(new Promise(function (fulfill, reject) {\r\n\r\n                        var startPos = block.minv.block,\r\n                            startOffset = block.minv.offset,\r\n                            endPos = block.maxv.block + (index.tabix ? F_MAX_GZIP_BLOCK_SIZE : 0),\r\n                            options = {\r\n                                headers: self.config.headers,           // http headers, not file header\r\n                                range: {start: startPos, size: endPos - startPos + 1},\r\n                                withCredentials: self.config.withCredentials\r\n                            },\r\n                            success;\r\n\r\n                        success = function (data) {\r\n\r\n                            var inflated, slicedData;\r\n\r\n                            if (index.tabix) {\r\n\r\n                                inflated = _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].arrayBufferToString(Object(_igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"unbgzf\"])(data));\r\n                                // need to decompress data\r\n                            }\r\n                            else {\r\n                                inflated = data;\r\n                            }\r\n\r\n                            slicedData = startOffset ? inflated.slice(startOffset) : inflated;\r\n                            var f = self.parser.parseFeatures(slicedData);\r\n                            fulfill(f);\r\n                        };\r\n\r\n\r\n                        // Async load\r\n                        if (self.localFile) {\r\n                            _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadStringFromFile(self.localFile, options).then(success).catch(reject);\r\n                        }\r\n                        else {\r\n                            if (index.tabix) {\r\n                                _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadArrayBuffer(self.url, options).then(success).catch(reject);\r\n                            }\r\n                            else {\r\n                                _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadString(self.url, options).then(success).catch(reject);\r\n                            }\r\n                        }\r\n                    }))\r\n                });\r\n\r\n                Promise.all(promises).then(function (featureArrays) {\r\n\r\n                    var i, allFeatures;\r\n\r\n                    if (featureArrays.length === 1) {\r\n                        allFeatures = featureArrays[0];\r\n                    } else {\r\n                        allFeatures = featureArrays[0];\r\n\r\n                        for (i = 1; i < featureArrays.length; i++) {\r\n                            allFeatures = allFeatures.concat(featureArrays[i]);\r\n                        }\r\n\r\n                        allFeatures.sort(function (a, b) {\r\n                            return a.start - b.start;\r\n                        });\r\n                    }\r\n\r\n                    fulfill(allFeatures)\r\n                }).catch(reject);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getIndex() {\r\n\r\n        var self = this,\r\n        isIndeedIndexible = this.isIndexable();\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (self.indexed === undefined && isIndeedIndexible) {\r\n                self.loadIndex().then(function (index) {\r\n                    if (index) {\r\n                        self.index = index;\r\n                        self.indexed = true;\r\n                    }\r\n                    else {\r\n                        self.indexed = false;\r\n                    }\r\n                    fulfill(self.index);\r\n                }).catch(reject);\r\n            }\r\n            else {\r\n                fulfill(self.index);   // Is either already loaded, or there isn't one\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    readHeader() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n\r\n            if (self.header) {\r\n                fulfill(self.header);\r\n            }\r\n\r\n            else {\r\n\r\n                // We force a load of the index first\r\n\r\n               self. getIndex().then(function (index) {\r\n\r\n                    if (index) {\r\n                        // Load the file header (not HTTP header) for an indexed file.\r\n                        // TODO -- note this will fail if the file header is > 65kb in size\r\n                        var options = {\r\n                                headers: self.config.headers,           // http headers, not file header\r\n                                bgz: index.tabix,\r\n                                range: {start: 0, size: 65000},\r\n                                withCredentials: self.config.withCredentials\r\n                            },\r\n                            success = function (data) {\r\n                                self.header = self.parser.parseHeader(data);\r\n                                fulfill(self.header);\r\n                            };\r\n\r\n                        if (self.localFile) {\r\n                            _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadStringFromFile(self.localFile, options).then(success);\r\n                        }\r\n                        else {\r\n                            _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].loadString(self.url, options).then(success).catch(reject);\r\n                        }\r\n                    }\r\n                    else {\r\n                        self.loadFeaturesNoIndex(undefined).then(function (features) {\r\n                            var header = self.header || {};\r\n                            header.features = features;\r\n                            fulfill(header);\r\n                        }).catch(error);\r\n                    }\r\n                }).catch(reject);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fulfill\r\n     * @param range -- genomic range to load.  For use with indexed source (optional)\r\n     */\r\n    readFeatures(chr, start, end) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (self.index) {\r\n                self.loadFeaturesWithIndex(chr, start, end).then(packFeatures);\r\n            }\r\n            else {\r\n                self.loadFeaturesNoIndex().then(packFeatures);\r\n            }\r\n\r\n            function packFeatures(features) {\r\n                // TODO pack\r\n                fulfill(features);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//***js/feature/FeatureParsers.js**************\r\n\r\n\r\nconst maxFeatureCount = Number.MAX_VALUE;    // For future use,  controls downsampling\r\n\r\nconst gffNameFields = [\"Name\", \"gene_name\", \"gene\", \"gene_id\", \"alias\", \"locus\"];\r\n\r\n    /**\r\n     * A factory function.  Return a parser for the given file format.\r\n     */\r\nclass FeatureParser{\r\n    constructor(format, decode, config) {\r\n\r\n        var customFormat;\r\n\r\n        this.format = format;\r\n        this.nameField = config ? config.nameField : undefined;\r\n        this.skipRows = 0;   // The number of fixed header rows to skip.  Override for specific types as needed\r\n\r\n        if (decode) {\r\n            this.decode = decode;\r\n        }\r\n\r\n\r\n        switch (format) {\r\n            case \"narrowpeak\":\r\n            case \"broadpeak\":\r\n            case \"peaks\":\r\n                this.decode = this.decodePeak;\r\n                this.delimiter = /\\s+/;\r\n                break;\r\n            case \"bedgraph\":\r\n                this.decode = this.decodeBedGraph;\r\n                this.delimiter = /\\s+/;\r\n                break;\r\n            case \"wig\":\r\n                this.decode = this.decodeWig;\r\n                this.delimiter = /\\s+/;\r\n                break;\r\n            case \"gff3\" :\r\n            case \"gff\" :\r\n            case \"gtf\" :\r\n                this.decode = this.decodeGFF;\r\n                this.delimiter = \"\\t\";\r\n                break;\r\n            case \"aneu\":\r\n                this.decode = this.decodeAneu;\r\n                this.delimiter = \"\\t\";\r\n                break;\r\n            case \"fusionjuncspan\":\r\n                // bhaas, needed for FusionInspector view\r\n                this.decode = this.decodeFusionJuncSpan;\r\n                this.delimiter = /\\s+/;\r\n                break;\r\n            case \"gtexgwas\":\r\n                this.skipRows = 1;\r\n                this.decode = this.decodeGtexGWAS;\r\n                this.delimiter = \"\\t\";\r\n                break;\r\n            case \"refflat\":\r\n                this.decode = this.decodeRefflat;\r\n                this.delimiter = \"\\t\";\r\n                break;\r\n            default:\r\n\r\n               /* customFormat = igv.browser.getFormat(format);\r\n                if (customFormat !== undefined) {\r\n                    this.decode = decodeCustom;\r\n                    this.format = customFormat;\r\n                    this.delimiter = customFormat.delimiter || \"\\t\";\r\n                }\r\n\r\n                else {\r\n                                                */\r\n                    this.decode = FeatureParser.decodeBed;\r\n                    this.delimiter = /\\s+/;\r\n               // }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    parseHeader(data) {\r\n\r\n        var lines = data.split(\"\\n\"),\r\n            len = lines.length,\r\n            line,\r\n            i,\r\n            header;\r\n\r\n        for (i = 0; i < len; i++) {\r\n            line = lines[i];\r\n            if (line.startsWith(\"track\") || line.startsWith(\"#\") || line.startsWith(\"browser\")) {\r\n                if (line.startsWith(\"track\")) {\r\n                    header = this.parseTrackLine(line);\r\n                }\r\n                else if (line.startsWith(\"##gff-version 3\")) {\r\n                    this.format = \"gff3\";\r\n                    if (!header) header = {};\r\n                    header[\"format\"] = \"gff3\";\r\n                }\r\n            }\r\n            else {\r\n                header={};\r\n                break;\r\n            }\r\n        }\r\n        return header;\r\n    };\r\n\r\n    parseFeatures(data) {\r\n\r\n        if (!data) return null;\r\n\r\n        var wig,\r\n            feature,\r\n            lines = data.split(\"\\n\"),\r\n            len = lines.length,\r\n            tokens,\r\n            allFeatures = [],\r\n            line,\r\n            i,\r\n            cnt = 0,\r\n            j,\r\n            decode = this.decode,\r\n            format = this.format,\r\n            delimiter = this.delimiter || \"\\t\";\r\n\r\n\r\n        for (i = this.skipRows; i < len; i++) {\r\n            line = lines[i];\r\n            if (line.startsWith(\"track\") || line.startsWith(\"#\") || line.startsWith(\"browser\")) {\r\n                continue;\r\n            }\r\n            else if (format === \"wig\" && line.startsWith(\"fixedStep\")) {\r\n                wig = this.parseFixedStep(line);\r\n                continue;\r\n            }\r\n            else if (format === \"wig\" && line.startsWith(\"variableStep\")) {\r\n                wig = this.parseVariableStep(line);\r\n                continue;\r\n            }\r\n\r\n            tokens = lines[i].split(delimiter);\r\n            if (tokens.length < 1) continue;\r\n\r\n            feature = this.decode(tokens, wig);\r\n\r\n            if (feature) {\r\n                if (allFeatures.length < maxFeatureCount) {\r\n                    allFeatures.push(feature);\r\n                }\r\n                else {\r\n                    // Reservoir sampling,  conditionally replace existing feature with new one.\r\n                    j = Math.floor(Math.random() * cnt);\r\n                    if (j < maxFeatureCount) {\r\n                        allFeatures[j] = feature;\r\n                    }\r\n                }\r\n                cnt++;\r\n            }\r\n        }\r\n\r\n        return allFeatures;\r\n    };\r\n\r\n\r\n    static parseFixedStep(line) {\r\n\r\n        var tokens = line.split(/\\s+/),\r\n            cc = tokens[1].split(\"=\")[1],\r\n            ss = parseInt(tokens[2].split(\"=\")[1], 10),\r\n            step = parseInt(tokens[3].split(\"=\")[1], 10),\r\n            span = (tokens.length > 4) ? parseInt(tokens[4].split(\"=\")[1], 10) : 1;\r\n\r\n        return {format: \"fixedStep\", chrom: cc, start: ss, step: step, span: span, index: 0};\r\n\r\n    }\r\n\r\n    static parseVariableStep(line) {\r\n\r\n        var tokens = line.split(/\\s+/),\r\n            cc = tokens[1].split(\"=\")[1],\r\n            span = tokens.length > 2 ? parseInt(tokens[2].split(\"=\")[1], 10) : 1;\r\n        return {format: \"variableStep\", chrom: cc, span: span}\r\n\r\n    }\r\n\r\n    static parseTrackLine(line) {\r\n        var properties = {},\r\n            tokens = line.split(/(?:\")([^\"]+)(?:\")|([^\\s\"]+)(?=\\s+|$)/g),\r\n            tmp = [],\r\n            i, tk, curr;\r\n\r\n        // Clean up tokens array\r\n        for (i = 1; i < tokens.length; i++) {\r\n            if (!tokens[i] || tokens[i].trim().length === 0) continue;\r\n\r\n            tk = tokens[i].trim();\r\n\r\n            if (tk.endsWith(\"=\") > 0) {\r\n                curr = tk;\r\n            }\r\n            else if (curr) {\r\n                tmp.push(curr + tk);\r\n                curr = undefined;\r\n            }\r\n            else {\r\n                tmp.push(tk);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        tmp.forEach(function (str) {\r\n            if (!str) return;\r\n            var kv = str.split('=', 2);\r\n            if (kv.length == 2) {\r\n                properties[kv[0]] = kv[1];\r\n            }\r\n\r\n        });\r\n\r\n        return properties;\r\n    }\r\n\r\n    /**\r\n     * Decode the \"standard\" UCSC bed format\r\n     * @param tokens\r\n     * @param ignore\r\n     * @returns decoded feature, or null if this is not a valid record\r\n     */\r\n    static decodeBed(tokens, ignore) {\r\n\r\n        var chr, start, end, id, name, tmp, idName, exonCount, exonSizes, exonStarts, exons, exon, feature,\r\n            eStart, eEnd;\r\n\r\n        if (tokens.length < 3) return null;\r\n\r\n        chr = tokens[0];\r\n        start = parseInt(tokens[1]);\r\n        end = tokens.length > 2 ? parseInt(tokens[2]) : start + 1;\r\n\r\n        feature = {chr: chr, start: start, end: end, score: 1000};\r\n\r\n        if (tokens.length > 3) {\r\n            // Note: these are very special rules for the gencode gene files.\r\n            tmp = tokens[3].replace(/\"/g, '');\r\n            idName = tmp.split(';');\r\n            for (var i = 0; i < idName.length; i++) {\r\n                var kv = idName[i].split('=');\r\n                if (kv[0] == \"gene_id\") {\r\n                    id = kv[1];\r\n                }\r\n                if (kv[0] == \"gene_name\") {\r\n                    name = kv[1];\r\n                }\r\n            }\r\n            feature.id = id ? id : tmp;\r\n            feature.name = name ? name : tmp;\r\n        }\r\n\r\n        if (tokens.length > 4) {\r\n            feature.score = parseFloat(tokens[4]);\r\n        }\r\n        if (tokens.length > 5) {\r\n            feature.strand = tokens[5];\r\n        }\r\n        if (tokens.length > 6) {\r\n            feature.cdStart = parseInt(tokens[6]);\r\n        }\r\n        if (tokens.length > 7) {\r\n            feature.cdEnd = parseInt(tokens[7]);\r\n        }\r\n        if (tokens.length > 8) {\r\n            if (tokens[8] !== \".\" && tokens[8] !== \"0\")\r\n                feature.color = igv.createColorString(tokens[8]);\r\n        }\r\n        if (tokens.length > 11) {\r\n            exonCount = parseInt(tokens[9]);\r\n            exonSizes = tokens[10].split(',');\r\n            exonStarts = tokens[11].split(',');\r\n            exons = [];\r\n\r\n            for (var i = 0; i < exonCount; i++) {\r\n                eStart = start + parseInt(exonStarts[i]);\r\n                eEnd = eStart + parseInt(exonSizes[i]);\r\n                var exon = {start: eStart, end: eEnd};\r\n\r\n                if (feature.cdStart > eEnd || feature.cdEnd < feature.cdStart) exon.utr = true;   // Entire exon is UTR\r\n                if (feature.cdStart >= eStart && feature.cdStart <= eEnd) exon.cdStart = feature.cdStart;\r\n                if (feature.cdEnd >= eStart && feature.cdEnd <= eEnd) exon.cdEnd = feature.cdEnd;\r\n\r\n                exons.push(exon);\r\n            }\r\n\r\n            feature.exons = exons;\r\n        }\r\n\r\n        feature.popupData = function () {\r\n            var data = [];\r\n            if (feature.name) data.push({name: \"Name\", value: feature.name});\r\n            if (\"+\" === feature.strand || \"-\" === feature.strand) data.push({name: \"Strand\", value: feature.strand});\r\n            return data;\r\n        };\r\n\r\n        return feature;\r\n\r\n    }\r\n\r\n    /**\r\n     * Decode a UCSC \"refflat\" record\r\n     * @param tokens\r\n     * @param ignore\r\n     * @returns {*}\r\n     */\r\n    static decodeRefflat(tokens, ignore) {\r\n\r\n        if (tokens.length < 10) return null;\r\n\r\n        var feature = {\r\n                chr: tokens[2],\r\n                start: parseInt(tokens[4]),\r\n                end: parseInt(tokens[5]),\r\n                id: tokens[1],\r\n                name: tokens[0],\r\n                strand: tokens[3],\r\n                cdStart: parseInt(tokens[6]),\r\n                cdEnd: parseInt(tokens[7])\r\n            },\r\n            exonCount = parseInt(tokens[8]),\r\n            exonStarts = tokens[9].split(','),\r\n            exonEnds = tokens[10].split(','),\r\n            exons = [];\r\n\r\n        for (var i = 0; i < exonCount; i++) {\r\n            exons.push({start: parseInt(exonStarts[i]), end: parseInt(exonEnds[i])});\r\n        }\r\n\r\n        feature.exons = exons;\r\n\r\n        feature.popupData = function () {\r\n            return [{name: \"Name\", value: feature.name}];\r\n        };\r\n\r\n        return feature;\r\n\r\n    }\r\n\r\n    static decodePeak(tokens, ignore) {\r\n\r\n        var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;\r\n\r\n        tokenCount = tokens.length;\r\n        if (tokenCount < 9) {\r\n            return null;\r\n        }\r\n\r\n        chr = tokens[0];\r\n        start = parseInt(tokens[1]);\r\n        end = parseInt(tokens[2]);\r\n        name = tokens[3];\r\n        score = parseFloat(tokens[4]);\r\n        strand = tokens[5].trim();\r\n        signal = parseFloat(tokens[6]);\r\n        pValue = parseFloat(tokens[7]);\r\n        qValue = parseFloat(tokens[8]);\r\n\r\n        if (score === 0) score = signal;\r\n\r\n        return {\r\n            chr: chr, start: start, end: end, name: name, score: score, strand: strand, signal: signal,\r\n            pValue: pValue, qValue: qValue\r\n        };\r\n    }\r\n\r\n    static decodeBedGraph(tokens, ignore) {\r\n\r\n        var chr, start, end, value;\r\n\r\n        if (tokens.length < 3) return null;\r\n\r\n        chr = tokens[0];\r\n        start = parseInt(tokens[1]);\r\n        end = parseInt(tokens[2]);\r\n\r\n        value = parseFloat(tokens[3]);\r\n\r\n        return {chr: chr, start: start, end: end, value: value};\r\n    }\r\n\r\n    static decodeWig(tokens, wig) {\r\n\r\n        var ss,\r\n            ee,\r\n            value;\r\n\r\n        if (wig.format === \"fixedStep\") {\r\n\r\n            ss = (wig.index * wig.step) + wig.start;\r\n            ee = ss + wig.span;\r\n            value = parseFloat(tokens[0]);\r\n            ++(wig.index);\r\n            return isNaN(value) ? null : {chr: wig.chrom, start: ss, end: ee, value: value};\r\n        }\r\n        else if (wig.format === \"variableStep\") {\r\n\r\n            if (tokens.length < 2) return null;\r\n\r\n            ss = parseInt(tokens[0], 10);\r\n            ee = ss + wig.span;\r\n            value = parseFloat(tokens[1]);\r\n            return isNaN(value) ? null : {chr: wig.chrom, start: ss, end: ee, value: value};\r\n\r\n        }\r\n        else {\r\n            return decodeBedGraph(tokens);\r\n        }\r\n    }\r\n\r\n    static decodeAneu(tokens, ignore) {\r\n\r\n        var chr, start, end, feature;\r\n\r\n\r\n        if (tokens.length < 4) return null;\r\n\r\n        chr = tokens[1];\r\n        start = parseInt(tokens[2]);\r\n        end = tokens.length > 3 ? parseInt(tokens[3]) : start + 1;\r\n\r\n        feature = {chr: chr, start: start, end: end};\r\n\r\n        if (tokens.length > 4) {\r\n            feature.score = parseFloat(tokens[4]);\r\n            feature.value = feature.score;\r\n        }\r\n\r\n\r\n        feature.popupData = function () {\r\n            return [{name: \"Name\", value: feature.name}];\r\n        };\r\n\r\n        return feature;\r\n\r\n    }\r\n\r\n    static decodeFusionJuncSpan(tokens, ignore) {\r\n\r\n        /*\r\n         Format:\r\n\r\n         0       #scaffold\r\n         1       fusion_break_name\r\n         2       break_left\r\n         3       break_right\r\n         4       num_junction_reads\r\n         5       num_spanning_frags\r\n         6       spanning_frag_coords\r\n\r\n         0       B3GNT1--NPSR1\r\n         1       B3GNT1--NPSR1|2203-10182\r\n         2       2203\r\n         3       10182\r\n         4       189\r\n         5       1138\r\n         6       1860-13757,1798-13819,1391-18127,1443-17174,...\r\n\r\n         */\r\n\r\n\r\n       \r\n\r\n        var chr = tokens[0];\r\n        var fusion_name = tokens[1];\r\n        var junction_left = parseInt(tokens[2]);\r\n        var junction_right = parseInt(tokens[3]);\r\n        var num_junction_reads = parseInt(tokens[4]);\r\n        var num_spanning_frags = parseInt(tokens[5]);\r\n\r\n        var spanning_frag_coords_text = tokens[6];\r\n\r\n        var feature = {\r\n            chr: chr,\r\n            name: fusion_name,\r\n            junction_left: junction_left,\r\n            junction_right: junction_right,\r\n            num_junction_reads: num_junction_reads,\r\n            num_spanning_frags: num_spanning_frags,\r\n            spanning_frag_coords: [],\r\n\r\n            start: -1,\r\n            end: -1\r\n        }; // set start and end later based on min/max of span coords\r\n\r\n        var min_coord = junction_left;\r\n        var max_coord = junction_right;\r\n\r\n        if (num_spanning_frags > 0) {\r\n\r\n            var coord_pairs = spanning_frag_coords_text.split(',');\r\n\r\n            for (var i = 0; i < coord_pairs.length; i++) {\r\n                var split_coords = coord_pairs[i].split('-');\r\n\r\n                var span_left = split_coords[0];\r\n                var span_right = split_coords[1];\r\n\r\n                if (span_left < min_coord) {\r\n                    min_coord = span_left;\r\n                }\r\n                if (span_right > max_coord) {\r\n                    max_coord = span_right;\r\n                }\r\n                feature.spanning_frag_coords.push({left: span_left, right: span_right});\r\n\r\n            }\r\n        }\r\n\r\n        feature.start = min_coord;\r\n        feature.end = max_coord;\r\n\r\n\r\n        feature.popupData = function () {\r\n            return [{name: \"Name\", value: feature.name}];\r\n        };\r\n\r\n        return feature;\r\n\r\n    }\r\n\r\n    static decodeGtexGWAS(tokens, ignore) {\r\n\r\n\r\n        var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;\r\n\r\n        tokenCount = tokens.length;\r\n        if (tokenCount < 8) {\r\n            return null;\r\n        }\r\n\r\n        chr = tokens[0];\r\n        start = parseInt(tokens[1]) - 1;\r\n        end = parseInt(tokens[3].split(':')[1]);\r\n        //name = tokens[3];\r\n        //score = parseFloat(tokens[4]);\r\n        //strand = tokens[5].trim();\r\n        //signal = parseFloat(tokens[6]);\r\n        pValue = parseFloat(tokens[5]);\r\n        //qValue = parseFloat(tokens[8]);\r\n\r\n        //return {chr: chr, start: start, end: end, name: name, score: score, strand: strand, signal: signal,\r\n        //    pValue: pValue, qValue: qValue};\r\n        return {chr: chr, start: start, end: end, pvalue: pValue};\r\n    }\r\n\r\n    /**\r\n     * Decode a single gff record (1 line in file).  Aggregations such as gene models are constructed at a higher level.\r\n     *      ctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00001;Parent=gene00001\r\n     * @param tokens\r\n     * @param ignore\r\n     * @returns {*}\r\n     */\r\n    static decodeGFF(tokens, ignore) {\r\n\r\n        var tokenCount, chr, start, end, strand, type, score, phase, attributeString, id, parent, color, name,\r\n            transcript_id, i,\r\n            format = this.format;\r\n\r\n        tokenCount = tokens.length;\r\n        if (tokenCount < 9) {\r\n            return null;      // Not a valid gff record\r\n        }\r\n\r\n        chr = tokens[0];\r\n        type = tokens[2];\r\n        start = parseInt(tokens[3]) - 1;\r\n        end = parseInt(tokens[4]);\r\n        score = \".\" === tokens[5] ? 0 : parseFloat(tokens[5]);\r\n        strand = tokens[6];\r\n        phase = \".\" === tokens[7] ? 0 : parseInt(tokens[7]);\r\n        attributeString = tokens[8];\r\n\r\n        // Find ID and Parent, or transcript_id\r\n        var delim = ('gff3' === format) ? '=' : /\\s+/;\r\n        var attributes = {};\r\n        attributeString.split(';').forEach(function (kv) {\r\n            var t = kv.trim().split(delim, 2), key, value;\r\n            if (t.length == 2) {\r\n                key = t[0].trim();\r\n                value = t[1].trim();\r\n                //Strip off quotes, if any\r\n                if (value.startsWith('\"') && value.endsWith('\"')) {\r\n                    value = value.substr(1, value.length - 2);\r\n                }\r\n                if (\"ID\" === t[0]) id = t[1];\r\n                else if (\"Parent\" === t[0]) parent = t[1];\r\n                else if (\"color\" === t[0].toLowerCase()) color = igv.createColorString(t[1]);\r\n                else if (\"transcript_id\" === t[0]) id = t[1];     // gtf format\r\n                attributes[key] = value;\r\n            }\r\n        });\r\n\r\n        // Find name (label) property\r\n        if (this.nameField) {\r\n            name = attributes[this.nameField];\r\n        }\r\n        else {\r\n            for (i = 0; i < gffNameFields.length; i++) {\r\n                if (attributes.hasOwnProperty(gffNameFields[i])) {\r\n                    this.nameField = gffNameFields[i];\r\n                    name = attributes[this.nameField];\r\n\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return {\r\n            id: id,\r\n            parent: parent,\r\n            name: name,\r\n            type: type,\r\n            chr: chr,\r\n            start: start,\r\n            end: end,\r\n            score: score,\r\n            strand: strand,\r\n            color: color,\r\n            attributeString: attributeString,\r\n            popupData: function () {\r\n                var kvs = this.attributeString.split(';'),\r\n                    pd = [],\r\n                    key, value;\r\n                kvs.forEach(function (kv) {\r\n                    var t = kv.trim().split(delim, 2);\r\n                    if (t.length === 2 && t[1] !== undefined) {\r\n                        key = t[0].trim();\r\n                        value = t[1].trim();\r\n                        //Strip off quotes, if any\r\n                        if (value.startsWith('\"') && value.endsWith('\"')) {\r\n                            value = value.substr(1, value.length - 2);\r\n                        }\r\n                        pd.push({name: key, value: value});\r\n                    }\r\n                });\r\n                return pd;\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Decode the \"standard\" UCSC bed format\r\n     * @param tokens\r\n     * @param ignore\r\n     * @returns decoded feature, or null if this is not a valid record\r\n     */\r\n    decodeCustom(tokens, ignore) {\r\n\r\n        var feature,\r\n            chr, start, end,\r\n            format = this.format,         // \"this\" refers to FeatureParser instance\r\n            coords = format.coords || 0;\r\n\r\n        if (tokens.length < 3) return null;\r\n\r\n        chr = tokens[format.chr];\r\n        start = parseInt(tokens[format.start]) - coords;\r\n        end = format.end !== undefined ? parseInt(tokens[format.end]) : start + 1;\r\n\r\n        feature = {chr: chr, start: start, end: end};\r\n\r\n        if (format.fields) {\r\n            format.fields.forEach(function (field, index) {\r\n                if (index != format.chr && index != format.start && index != format.end) {\r\n                    feature[field] = tokens[index];\r\n                }\r\n            });\r\n        }\r\n\r\n        return feature;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//*******js/feature/featureCache.js**********************\r\n\r\n\r\n    /**\r\n     * Object for caching lists of features.  Supports effecient queries for sub-range  (chr, start, end)\r\n     *\r\n     * @param featureList\r\n     * @param The genomic range spanned by featureList (optional)\r\n     * @constructor\r\n     */\r\n\r\nclass FeatureCache{\r\n    constructor(featureList, range) {\r\n        this.treeMap = FeatureCache.buildTreeMap(featureList);\r\n        this.range = range;\r\n    }\r\n\r\n    queryFeatures(chr, start, end) {\r\n         \r\n\r\n        var featureList, intervalFeatures, feature, len, i, tree, intervals;\r\n\r\n        tree = this.treeMap[chr];\r\n\r\n        if (!tree) return [];\r\n\r\n        intervals = tree.findOverlapping(start, end);\r\n\r\n        if (intervals.length == 0) {\r\n            return [];\r\n        }\r\n        else {\r\n            // Trim the list of features in the intervals to those\r\n            // overlapping the requested range.\r\n            // Assumption: features are sorted by start position\r\n\r\n            featureList = [];\r\n\r\n            intervals.forEach(function (interval) {\r\n                intervalFeatures = interval.value;\r\n                len = intervalFeatures.length;\r\n                for (i = 0; i < len; i++) {\r\n                    feature = intervalFeatures[i];\r\n                    if (feature.start > end) break;\r\n                    else if (feature.end >= start) {\r\n                        featureList.push(feature)\r\n                    }\r\n                }\r\n            });\r\n            return featureList;\r\n        }\r\n\r\n    };\r\n\r\n    allFeatures() {\r\n\r\n        var allFeatures = [];\r\n        var treeMap = this.treeMap;\r\n        if (treeMap) {\r\n            for (var key in treeMap) {\r\n                if (treeMap.hasOwnProperty(key)) {\r\n\r\n                    var tree = treeMap[key];\r\n                    tree.mapIntervals(function (interval) {\r\n                        allFeatures = allFeatures.concat(interval.value);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return allFeatures;\r\n\r\n    }\r\n\r\n    static buildTreeMap(featureList) {\r\n\r\n        var featureCache = {},\r\n            chromosomes = [],\r\n            treeMap = {},\r\n            genome = null;\r\n\r\n        if (featureList) {\r\n\r\n            featureList.forEach(function (feature) {\r\n\r\n                var chr = feature.chr,\r\n                    geneList;\r\n\r\n                // Translate to \"official\" name\r\n                if(genome) chr = genome.getChromosomeName(chr);\r\n\r\n                geneList = featureCache[chr];\r\n\r\n                if (!geneList) {\r\n                    chromosomes.push(chr);\r\n                    geneList = [];\r\n                    featureCache[chr] = geneList;\r\n                }\r\n\r\n                geneList.push(feature);\r\n\r\n            });\r\n\r\n\r\n            // Now build interval tree for each chromosome\r\n\r\n            for (let i = 0; i < chromosomes.length; i++) {\r\n                let chr = chromosomes[i];\r\n                treeMap[chr] =FeatureCache.buildIntervalTree(featureCache[chr]);\r\n            }\r\n        }\r\n\r\n        return treeMap;\r\n    };\r\n\r\n    /**\r\n     * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups\r\n     * of 10, or total size / 100,   to reduce size of the tree.\r\n     *\r\n     * @param featureList\r\n     */\r\n    static buildIntervalTree(featureList) {\r\n\r\n        var i, e, iStart, iEnd, tree, chunkSize, len, subArray;\r\n\r\n        tree = new IntervalTree();\r\n        len = featureList.length;\r\n\r\n        chunkSize = Math.max(10, Math.round(len / 100));\r\n\r\n        featureList.sort(function (f1, f2) {\r\n            return (f1.start === f2.start ? 0 : (f1.start > f2.start ? 1 : -1));\r\n        });\r\n\r\n        for (i = 0; i < len; i += chunkSize) {\r\n            e = Math.min(len, i + chunkSize);\r\n            subArray = featureList.slice(i, e);\r\n            iStart = subArray[0].start;\r\n            //\r\n            iEnd = iStart;\r\n            subArray.forEach(function (feature) {\r\n                iEnd = Math.max(iEnd, feature.end);\r\n            });\r\n            tree.insert(iStart, iEnd, subArray);\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n\r\n}\r\n\r\n//*****js/intervalTree.js************\r\n\r\n\r\nconst BLACK = 1;\r\nconst RED = 2;\r\n\r\nlet NIL = {}\r\nNIL.color = BLACK;\r\nNIL.parent = NIL;\r\nNIL.left = NIL;\r\nNIL.right = NIL;\r\n\r\n  \r\nclass IntervalTree{\r\n    constructor() {    \r\n        this.root = NIL;\r\n    }\r\n\r\n\r\n    insert(start, end, value) {\r\n\r\n        var interval = new Interval(start, end, value);\r\n        var x = new Node(interval);\r\n        this.treeInsert(x);\r\n        x.color = RED;\r\n        while (x != this.root && x.parent.color == RED) {\r\n            if (x.parent == x.parent.parent.left) {\r\n                var y = x.parent.parent.right;\r\n                if (y.color == RED) {\r\n                    x.parent.color = BLACK;\r\n                    y.color = BLACK;\r\n                    x.parent.parent.color = RED;\r\n                    x = x.parent.parent;\r\n                } else {\r\n                    if (x == x.parent.right) {\r\n                        x = x.parent;\r\n                        this.leftRotate(x);\r\n                    }\r\n                    x.parent.color = BLACK;\r\n                    x.parent.parent.color = RED;\r\n                    this.rightRotate(x.parent.parent);\r\n                }\r\n            } else {\r\n                var y = x.parent.parent.left;\r\n                if (y.color == RED) {\r\n                    x.parent.color = BLACK;\r\n                    y.color = BLACK;\r\n                    x.parent.parent.color = RED;\r\n                    x = x.parent.parent;\r\n                } else {\r\n                    if (x == x.parent.left) {\r\n                        x = x.parent;\r\n                        this.rightRotate(x);\r\n                    }\r\n                    x.parent.color = BLACK;\r\n                    x.parent.parent.color = RED;\r\n                    this.leftRotate(x.parent.parent);\r\n                }\r\n            }\r\n        }\r\n        this.root.color = BLACK;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param start - query interval\r\n     * @param end - query interval\r\n     * @returns Array of all intervals overlapping the query region\r\n     */\r\n    findOverlapping(start, end) {\r\n\r\n\r\n        var searchInterval = new Interval(start, end, 0);\r\n\r\n        if (this.root === NIL) return [];\r\n\r\n        var intervals = this.searchAll(searchInterval, this.root, []);\r\n\r\n        if(intervals.length > 1) {\r\n            intervals.sort(function(i1, i2) {\r\n                 return i1.low - i2.low;\r\n            });\r\n        }\r\n\r\n        return intervals;\r\n    }\r\n\r\n    /**\r\n     * Dump info on intervals to console.  For debugging.\r\n     */\r\n    logIntervals() {\r\n\r\n        logNode(this.root, 0);\r\n\r\n        function logNode(node, indent) {\r\n\r\n            var space = \"\";\r\n            for(var i=0; i<indent; i++) space += \" \";\r\n            console.log(space + node.interval.low + \" \" + node.interval.high); // + \" \" + (node.interval.value ? node.interval.value : \" null\"));\r\n\r\n            indent += 5;\r\n\r\n            if(node.left != NIL) logNode(node.left, indent);\r\n            if(node.right != NIL) logNode(node.right, indent);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    mapIntervals(func) {\r\n\r\n        applyInterval(this.root);\r\n\r\n        function applyInterval(node) {\r\n\r\n            func(node.interval);\r\n\r\n            if(node.left != NIL) applyInterval(node.left);\r\n            if(node.right != NIL) applyInterval(node.right);\r\n        }\r\n    }\r\n\r\n    searchAll(interval, node, results) {\r\n\r\n        if (node.interval.overlaps(interval)) {\r\n            results.push(node.interval);\r\n        }\r\n\r\n        if (node.left != NIL && node.left.max >= interval.low) {\r\n            this.searchAll(interval, node.left, results);\r\n        }\r\n\r\n        if (node.right != NIL && node.right.min <= interval.high) {\r\n            this.searchAll(interval, node.right, results);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    leftRotate(x) {\r\n        var y = x.right;\r\n        x.right = y.left;\r\n        if (y.left != NIL) {\r\n            y.left.parent = x;\r\n        }\r\n        y.parent = x.parent;\r\n        if (x.parent == NIL) {\r\n            this.root = y;\r\n        } else {\r\n            if (x.parent.left == x) {\r\n                x.parent.left = y;\r\n            } else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;\r\n        x.parent = y;\r\n\r\n        this.applyUpdate(x);\r\n        // no need to apply update on y, since it'll y is an ancestor\r\n        // of x, and will be touched by applyUpdate().\r\n    }\r\n\r\n\r\n    rightRotate(x) {\r\n        var y = x.left;\r\n        x.left = y.right;\r\n        if (y.right != NIL) {\r\n            y.right.parent = x;\r\n        }\r\n        y.parent = x.parent;\r\n        if (x.parent == NIL) {\r\n            this.root = y;\r\n        } else {\r\n            if (x.parent.right == x) {\r\n                x.parent.right = y;\r\n            } else {\r\n                x.parent.left = y;\r\n            }\r\n        }\r\n        y.right = x;\r\n        x.parent = y;\r\n\r\n\r\n        this.applyUpdate(x);\r\n        // no need to apply update on y, since it'll y is an ancestor\r\n        // of x, and will be touched by applyUpdate().\r\n    }\r\n\r\n\r\n    /**\r\n     * Note:  Does not maintain RB constraints,  this is done post insert\r\n     *\r\n     * @param x  a Node\r\n     */\r\n   treeInsert(x) {\r\n        var node = this.root;\r\n        var y = NIL;\r\n        while (node != NIL) {\r\n            y = node;\r\n            if (x.interval.low <= node.interval.low) {\r\n                node = node.left;\r\n            } else {\r\n                node = node.right;\r\n            }\r\n        }\r\n        x.parent = y;\r\n\r\n        if (y == NIL) {\r\n            this.root = x;\r\n            x.left = x.right = NIL;\r\n        } else {\r\n            if (x.interval.low <= y.interval.low) {\r\n                y.left = x;\r\n            } else {\r\n                y.right = x;\r\n            }\r\n        }\r\n\r\n        this.applyUpdate(x);\r\n    }\r\n\r\n\r\n    // Applies the statistic update on the node and its ancestors.\r\n    applyUpdate (node) {\r\n        while (node != NIL) {\r\n            var nodeMax = node.left.max > node.right.max ? node.left.max : node.right.max;\r\n            var intervalHigh = node.interval.high;\r\n            node.max = nodeMax > intervalHigh ? nodeMax : intervalHigh;\r\n\r\n            var nodeMin = node.left.min < node.right.min ? node.left.min : node.right.min;\r\n            var intervalLow = node.interval.low;\r\n            node.min = nodeMin < intervalLow ? nodeMin : intervalLow;\r\n\r\n            node = node.parent;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Interval {\r\n    constructor(low, high, value) {\r\n        this.low = low;\r\n        this.high = high;\r\n        this.value = value;\r\n    }\r\n\r\n\r\n    equals(other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this == other) {\r\n            return true;\r\n        }\r\n        return (this.low == otherInterval.low &&\r\n            this.high == otherInterval.high);\r\n\r\n    }\r\n\r\n\r\n    compareTo(other) {\r\n        if (this.low < other.low)\r\n            return -1;\r\n        if (this.low > other.low)\r\n            return 1;\r\n\r\n        if (this.high < other.high)\r\n            return -1;\r\n        if (this.high > other.high)\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if this interval overlaps the other.\r\n     */\r\n    overlaps(other) {\r\n        try {\r\n            return (this.low <= other.high && other.low <= this.high);\r\n        } catch (e) {\r\n            //alert(e);\r\n            igv.presentAlert(e);\r\n        }\r\n    }\r\n}\r\n\r\nclass Node{\r\n    constructor(interval) {\r\n        this.parent = NIL;\r\n        this.left = NIL;\r\n        this.right = NIL;\r\n        this.interval = interval;\r\n        this.color = RED;\r\n    }\r\n}\r\n\r\nclass GenomicInterval{\r\n\r\n\tconstructor(chr, start, end, features) {\r\n        this.chr = chr;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.features = features;\r\n    }\r\n\r\n    contains (chr, start, end) {\r\n        return this.chr == chr &&\r\n            this.start <= start &&\r\n            this.end >= end;\r\n    }\r\n\r\n    containsRange(range) {\r\n        return this.chr === range.chr &&\r\n            this.start <= range.start &&\r\n            this.end >= range.end;\r\n    }\r\n    rangesToGet(range){\r\n        let needs_range=false;\r\n        let ranges={};\r\n        if (this.chr !== range.chr){\r\n            ranges.all=[range.start,range.end];\r\n            needs_range=true;\r\n            this.start=range.start;\r\n            this.end=range.end;\r\n\r\n        }\r\n        else{   \r\n            if (range.start<this.start){\r\n                ranges.left=[range.start,this.start];\r\n                needs_range=true;\r\n                this.start=range.start;\r\n              \r\n            }\r\n            if (range.end>this.end){\r\n                ranges.right=[this.end,range.end];\r\n                needs_range=true;\r\n                this.end=range.end;\r\n            }\r\n        }\r\n        if (!needs_range){\r\n            return false;\r\n        }\r\n        return ranges;\r\n    }\r\n}\r\n\r\n\r\n\r\nclass FastaSequence{\r\n\r\n    constructor(url) {\r\n\r\n        this.file = url;\r\n        this.indexed = true;\r\n        if (this.indexed) {\r\n            this.indexFile = this.file + \".fai\";\r\n        }\r\n    \r\n\r\n    }\r\n\r\n   init(){\r\n\r\n        var self = this;\r\n\r\n        if (self.indexed) {\r\n\r\n            return new Promise(function (fulfill, reject) {\r\n\r\n                self.getIndex().then(function (index) {\r\n                    var order = 0;\r\n                    self.chromosomes = {};\r\n                    self.chromosomeNames.forEach(function (chrName) {\r\n                        var bpLength = self.index[chrName].size;\r\n                        self.chromosomes[chrName] = new igv.Chromosome(chrName, order++, bpLength);\r\n                    });\r\n\r\n\r\n                    // Ignore index, getting chr names as a side effect.  Really bad practice\r\n                    fulfill();\r\n                }).catch(reject);\r\n            });\r\n        }\r\n        else {\r\n            return self.loadAll();\r\n        }\r\n\r\n    }\r\n\r\n    getSequence(chr, start, end) {\r\n\r\n        if (this.indexed) {\r\n            return this.getSequenceIndexed(chr, start, end);\r\n        }\r\n        else {\r\n            return getSequenceNonIndexed.this(chr, start, end);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    getSequenceIndexed(chr, start, end) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var interval = self.interval;\r\n\r\n            if (interval && interval.contains(chr, start, end)) {\r\n\r\n                fulfill(getSequenceFromInterval(interval, start, end));\r\n            }\r\n            else {\r\n\r\n                //console.log(\"Cache miss: \" + (interval === undefined ? \"nil\" : interval.chr + \":\" + interval.start + \"-\" + interval.end));\r\n\r\n                // Expand query, to minimum of 100kb\r\n                var qstart = start;\r\n                var qend = end;\r\n                if ((end - start) < 100000) {\r\n                    var w = (end - start);\r\n                    var center = Math.round(start + w / 2);\r\n                    qstart = Math.max(0, center - 50000);\r\n                    qend = center + 50000;\r\n                }\r\n\r\n\r\n                self.readSequence(chr, qstart, qend).then(function (seqBytes) {\r\n                    self.interval = new GenomicInterval(chr, qstart, qend, seqBytes);\r\n                    fulfill(getSequenceFromInterval(self.interval, start, end));\r\n                }).catch(reject);\r\n            }\r\n\r\n            function getSequenceFromInterval(interval, start, end) {\r\n                var offset = start - interval.start;\r\n                var n = end - start;\r\n                var seq = interval.features ? interval.features.substr(offset, n) : null;\r\n                return seq;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    getSequenceNonIndexed(chr, start, end) {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var seq = self.sequences[chr];\r\n            if (seq && seq.length > end) {\r\n                fulfill(seq.substring(start, end));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    getIndex() {\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            if (self.index) {\r\n                fulfill(self.index);\r\n            } else {\r\n                _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].load(self.indexFile,{}).then(function (data) {\r\n                    var lines = data.split(\"\\n\");\r\n                    var len = lines.length;\r\n                    var lineNo = 0;\r\n\r\n                    self.chromosomeNames = [];     // TODO -- eliminate this side effect !!!!\r\n                    self.index = {};               // TODO -- ditto\r\n                    while (lineNo < len) {\r\n\r\n                        var tokens = lines[lineNo++].split(\"\\t\");\r\n                        var nTokens = tokens.length;\r\n                        if (nTokens == 5) {\r\n                            // Parse the index line.\r\n                            var chr = tokens[0];\r\n                            var size = parseInt(tokens[1]);\r\n                            var position = parseInt(tokens[2]);\r\n                            var basesPerLine = parseInt(tokens[3]);\r\n                            var bytesPerLine = parseInt(tokens[4]);\r\n\r\n                            var indexEntry = {\r\n                                size: size, position: position, basesPerLine: basesPerLine, bytesPerLine: bytesPerLine\r\n                            };\r\n\r\n                            self.chromosomeNames.push(chr);\r\n                            self.index[chr] = indexEntry;\r\n                        }\r\n                    }\r\n\r\n                    if (fulfill) {\r\n                        fulfill(self.index);\r\n                    }\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    loadAll(){\r\n\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            self.chromosomeNames = [];\r\n            self.chromosomes = {};\r\n            self.sequences = {};\r\n\r\n            _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].load(self.file, {\r\n                withCredentials: self.withCredentials\r\n\r\n            }).then(function (data) {\r\n\r\n                var lines = data.splitLines(),\r\n                    len = lines.length,\r\n                    lineNo = 0,\r\n                    nextLine,\r\n                    currentSeq = \"\",\r\n                    currentChr,\r\n                    order = 0;\r\n\r\n\r\n                while (lineNo < len) {\r\n                    nextLine = lines[lineNo++].trim();\r\n                    if (nextLine.startsWith(\"#\") || nextLine.length === 0) {\r\n                        continue;\r\n                    }\r\n                    else if (nextLine.startsWith(\">\")) {\r\n                        if (currentSeq) {\r\n                            self.chromosomeNames.push(currentChr);\r\n                            self.sequences[currentChr] = currentSeq;\r\n                            self.chromosomes[currentChr] = new igv.Chromosome(currentChr, order++, currentSeq.length);\r\n                        }\r\n                        currentChr = nextLine.substr(1).split(\"\\\\s+\")[0];\r\n                        currentSeq = \"\";\r\n                    }\r\n                    else {\r\n                        currentSeq += nextLine;\r\n                    }\r\n                }\r\n\r\n                fulfill();\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    readSequence(chr, qstart, qend) {\r\n\r\n        //console.log(\"Read sequence \" + chr + \":\" + qstart + \"-\" + qend);\r\n        var self = this;\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            self.getIndex().then(function () {\r\n\r\n                var idxEntry = self.index[chr];\r\n                if (!idxEntry) {\r\n                    console.log(\"No index entry for chr: \" + chr);\r\n\r\n                    // Tag interval with null so we don't try again\r\n                    self.interval = new GenomicInterval(chr, qstart, qend, null);\r\n                    fulfill(null);\r\n\r\n                } else {\r\n\r\n                    var start = Math.max(0, qstart);    // qstart should never be < 0\r\n                    var end = Math.min(idxEntry.size, qend);\r\n                    var bytesPerLine = idxEntry.bytesPerLine;\r\n                    var basesPerLine = idxEntry.basesPerLine;\r\n                    var position = idxEntry.position;\r\n                    var nEndBytes = bytesPerLine - basesPerLine;\r\n\r\n                    var startLine = Math.floor(start / basesPerLine);\r\n                    var endLine = Math.floor(end / basesPerLine);\r\n\r\n                    var base0 = startLine * basesPerLine;   // Base at beginning of start line\r\n\r\n                    var offset = start - base0;\r\n\r\n                    var startByte = position + startLine * bytesPerLine + offset;\r\n\r\n                    var base1 = endLine * basesPerLine;\r\n                    var offset1 = end - base1;\r\n                    var endByte = position + endLine * bytesPerLine + offset1 - 1;\r\n                    var byteCount = endByte - startByte + 1;\r\n                    if (byteCount <= 0) {\r\n                        fulfill(null);\r\n                    }\r\n\r\n                    _igvxhr_js__WEBPACK_IMPORTED_MODULE_1__[\"igvxhr\"].load(self.file, {\r\n                        range: {start: startByte, size: byteCount}\r\n                    }).then(function (allBytes) {\r\n\r\n                        var nBases,\r\n                            seqBytes = \"\",\r\n                            srcPos = 0,\r\n                            desPos = 0,\r\n                            allBytesLength = allBytes.length;\r\n\r\n                        if (offset > 0) {\r\n                            nBases = Math.min(end - start, basesPerLine - offset);\r\n                            seqBytes += allBytes.substr(srcPos, nBases);\r\n                            srcPos += (nBases + nEndBytes);\r\n                            desPos += nBases;\r\n                        }\r\n\r\n                        while (srcPos < allBytesLength) {\r\n                            nBases = Math.min(basesPerLine, allBytesLength - srcPos);\r\n                            seqBytes += allBytes.substr(srcPos, nBases);\r\n                            srcPos += (nBases + nEndBytes);\r\n                            desPos += nBases;\r\n                        }\r\n\r\n                        fulfill(seqBytes);\r\n                    }).catch(reject)\r\n                }\r\n            }).catch(reject)\r\n        });\r\n    }\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/feature.js\n");

/***/ }),

/***/ "./src/igvxhr.js":
/*!***********************!*\
  !*** ./src/igvxhr.js ***!
  \***********************/
/*! exports provided: igvxhr, unbgzf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Zlib, XMLHttpRequest) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"igvxhr\", function() { return igvxhr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unbgzf\", function() { return unbgzf; });\n/* harmony import */ var _vendor_inflate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vendor/inflate.js */ \"./src/vendor/inflate.js\");\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\n\r\n\r\nlet is_node=false;\r\ntry{\r\n    navigator;\r\n}catch(e){\r\n    is_node=true;\r\n}\r\n\r\nif (!Zlib.Zlib){\r\n\tZlib.Zlib=Zlib;\r\n}\r\n\r\nconst NONE = 0;\r\nconst GZIP = 1;\r\nconst BGZF = 2;\r\nclass igvxhr {\r\n   \r\n    // Compression types\r\n   \r\n\r\n    static load(url, options) {\r\n\r\n       \r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            var xhr = new XMLHttpRequest(),\r\n                sendData = options.sendData,\r\n                method = options.method || (sendData ? \"POST\" : \"GET\"),\r\n                range = options.range,\r\n                responseType = options.responseType,\r\n                contentType = options.contentType,\r\n                mimeType = options.mimeType,\r\n                headers = options.headers,\r\n                isSafari = is_node?false:navigator.vendor.indexOf(\"Apple\") == 0 && /\\sSafari\\//.test(navigator.userAgent),\r\n                withCredentials = options.withCredentials,\r\n                header_keys, key, value, i;\r\n\r\n            // Support for GCS paths.\r\n           //url = url.startsWith(\"gs://\") ? igv.Google.translateGoogleCloudURL(url) : url;\r\n        \r\n\r\n           /* if (igv.Google.isGoogleURL(url)) {\r\n\r\n                url = igv.Google.addApiKey(url);\r\n\r\n                // Add google headers (e.g. oAuth)\r\n                headers = headers || {};\r\n                igv.Google.addGoogleHeaders(headers);\r\n\r\n                // Hack to prevent caching for google storage files.  Get weird net:err-cache errors otherwise\r\n                if (range) {\r\n                    url += url.includes(\"?\") ? \"&\" : \"?\";\r\n                    url += \"someRandomSeed=\" + Math.random().toString(36);\r\n                }\r\n            }\r\n            */\r\n    \r\n\r\n            xhr.open(method, url);\r\n\r\n            if (range) {\r\n                var rangeEnd = range.size ? range.start + range.size - 1 : \"\";\r\n                xhr.setRequestHeader(\"Range\", \"bytes=\" + range.start + \"-\" + rangeEnd);\r\n            }\r\n            if (contentType) {\r\n                xhr.setRequestHeader(\"Content-Type\", contentType);\r\n            }\r\n            if (mimeType) {\r\n                xhr.overrideMimeType(mimeType);\r\n            }\r\n            if (responseType) {\r\n                xhr.responseType = responseType;\r\n            }\r\n            if (headers) {\r\n                header_keys = Object.keys(headers);\r\n                for (i = 0; i < header_keys.length; i++) {\r\n                    key = header_keys[i];\r\n                    value = headers[key];\r\n                    // console.log(\"Adding to header: \" + key + \"=\" + value);\r\n                    xhr.setRequestHeader(key, value);\r\n                }\r\n            }\r\n\r\n            // NOTE: using withCredentials with servers that return \"*\" for access-allowed-origin will fail\r\n            if (withCredentials === true) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            xhr.timeout=30000;\r\n\r\n            xhr.onload = function (event) {\r\n                // when the url points to a local file, the status is 0 but that is no error\r\n                if (xhr.status == 0 || (xhr.status >= 200 && xhr.status <= 300)) {\r\n\r\n                    if (range && xhr.status != 206) {\r\n                        handleError(\"ERROR: range-byte header was ignored for url: \" + url);\r\n                    }\r\n                    else {\r\n                      \r\n                        fulfill(xhr.response,xhr);\r\n                     \r\n                    }\r\n                }\r\n                else {\r\n\r\n                    //\r\n                    if (xhr.status === 416) {\r\n                        //  Tried to read off the end of the file.   This shouldn't happen, but if it does return an\r\n                        handleError(\"Unsatisfiable range\");\r\n                    }\r\n                    else {// TODO -- better error handling\r\n                        handleError(\"Error accessing resource: \" + xhr.status);\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            xhr.onerror = function (event) {\r\n               \r\n                if (false) {}\r\n                else {\r\n                    handleError(\"Error accessing resource: \" + url + \" Status: \" + xhr.status);\r\n                }\r\n            }\r\n\r\n\r\n            xhr.ontimeout = function (event) {\r\n                handleError(\"Timed out\");\r\n            };\r\n\r\n            xhr.onabort = function (event) {\r\n                console.log(\"Aborted\");\r\n                reject(new igv.AbortLoad());\r\n            };\r\n\r\n            try {\r\n               \r\n                xhr.send(sendData);\r\n                \r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n\r\n\r\n            function handleError(message) {\r\n                if (reject) {\r\n                    reject(message);\r\n                }\r\n                else {\r\n                    throw Error(message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static loadArrayBuffer (url, options) {\r\n\r\n        if (options === undefined) options = {};\r\n        options.responseType = \"arraybuffer\";\r\n        return igvxhr.load(url, options);\r\n    };\r\n\r\n    static loadJson (url, options) {\r\n\r\n        var method = options.method || (options.sendData ? \"POST\" : \"GET\");\r\n\r\n        if (method == \"POST\") options.contentType = \"application/json\";\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            igvxhr.load(url, options).then(\r\n                function (result) {\r\n                    if (result) {\r\n                        fulfill(JSON.parse(result));\r\n                    }\r\n                    else {\r\n                        fulfill(result);\r\n                    }\r\n                }).catch(reject);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Load a \"raw\" string.\r\n     */\r\n    static loadString(url, options) {\r\n\r\n        var compression, fn, idx;\r\n\r\n        if (options === undefined) options = {};\r\n\r\n        // Strip parameters from url\r\n        // TODO -- handle local files with ?\r\n        idx = url.indexOf(\"?\");\r\n        fn = idx > 0 ? url.substring(0, idx) : url;\r\n\r\n        if (options.bgz) {\r\n            compression = BGZF;\r\n        }\r\n        else if (fn.endsWith(\".gz\")) {\r\n            compression = GZIP;\r\n        }\r\n        else {\r\n            compression = NONE;\r\n        }\r\n\r\n        if (compression === NONE) {\r\n            options.mimeType = 'text/plain; charset=x-user-defined';\r\n            return igvxhr.load(url, options);\r\n        }\r\n        else {\r\n            options.responseType = \"arraybuffer\";\r\n\r\n            return new Promise(function (fulfill, reject) {\r\n\r\n                igvxhr.load(url, options).then(\r\n                    function (data) {\r\n                        var result = igvxhr.arrayBufferToString(data, compression);\r\n                        fulfill(result);\r\n                    }).catch(reject)\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    static loadStringFromFile(localfile, options) {\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n\r\n            var fileReader = new FileReader(),\r\n                range = options.range;\r\n\r\n\r\n            fileReader.onload = function (e) {\r\n\r\n                var compression, result;\r\n\r\n                if (options.bgz) {\r\n                    compression = BGZF;\r\n                }\r\n                else if (localfile.name.endsWith(\".gz\")) {\r\n\r\n                    compression = GZIP;\r\n                }\r\n                else {\r\n                    compression = NONE;\r\n                }\r\n\r\n                result = igvxhr.arrayBufferToString(fileReader.result, compression);\r\n\r\n                fulfill(result, localfile);\r\n\r\n            };\r\n\r\n            fileReader.onerror = function (e) {\r\n                console.log(\"reject uploading local file \" + localfile.name);\r\n                reject(null, fileReader);\r\n            };\r\n\r\n            fileReader.readAsArrayBuffer(localfile);\r\n\r\n        });\r\n    }\r\n\r\n    static isCrossDomain(url) {\r\n\r\n        var origin = window.location.origin;\r\n\r\n        return !url.startsWith(origin);\r\n\r\n    }\r\n\r\n    static arrayBufferToString (arraybuffer, compression) {\r\n\r\n        var plain, inflate;\r\n\r\n        if (compression === GZIP) {\r\n            inflate = new Zlib.Zlib.Gunzip(new Uint8Array(arraybuffer));\r\n            plain = inflate.decompress();\r\n        }\r\n        else if (compression === BGZF) {\r\n            plain = new Uint8Array(unbgzf(arraybuffer));\r\n        }\r\n        else {\r\n            plain = new Uint8Array(arraybuffer);\r\n        }\r\n\r\n        var result = \"\";\r\n        for (var i = 0, len = plain.length; i < len; i++) {\r\n            result = result + String.fromCharCode(plain[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n//**********js/bam/bgzf.js***************************************\r\n\r\n\r\nconst BLOCK_HEADER_LENGTH = 18;\r\nconst BLOCK_LENGTH_OFFSET = 16;  // Location in the gzip block of the total block size (actually total block size - 1)\r\nconst BLOCK_FOOTER_LENGTH = 8; // Number of bytes that follow the deflated data\r\nconst MAX_COMPRESSED_BLOCK_SIZE = 64 * 1024; // We require that a compressed block (including header and footer, be <= this)\r\nconst GZIP_OVERHEAD = BLOCK_HEADER_LENGTH + BLOCK_FOOTER_LENGTH + 2; // Gzip overhead is the header, the footer, and the block size (encoded as a short).\r\nconst GZIP_ID1 = 31;   // Magic number\r\nconst GZIP_ID2 = 139;  // Magic number\r\nconst GZIP_FLG = 4; // FEXTRA flag means there are optional fields\r\n\r\n\r\n    // Uncompress data,  assumed to be series of bgzipped blocks\r\n    // Code is based heavily on bam.js, part of the Dalliance Genome Explorer,  (c) Thomas Down 2006-2001.\r\nlet unbgzf = function (data, lim) {\r\n\r\n        var oBlockList = [],\r\n            ptr = [0],\r\n            totalSize = 0;\r\n\r\n        lim = lim || data.byteLength - 18;\r\n\r\n        while (ptr[0] < lim) {\r\n\r\n            var ba = new Uint8Array(data, ptr[0], 18);\r\n\r\n            var xlen = (ba[11] << 8) | (ba[10]);\r\n            var si1 = ba[12];\r\n            var si2 = ba[13];\r\n            var slen = (ba[15] << 8) | (ba[14]);\r\n            var bsize = (ba[17] << 8) | (ba[16]) + 1;\r\n\r\n            var start = 12 + xlen + ptr[0];    // Start of CDATA\r\n            var length = data.byteLength - start;\r\n\r\n            if (length < (bsize + 8)) break;\r\n\r\n            var unc = Object(_vendor_inflate_js__WEBPACK_IMPORTED_MODULE_0__[\"jszlib_inflate_buffer\"])(data, start, length, ptr);\r\n\r\n            ptr[0] += 8;    // Skipping CRC-32 and size of uncompressed data\r\n\r\n            totalSize += unc.byteLength;\r\n            oBlockList.push(unc);\r\n        }\r\n\r\n        // Concatenate decompressed blocks\r\n        if (oBlockList.length == 1) {\r\n            return oBlockList[0];\r\n        } else {\r\n            var out = new Uint8Array(totalSize);\r\n            var cursor = 0;\r\n            for (var i = 0; i < oBlockList.length; ++i) {\r\n                var b = new Uint8Array(oBlockList[i]);\r\n                Object(_vendor_inflate_js__WEBPACK_IMPORTED_MODULE_0__[\"arrayCopy\"])(b, 0, out, cursor, b.length);\r\n                cursor += b.length;\r\n            }\r\n            return out.buffer;\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./src/vendor/zlib_and_gzip.min.js */ \"./src/vendor/zlib_and_gzip.min.js\"), __webpack_require__(/*! xhr2 */ \"xhr2\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/igvxhr.js\n");

/***/ }),

/***/ "./src/indexes/image_gen_index.js":
/*!****************************************!*\
  !*** ./src/indexes/image_gen_index.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_image_gen_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node/image_gen.js */ \"./src/node/image_gen.js\");\n\r\n\r\nvar file= process.argv[2];\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nvar contents = fs.readFileSync(file);\r\nvar json = JSON.parse(contents);\r\n\r\nif (!json.config.folder){\r\n\tjson.config.folder=\"images\";\r\n}\r\n\r\nif (!fs.existsSync(json.config.folder)){\r\n    fs.mkdirSync(json.config.folder);\r\n}\r\n\r\nlet ig = new _node_image_gen_js__WEBPACK_IMPORTED_MODULE_0__[\"MLVImageGen\"](json.tracks,json.config);\r\nig.drawImages();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXhlcy9pbWFnZV9nZW5faW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXhlcy9pbWFnZV9nZW5faW5kZXguanM/ODA5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01MVkltYWdlR2VufSBmcm9tIFwiLi4vbm9kZS9pbWFnZV9nZW4uanNcIjtcclxuXHJcbnZhciBmaWxlPSBwcm9jZXNzLmFyZ3ZbMl07XHJcbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxudmFyIGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKGZpbGUpO1xyXG52YXIganNvbiA9IEpTT04ucGFyc2UoY29udGVudHMpO1xyXG5cclxuaWYgKCFqc29uLmNvbmZpZy5mb2xkZXIpe1xyXG5cdGpzb24uY29uZmlnLmZvbGRlcj1cImltYWdlc1wiO1xyXG59XHJcblxyXG5pZiAoIWZzLmV4aXN0c1N5bmMoanNvbi5jb25maWcuZm9sZGVyKSl7XHJcbiAgICBmcy5ta2RpclN5bmMoanNvbi5jb25maWcuZm9sZGVyKTtcclxufVxyXG5cclxubGV0IGlnID0gbmV3IE1MVkltYWdlR2VuKGpzb24udHJhY2tzLGpzb24uY29uZmlnKTtcclxuaWcuZHJhd0ltYWdlcygpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/indexes/image_gen_index.js\n");

/***/ }),

/***/ "./src/node/image_gen.js":
/*!*******************************!*\
  !*** ./src/node/image_gen.js ***!
  \*******************************/
/*! exports provided: MLVImageGen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MLVImageGen\", function() { return MLVImageGen; });\n/* harmony import */ var _tracks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tracks.js */ \"./src/tracks.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n\r\nconst Canvas = __webpack_require__(/*! canvas */ \"canvas\");\r\nconst path = __webpack_require__(/*! path */ \"path\")\r\n\r\nclass MLVImageGen {\r\n   constructor (tracks,config) {\r\n           this.show_scale=true;\r\n\t\tif (!config){\r\n\t\t\tthis.config =config={};\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.config=config;\r\n\t\t}\r\n\t\tthis.config.height=this.config.height?this.config.height:200;\r\n\t\tthis.config.width=this.config.width?this.config.width:300;\r\n\t\tif (!this.config.type){\r\n\t\t\tthis.config.type=\"png\";\r\n\t\t}\r\n\t\tthis.c_type=\"png\";\r\n\t\tthis.stream=\"createPNGStream\";\r\n\t\tif (config.type===\"svg\"){ \r\n\t\t\tthis.c_type=\"svg\";\r\n\r\n\t\t}\r\n           if (config.type===\"pdf\"){\r\n\t\t\tthis.stream=\"createPDFStream\";\r\n\t\t\tthis.c_type=\"pdf\";\r\n\t\t}\r\n\t\tthis.fixed_height_mode=false;\r\n\t\tif (config.fixed_height_mode){\r\n\t\t\tthis.fixed_height_mode=true;\r\n\t\t}\r\n        \t\r\n            \r\n           \r\n\t\t\r\n\r\n           \r\n\t\tthis.tracks={};\r\n\t\tthis.track_order=[];\r\n\t\tfor (let t_config of tracks){\r\n\t\t\tlet track=_tracks_js__WEBPACK_IMPORTED_MODULE_0__[\"MLVTrack\"].getTrack(t_config);\r\n\t\t\tthis.tracks[track.config.track_id]=track;\r\n\t\t\tthis.track_order.push(track.config.track_id);\r\n\t\t}\r\n\t\tfor (let t_id of this.track_order){\r\n    \t\t\tlet track = this.tracks[t_id];\r\n    \t\t\t//if this track is linked to the scale of another\r\n    \t\t\t//get pointer to the track\r\n    \t\t\tlet link_to = track.config['scale_link_to'];\r\n    \t\t\tif (link_to){\r\n\t\t\t\tlet other_track = this.tracks[link_to];\r\n\t\t\t\tif (other_track){\r\n\t\t\t\t\ttrack.scale_link_to=other_track;\r\n\t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n  \r\n       \tthis.index=0;\r\n    }\r\n\r\n\tgetTracksHeight(){\r\n    \t\tlet h =3;\r\n    \t\tfor (let t in this.tracks){\r\n\t\t\th+=this.tracks[t].config.height+3;\r\n    \t\t}\r\n    \t\treturn h;\r\n\t}\t\r\n\r\n\r\n\r\n    drawImages(){\r\n\t\tlet loc = this.config.images;\r\n\t\tif (this.index<loc.length){\r\n\t\t\tlet info=loc[this.index];\r\n\t\t\tlet h_region=null;\r\n\t\t\tif (info.highlight){\r\n\t\t\t\th_region={\r\n\t\t\t\t\tchr:info.loc[0],\r\n\t\t\t\t\tstart:info.highlight[1],\r\n\t\t\t\t\tend:info.highlight[2],\r\n\t\t\t\t\tcolor:info.highloght[3]?info.highlight[3]:\"blue\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet stub = info.stub;\r\n\t\t\tif (!stub){\r\n\t\t\t\tstub=info.loc[0]+\"_\"+info.loc[1]+\"_\"+info.loc[2];\r\n\t\t\t}\r\n\t\t\tlet file = path.resolve(this.config.folder,stub+\".\"+this.config.type);\t\r\n\t\t\tthis.drawImage(info.loc[0],info.loc[1],info.loc[2],file,h_region);\r\n\t\t\t\t\r\n\t\t}\r\n    \t}\r\n\r\n   \r\n    \r\n\tdrawImage(chr,start,end,file,region){\r\n\t\tconsole.log(file);\r\n        \tlet bpPerPixel=(end-start)/this.config.width;\r\n\t   \tlet self = this;\r\n\t\tlet height = this.fixed_height_mode?this.getTracksHeight():this.config.height;\r\n\t\tthis.canvas=Canvas.createCanvas(this.config.width,height,this.c_type);\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n        \tthis.getAllFeatures(chr, start, end,{pixelWidth:this.config.width,bpPerPixel:bpPerPixel})\r\n                .then(function (all_features) {\r\n                    if (all_features) {             \r\n                        var options ={\r\n                             context: self.ctx,\r\n                             bpStart: start,\r\n                             bpPerPixel: bpPerPixel,\r\n                             pixelWidth:self.config.width,\r\n                             pixelHeight: height,\r\n                        };\r\n                        let top=3;\r\n                        self.groups={};\r\n\t\t\t\t\r\n\t\t\t\t  self.ctx.clearRect(0, 0, self.config.width, self.config.height)\r\n                        for (let i in all_features){\r\n                        \tlet track = self.tracks[self.track_order[i]];\r\n                        \toptions.features=all_features[i];\r\n                        \tlet group = track.config.group\r\n                        \tif (group){\r\n                        \t\tif (!self.groups[group]){\r\n                        \t\t\tself.groups[group]={top:top,height:track.config.height,label_offset:15}\r\n\t\t\t\t\t\t\ttop+=track.config.height;\r\n                        \t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tself.groups[group].label_offset+=15;\r\n\t\t\t\t\t\t}\r\n                        \t\toptions.top=self.groups[group].top;\r\n                        \t\toptions.height=self.groups[group].height;\r\n\r\n                        \t}\r\n                        \telse{\r\n                        \t\toptions.top =top\r\n                        \t}\r\n\t\t\t\t\tlet disc = self.fixed_height_mode || track.config.discrete || group;\r\n\t\t\t\t\tif (disc){\r\n\t\t\t\t\t\tself.ctx.save();\r\n\t\t\t\t\t\tself.ctx.rect(0,options.top,options.pixelWidth,track.config.height);\r\n\t\t\t\t\t\tself.ctx.clip();\r\n\t\t\t\t\t\tself.ctx.beginPath();\r\n\r\n\t\t\t\t\t}\r\n                           let offset=track.drawFeatures(options);\r\n\t\t\t\t\tif (track.config.type !== \"ruler\"){\r\n\t\t\t\t\t\tself.ctx.fillStyle = \"black\";\r\n\t\t\t\t\t\tself.ctx.font=\"10px Arial\";\r\n\t\t\t\t\t\tlet t_w= self.ctx.measureText(track.config.short_label).width+5;\r\n\t\t\t\t\t\tlet l_offset=15;\r\n\t\t\t\t\t\tif (group){\r\n\t\t\t\t\t\t\tl_offset=self.groups[group].label_offset;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tself.ctx.fillText(track.config.short_label,self.config.width-t_w,options.top+l_offset,);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (disc){\r\n\t\t\t\t\t\tself.ctx.restore();\r\n\t\t\t\t\t\tif (!group){\r\n\t\t\t\t\t\t\ttop+=track.config.height+3;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                         \telse if (offset){\r\n                         \t  \ttop=offset+3;\r\n                           }\r\n                           if (self.show_scale){\r\n\t\t\t\t\t\tself.ctx.font=\"10px Arial\";\r\n                            \ttrack.drawScale(options.pixelHeight,self.ctx)\r\n                           }\r\n                                      \r\n                        }\r\n                        if (region){\r\n\t\t\t\t\tlet start= (region.start-options.bpStart)/options.bpPerPixel;\r\n    \t\t\t\t\tstart = start<0?0:start;\r\n\t\t\t\t\tlet width = (region.end-region.start)/options.bpPerPixel;\r\n    \t\t\t\t\twidth =width>options.pixelWidth?options.pixelWidth:width;\r\n\t\t\t\t\tself.ctx.globalAlpha=0.1;\r\n\t\t\t\t\tself.ctx.fillStyle=region.color;\r\n    \t\t\t\t\tself.ctx.fillRect(start,0,width,options.pixelHeight);\r\n    \t\t\t\t\tself.ctx.globalAlpha=1.0;\r\n                        }\r\n                        \r\n                    \r\n                    }\r\n\t\t                \r\n\t\t\t\t\r\n\t\t\t\tif (self.config.type===\"svg\"){\r\n\t\t\t\t\tfs.writeFileSync(file, self.canvas.toBuffer())\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconst out = fs.createWriteStream(file);\r\n\t\t\t\t\tconst stream = self.canvas[self.stream]();\r\n\t\t\t\t\tstream.pipe(out);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t\tself.index++;\r\n\t\t\t\tself.drawImages();\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error.toString());\r\n\t\t\t    self.index++;\r\n                    self.drawImages();\r\n                });\r\n     \t}\r\n\r\n\tgetAllFeatures(chr,bpStart,bpEnd,data) {\r\n      \tlet promises = [];\r\n        \tfor (let track_id  of this.track_order){\r\n        \t\tlet track = this.tracks[track_id];\r\n        \t\tpromises.push(track.getFeatures(chr,bpStart,bpEnd,false,data));       \r\n        \t}\r\n\r\n        \treturn Promise.all(promises);\r\n\r\n           \r\n    \t}\r\n\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/node/image_gen.js\n");

/***/ }),

/***/ "./src/tracks.js":
/*!***********************!*\
  !*** ./src/tracks.js ***!
  \***********************/
/*! exports provided: MLVTrack, MLVWigTrack, MLVBedTrack, RulerTrack, MLVBigBedTrack, Graphics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(__webpack_provided_$_dot_extend) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MLVTrack\", function() { return MLVTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MLVWigTrack\", function() { return MLVWigTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MLVBedTrack\", function() { return MLVBedTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RulerTrack\", function() { return RulerTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MLVBigBedTrack\", function() { return MLVBigBedTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Graphics\", function() { return Graphics; });\n/* harmony import */ var _bigwig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bigwig.js */ \"./src/bigwig.js\");\n/* harmony import */ var _feature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feature.js */ \"./src/feature.js\");\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MLVTrack{\r\n\tconstructor(config){\r\n\t\tthis.config=config;\r\n\t}\r\n\r\n\t_setFeatureSource(){\r\n\t\t//overriden by tracks with feature sources\r\n\t}\r\n\r\n\tdrawScale(ctx){\r\n\t\t//overidden in tracks with scale\r\n\t}\r\n\r\n\tgetConfig(){\r\n\t\treturn __webpack_provided_$_dot_extend(true, {}, this.config);\r\n\t}\r\n\r\n\tsetConfigAttribute(attribute,value){\r\n\t\tthis.config[attribute]=value;\r\n    \tif (attribute===\"url\"){\r\n    \t\tthis._setFeatureSource();\r\n    \t}\r\n    }\r\n    getFeatureAt(genomicLocation, chr,yOffset, bpPerPixel){\r\n    \treturn null;\r\n    }\r\n\r\n    setConfig(config){\r\n    \tif (this.config.url !== config.url){\r\n    \t\tthis.config=config;\r\n    \t\tthis._setFeatureSource();\r\n    \t}\r\n    \telse{\r\n    \t\tthis._setFeatureSource();\r\n    \t}\r\n    }\r\n\t\r\n\tgetFeatures (chr, bpStart, bpEnd,force,data) {\r\n\t\treturn this.feature_source.getFeatures(chr,bpStart,bpEnd,force,data);\r\n\t}\r\n\r\n\r\n\tstatic calculateLabel(url){\r\n\t\tif (typeof url !== \"string\"){\r\n\t\t\turl = url[0];\r\n\t\t}\r\n\t\tlet arr =url.split(\"/\");\r\n\t\tlet label= arr[arr.length-1];\r\n\t\tarr= label.split(\".\");\r\n\t\tlabel = arr[0];\r\n\t\treturn label;\r\n\t}\r\n\r\n\taddExtraControls(div,panel){\r\n\t}\r\n\r\n\tstatic getTypeFromURL(url){\r\n\t\tlet config={}\r\n\t\tif (typeof url !== \"string\"){\r\n\t\t\treturn config;\r\n\t\t}\r\n\t\t\tif (url.endsWith(\"bw\")){\r\n\t\t\t\tconfig.type=\"bigwig\";\r\n\t\t\t\tconfig.format=\"wig\";\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (url.endsWith(\".bed.gz\")){\r\n\t\t\t\tconfig.type=\"bed\";\r\n\t\t\t\tconfig.format=\"feature\"\r\n\r\n\t\t\t}\r\n\t\t\telse if (url.endsWith(\".bb\") && !(config.type)){\r\n\t\t\t\tconfig.type=\"bigbed\";\r\n\t\t\t\tconfig.format=\"feature\"\r\n\r\n\t\t\t}\r\n\t\t\telse if (url.endsWith(\".fasta\")){\r\n\t\t\t\tconfig.type=\"fasta\";\r\n\t\t\t\tconfig.format=\"sequence\";\r\n\t\t\t}\r\n\t\t\telse if (url.endsWith(\".bam\")){\r\n\t\t\t\tconfig.type=\"bam\";\r\n\t\t\t\tconfig.format=\"alignment\";\r\n\t\t\t}\r\n\t\treturn config;\r\n\r\n\t}\r\n\r\n\tstatic parseConfig(con){\r\n\t\tlet config = __webpack_provided_$_dot_extend(true, {},con);\r\n\t\t\r\n\t\tif ((!config.type || !config.format) && config.url){\r\n\t\t\tlet info = MLVTrack.getTypeFromURL(config.url);\r\n\t\t\tif (info.type){\r\n\t\t\t\tconfig.type=info.type;\r\n\t\t\t\tconfig.format=info.format;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!config.short_label && config.url){\r\n\t\t\tconfig.short_label=MLVTrack.calculateLabel(config.url);\r\n\t\t}\r\n\t\t\r\n\t\tif (!config.track_id){\r\n\t\t\tconfig.track_id=config.url;\r\n\t\t}\r\n\r\n\t\tif (config.format===\"feature\"){\r\n\t\t\tconfig.displayMode = config.displayMode || \"COLLAPSED\";    // COLLAPSED | EXPANDED | SQUISHED\r\n        \tconfig.labelDisplayMode = \"SLANT\";\r\n        \tconfig.squishedCallHeight = config.squishedCallHeight || 30;\r\n        \tconfig.expandedCallHeight = config.expandedCallHeight || 15;\r\n        \tconfig.featureHeight=config.featureHeight || 12;\r\n\t\t}\r\n\r\n\t\tif (config.format===\"wig\"){\r\n\t\t\tif (!config.scale){\r\n\t\t\t\tconfig.scale=\"automatic\";\r\n\t\t\t}\r\n\t\t\tif (!config.min_y){\r\n\t\t\t\tconfig.min_y=0;\r\n\t\t\t}\r\n\t\t\tif (!config.maxy_y){\r\n\t\t\t\tconfig.max_y=100;\r\n\t\t\t}\r\n\t\t\tif (!config.height){\r\n\t\t\t\tconfig.height=100;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (config.type===\"bam\"){\r\n\t\t\tif (!config.featureHeight){\r\n\t\t\t\tconfig.featureHeight=12;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!config.color){\r\n\t\t\tif (config.type===\"bam\"){\r\n\t\t\t\tconfig.color=\"#D3D3D3\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconfig.color=\"black\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!config.opacity){\r\n\t\t\tconfig.opacity=1.0;\r\n\t\t}\r\n\t\treturn config;\r\n\t}\r\n\r\n\r\n\t\r\n\tstatic getTrack(config){\r\n\r\n\t\tconfig=MLVTrack.parseConfig(config);\r\n\t\t\r\n\t\tif (config.type===\"bigwig\"){\r\n\t\t\treturn new MLVWigTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"bed\"){\r\n\t\t\treturn new MLVBedTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"ucsc\"){\r\n\t\t\treturn new UCSCTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"line\"){\r\n\t\t\treturn new LineTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"bigbed\"){\r\n\t\t\treturn new MLVBigBedTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"ruler\"){\r\n\t\t\treturn new RulerTrack(config);\r\n\t\t}\r\n\t\telse if (config.type===\"fasta\"){\r\n\t\t\treturn new SequenceTrack(config);\r\n\t\t}\r\n\t\t\r\n\t\telse{\r\n\t\t\t\r\n\t\t\tlet class_type = MLVTrack.custom_tracks[config.type];\r\n\t\t\tif (class_type){\r\n\t\t\t\treturn new class_type(config);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t\t\r\n}\r\n\r\nMLVTrack.custom_tracks={};\r\n\r\n\r\n\r\n\r\n\r\n//*******************js/rulerTrack.js**********************\r\n\r\n\r\nclass RulerTrack extends MLVTrack{\r\n\tconstructor(config){\r\n\t\tif (!config){\r\n\t\t\tconfig={\"track_id\":\"ruler\"+RulerTrack.count,format:\"ruler\",short_label:\"Ruler\",type:\"ruler\"};\r\n\t\t}\r\n\t\tsuper(config);\r\n        this.height = 30;\r\n        this.config.height=30;\r\n        this.name = \"\";\r\n       \r\n        this.disableButtons = true;\r\n        this.ignoreTrackMenu = true;\r\n        this.order = -Number.MAX_VALUE;\r\n      \r\n        RulerTrack.count++;\r\n    }\r\n\r\n    getFeatures(chr, bpStart, bpEnd) {\r\n\r\n        return new Promise(function (fulfill, reject) {\r\n            fulfill([]);\r\n        });\r\n    }\r\n\r\n    drawFeatures(options) {\r\n\r\n        var fontStyle,\r\n            ctx = options.context,\r\n            range,\r\n            ts,\r\n            spacing,\r\n            nTick,\r\n            x;\r\n\r\n        fontStyle = { textAlign: 'center', font: '10px PT Sans', fillStyle: \"rgba(64, 64, 64, 1)\", strokeStyle: \"rgba(64, 64, 64, 1)\" };\r\n\r\n        range = Math.floor(1100 * options.bpPerPixel);\r\n        ts = RulerTrack.findSpacing(range);\r\n        spacing = ts.majorTick;\r\n\r\n        // Find starting point closest to the current origin\r\n        nTick = Math.floor(options.bpStart / spacing) - 1;\r\n        x = 0;\r\n\t\tlet y_pos=options.top+this.height;\r\n        //canvas.setProperties({textAlign: 'center'});\r\n        Graphics.setProperties(ctx, fontStyle );\r\n        while (x < options.pixelWidth) {\r\n\r\n            var l = Math.floor(nTick * spacing),\r\n                shim = 2;\r\n\r\n            x = Math.round(((l - 1) - options.bpStart + 0.5) / options.bpPerPixel);\r\n            var chrPosition = formatNumber(l / ts.unitMultiplier, 0) + \" \" + ts.majorUnit;\r\n\r\n            if (nTick % 1 == 0) {\r\n                Graphics.fillText(ctx, chrPosition, x, y_pos - 15);\r\n            }\r\n\r\n            Graphics.strokeLine(ctx, x, y_pos - 10, x, y_pos - shim);\r\n\r\n            nTick++;\r\n        }\r\n        Graphics.strokeLine(ctx, 0, y_pos - shim, options.pixelWidth, y_pos - shim);\r\n\r\n\r\n        function formatNumber(anynum, decimal) {\r\n            //decimal  - the number of decimals after the digit from 0 to 3\r\n            //-- Returns the passed number as a string in the xxx,xxx.xx format.\r\n            //anynum = eval(obj.value);\r\n            var divider = 10;\r\n            switch (decimal) {\r\n                case 0:\r\n                    divider = 1;\r\n                    break;\r\n                case 1:\r\n                    divider = 10;\r\n                    break;\r\n                case 2:\r\n                    divider = 100;\r\n                    break;\r\n                default:       //for 3 decimal places\r\n                    divider = 1000;\r\n            }\r\n\r\n            var workNum = Math.abs((Math.round(anynum * divider) / divider));\r\n\r\n            var workStr = \"\" + workNum\r\n\r\n            if (workStr.indexOf(\".\") == -1) {\r\n                workStr += \".\"\r\n            }\r\n\r\n            var dStr = workStr.substr(0, workStr.indexOf(\".\"));\r\n            var dNum = dStr - 0\r\n            var pStr = workStr.substr(workStr.indexOf(\".\"))\r\n\r\n            while (pStr.length - 1 < decimal) {\r\n                pStr += \"0\"\r\n            }\r\n\r\n            if (pStr == '.') pStr = '';\r\n\r\n            //--- Adds a comma in the thousands place.\r\n            if (dNum >= 1000) {\r\n                var dLen = dStr.length\r\n                dStr = parseInt(\"\" + (dNum / 1000)) + \",\" + dStr.substring(dLen - 3, dLen)\r\n            }\r\n\r\n            //-- Adds a comma in the millions place.\r\n            if (dNum >= 1000000) {\r\n                dLen = dStr.length\r\n                dStr = parseInt(\"\" + (dNum / 1000000)) + \",\" + dStr.substring(dLen - 7, dLen)\r\n            }\r\n            var retval = dStr + pStr\r\n            //-- Put numbers in parentheses if negative.\r\n            if (anynum < 0) {\r\n                retval = \"(\" + retval + \")\";\r\n            }\r\n\r\n            //You could include a dollar sign in the return value.\r\n            //retval =  \"$\"+retval\r\n            return retval;\r\n        }\r\n        return y_pos;\r\n\r\n\r\n    }\r\n    static findSpacing(maxValue) {\r\n\r\n        if (maxValue < 10) {\r\n            return new TickSpacing(1, \"\", 1);\r\n        }\r\n\r\n\r\n        // Now man zeroes?\r\n        var nZeroes = Math.floor(log10(maxValue));\r\n        var majorUnit = \"\";\r\n        var unitMultiplier = 1;\r\n        if (nZeroes > 9) {\r\n            majorUnit = \"gb\";\r\n            unitMultiplier = 1000000000;\r\n        }\r\n        if (nZeroes > 6) {\r\n            majorUnit = \"mb\";\r\n            unitMultiplier = 1000000;\r\n        } else if (nZeroes > 3) {\r\n            majorUnit = \"kb\";\r\n            unitMultiplier = 1000;\r\n        }\r\n\r\n        var nMajorTicks = maxValue / Math.pow(10, nZeroes - 1);\r\n        if (nMajorTicks < 25) {\r\n            return new TickSpacing(Math.pow(10, nZeroes - 1), majorUnit, unitMultiplier);\r\n        } else {\r\n            return new TickSpacing(Math.pow(10, nZeroes) / 2, majorUnit, unitMultiplier);\r\n        }\r\n\r\n        function log10(x) {\r\n            var dn = Math.log(10);\r\n            return Math.log(x) / dn;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nRulerTrack.count=0;\r\n\r\nclass TickSpacing{\r\n\tconstructor(majorTick, majorUnit, unitMultiplier) {\r\n        this.majorTick = majorTick;\r\n        this.majorUnit = majorUnit;\r\n        this.unitMultiplier = unitMultiplier;\r\n    }\r\n\r\n}\r\n\r\n \r\nclass MLVBedTrack extends MLVTrack{\r\n\tconstructor(config){\r\n\t\tsuper(config);\r\n\t\tthis._setFeatureSource();\r\n\t\tthis.filter_function=null;\r\n\t\tthis.color_function=null;\r\n\t\t\r\n\t}\r\n\r\n\t_setFeatureSource(){\r\n\t\tthis.feature_source= new _feature_js__WEBPACK_IMPORTED_MODULE_1__[\"FeatureSource\"](this.config)\r\n\t}\r\n\r\n\tsetFilterFunction(func){\r\n\t\tthis.filter_function=func;\r\n\t}\r\n\tsetColorFunction(func){\r\n\t\tthis.color_function=func;\r\n\t}\r\n\r\n\tgetCurrentFeatures(chr,start,end){\r\n\t\treturn this.feature_source.featureCache.queryFeatures(chr,start,end);\r\n\t}\r\n\t\r\n\tdrawFeatures(options) {\r\n\t\tlet max_y_val=0;\r\n        var track = this,\r\n        \tpy,\r\n            featureList = options.features,\r\n            ctx = options.context,\r\n            bpPerPixel = options.bpPerPixel,\r\n            bpStart = options.bpStart,\r\n            pixelWidth = options.pixelWidth,\r\n            pixelHeight = options.pixelHeight,\r\n            offset=0,\r\n            bpEnd = bpStart + pixelWidth * bpPerPixel + 1;\r\n\t \tlet top=0;\r\n       \tif(options.top){\r\n           top=options.top;\r\n       \t}\r\n       \tthis.top=top;\r\n        let conf = this.config;\r\n        let windowX = 0;\r\n        let windowX1 = windowX + pixelWidth;\r\n\r\n        this.config.squishedCallHeight = this.config.featureHeight+10;\r\n        this.config.expandedCallHeight = (this.config.featureHeight/2)+2;\r\n        let ki=null;\r\n        if (featureList.length>50000){\r\n        \tki=Math.round(featureList.length/50000)+1;\r\n        }\r\n\r\n\r\n\r\n        if (featureList) {\r\n        \tlet opacity = this.config.opacity?this.config.opacity:1;\r\n        \tctx.globalAlpha=opacity;\r\n\r\n            for (var gene, i = 0, len = featureList.length; i < len; i++) {\r\n            \tif (ki && i%ki!==0){\r\n            \t\tcontinue;\r\n            \t}\r\n                gene = featureList[i];\r\n                if (this.filter_function && !this.filter_function(gene)){\r\n                \tgene.display=false;\r\n                \tcontinue;\r\n                }\r\n                gene.display=true;\r\n                if (gene.end < bpStart) continue;\r\n                if (gene.start > bpEnd) break;\r\n                let coord = this.calculateFeatureCoordinates(gene, bpStart,bpPerPixel);\r\n                let h = conf.featureHeight\r\n                if (conf.displayMode === \"SQUISHED\" && gene.row != undefined) {\r\n            \t\th = conf.featureHeight / 2;\r\n            \t\tpy = conf.expandedCallHeight * gene.row + 2;\r\n        \t\t} else if (conf.displayMode === \"EXPANDED\" && gene.row != undefined) {\r\n            \t\tpy = conf.squishedCallHeight * gene.row + 5;\r\n        \t\t} else {\r\n             // collapsed\r\n           \t\t\t py = 5;\r\n        \t\t}\r\n        \t\tpy+=top;\r\n        \t\tif (py+h>max_y_val){\r\n        \t\t\tmax_y_val=py+h;\r\n        \t\t}\r\n        \t\tcoord.py=py;\r\n        \t\tcoord.h=h;\r\n        \t\tlet info={bpPerPixel:bpPerPixel,bpStart:bpStart,pixelWidth:pixelWidth}\r\n        \t\tif (this.color_function){\r\n        \t\t\tgene.color=this.color_function(gene);\r\n        \t\t}\r\n        \t\t\r\n                this.renderFeature(gene,coord,ctx,info);\r\n                this.renderFeatureLabel(ctx, gene, coord.px, coord.px1, py, windowX, windowX1);\r\n            }\r\n            ctx.globalAlpha=1;\r\n        }\r\n        else {\r\n            console.log(\"No feature list\");\r\n        }\r\n        this.bottom=max_y_val;\r\n        if (this.config.displayMode===\"COLLAPSED\"){\r\n        \tmax_y_val+=25;\r\n        }\t\r\n    \treturn max_y_val;\r\n    }\r\n        \r\n           \r\n\r\n    \r\n  \r\n\t /**\r\n     * @param ctx       the canvas 2d context\r\n     * @param feature\r\n     * @param featureX  feature start x-coordinate\r\n     * @param featureX1 feature end x-coordinate\r\n     * @param featureY  feature y-coordinate\r\n     * @param windowX   visible window start x-coordinate\r\n     * @param windowX1  visible window end x-coordinate\r\n     */\r\n  \r\n\r\n\r\n\r\n\trenderFeatureLabel(ctx, feature, featureX, featureX1, featureY, windowX, windowX1) {\r\n\t\tlet info = this.config;\r\n        var geneColor, geneFontStyle, transform,\r\n            boxX, boxX1,    // label should be centered between these two x-coordinates\r\n            labelX, labelY,\r\n            textFitsInBox;\r\n\r\n        // feature outside of viewable window\r\n        if (featureX1 < windowX || featureX > windowX1) {\r\n            boxX = featureX;\r\n            boxX1 = featureX1;\r\n        } else {\r\n            // center label within visible portion of the feature\r\n            boxX = Math.max(featureX, windowX);\r\n            boxX1 = Math.min(featureX1, windowX1);\r\n        }\r\n       \r\n\r\n        //if (igv.browser.selection && \"genes\" === this.config.type && feature.name !== undefined) {\r\n            // TODO -- for gtex, figure out a better way to do this\r\n            //geneColor = igv.browser.selection.colorForGene(feature.name);\r\n      //  }\r\n\r\n        textFitsInBox = (boxX1 - boxX) > ctx.measureText(feature.name).width;\r\n        //geneColor=\"black\";\r\n\r\n        if ((textFitsInBox || geneColor) && info.displayMode != \"SQUISHED\" && feature.name !== undefined) {\r\n            geneFontStyle = {\r\n                font: '10px PT Sans',\r\n                textAlign: 'center',\r\n                fillStyle: geneColor || info.color,\r\n                strokeStyle: geneColor || info.color\r\n            };\r\n\r\n            if (info.displayMode === \"COLLAPSED\" && info.labelDisplayMode === \"SLANT\") {\r\n                transform = {rotate: {angle: 45}};\r\n                delete geneFontStyle.textAlign;\r\n            }\r\n\r\n            labelX = boxX + ((boxX1 - boxX) / 2);\r\n            labelY = getFeatureLabelY(featureY, transform);\r\n\r\n            Graphics.fillText(ctx, feature.name, labelX, labelY, geneFontStyle, transform);\r\n        }\r\n        function getFeatureLabelY(featureY, transform) {\r\n        \treturn transform ? featureY + info.featureHeight+14 : featureY + info.featureHeight+7;\r\n    \t}\r\n    }\r\n\r\n\r\n\r\n\tcalculateFeatureCoordinates(feature, bpStart, xScale) {\r\n    \tvar px = Math.round((feature.start - bpStart) / xScale),\r\n        px1 = Math.round((feature.end - bpStart) / xScale),\r\n        pw = px1 - px;\r\n\r\n        if (pw < 3) {\r\n        \tpw = 3;\r\n            px -= 1;\r\n        }\r\n\r\n        return {\r\n        \tpx: px,\r\n            px1: px1,\r\n            pw: pw\r\n        };\r\n\t}\r\n\r\n\t/**\r\n     * Renders the feature to the canvas\r\n     * @param feature - The feature itself\r\n     * @param coord An object containing information on where to draw the feature\r\n     * px1,px2 the left and right pixels - pw - the width\r\n     * py the top, h - the height\r\n     * @param ctx - The context to draw the feature\r\n     * @param info - An object containing information about the genomic location\r\n     * bpStart.bpPerPixel and pixelWidth\r\n     * \r\n     */\r\n\t\r\n\trenderFeature(feature, coord,ctx,info){\r\n\t\tvar e,x, cy, direction, exon, ePx, ePx1, ePxU, ePw, py2, h2, \r\n            step = 20,\r\n            color = this.config.color;\r\n        if (feature.color) {\r\n            color = feature.color;\r\n        }\r\n  \r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = color;\r\n\r\n\r\n        cy = coord.py + coord.h / 2;\r\n        h2 = coord.h / 2;\r\n        py2 = cy - h2 / 2;\r\n\r\n\t\tlet exonCount = feature.exons ? feature.exons.length : 0;\r\n\t\t\tif (exonCount == 0) {\r\n            \t// single-exon transcript\r\n            \tctx.fillRect(coord.px, coord.py, coord.pw, coord.h);\r\n        \t}\r\n        else{\r\n            // multi-exon transcript\r\n            coord.px=Math.max(coord.px,0);\r\n            coord.px1=Math.min(coord.px1,info.pixelWidth);\r\n            Graphics.strokeLine(ctx, coord.px + 1, cy, coord.px1 - 1, cy); // center line for introns\r\n            direction = feature.strand == '+' ? 1 : -1;\r\n            \r\n           \r\n          \r\n            for ( x=coord.px + step / 2; x <  coord.px1; x += step) {\r\n\r\n                // draw arrowheads along central line indicating transcribed orientation\r\n                Graphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);\r\n                Graphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);\r\n            }\r\n            for (e = 0; e < exonCount; e++) {\r\n                // draw the exons\r\n                exon = feature.exons[e];\r\n                ePx = Math.round((exon.start - info.bpStart) / info.bpPerPixel);\r\n                ePx1 = Math.round((exon.end - info.bpStart) / info.bpPerPixel);\r\n                ePw = Math.max(1, ePx1 - ePx);\r\n\r\n                if (exon.utr) {\r\n                    ctx.fillRect(ePx, py2, ePw, h2); // Entire exon is UTR\r\n                }\r\n                else {\r\n                    if (exon.cdStart) {\r\n                        ePxU = Math.round((exon.cdStart - info.bpStart) / info.bpPerPixel);\r\n                        ctx.fillRect(ePx, py2, ePxU - ePx, h2); // start is UTR\r\n                        ePw -= (ePxU - ePx);\r\n                        ePx = ePxU;\r\n\r\n                    }\r\n                    if (exon.cdEnd) {\r\n                        ePxU = Math.round((exon.cdEnd - info.bpStart) / info.bpPerPixel);\r\n                        ctx.fillRect(ePxU, py2, ePx1 - ePxU, h2); // start is UTR\r\n                        ePw -= (ePx1 - ePxU);\r\n                        ePx1 = ePxU;\r\n                    }\r\n\r\n                    ctx.fillRect(ePx, coord.py, ePw, coord.h);\r\n\r\n                    // Arrows\r\n                    if (ePw > step + 5) {\r\n                        ctx.fillStyle = \"white\";\r\n                        ctx.strokeStyle = \"white\";\r\n                        for (x = ePx + step / 2; x < ePx1; x += step) {\r\n                            // draw arrowheads along central line indicating transcribed orientation\r\n                            Graphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);\r\n                            Graphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);\r\n                        }\r\n                        ctx.fillStyle = color;\r\n                        ctx.strokeStyle = color;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\t}\r\n\r\n\tgetFeatureAt(genomicLocation, chr, coord, bpPerPixel) {\r\n\t\tlet yOffset=coord.y-this.top;\r\n        // We use the featureCache property rather than method to avoid async load.  If the\r\n        // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.\r\n        if (this.feature_source.featureCache) {\r\n\r\n          \r\n               var tolerance = 2 * bpPerPixel,  // We need some tolerance around genomicLocation, start with +/- 2 pixels\r\n                featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance),\r\n                row;\r\n\r\n            if (this.config.displayMode != \"COLLAPSED\") {\r\n                row = (Math.floor)(this.config.displayMode === \"SQUISHED\" ? yOffset / this.config.expandedCallHeight : yOffset / this.config.squishedCallHeight);\r\n            }\r\n\r\n\r\n            if (featureList && featureList.length > 0) {\r\n\r\n\r\n                var popupData = [];\r\n                for (let feature of featureList){\r\n                    if (feature.end >= genomicLocation - tolerance &&\r\n                        feature.start <= genomicLocation + tolerance) {\r\n\r\n                        // If row number is specified use it\r\n                        if ((row === undefined || feature.row === undefined || row === feature.row)&&  feature.display) {\r\n                        \tconsole.log(feature.name);\r\n                           return feature;\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n               \r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n}\r\n\r\n\r\nclass MLVBigBedTrack extends MLVBedTrack{\r\n\tconstructor(config){\r\n\t\tsuper(config);\r\n\t\t\r\n\t}\r\n\t_setFeatureSource(){\r\n\t\tthis.feature_source=new _feature_js__WEBPACK_IMPORTED_MODULE_1__[\"BigBedFeatureSource\"](this.config);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass MLVWigTrack extends MLVTrack{\r\n\tconstructor(config){\r\n\t\tsuper(config);\r\n\t\tthis._setFeatureSource();\r\n\t}\r\n\r\n\t_setFeatureSource(){\r\n\t\tthis.feature_source=new _bigwig_js__WEBPACK_IMPORTED_MODULE_0__[\"BWSource\"](this.config);\t\r\n\t}\r\n\r\n\r\n\tdrawScale(pixel_height,ctx){\r\n\t\tif (this.config.scale_link_to){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet bot= pixel_height;\r\n\t\tlet top = 0;\r\n\t\tif (this.scale_link_to){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.config.discrete){\r\n\t\t\ttop=this.top;\r\n\t\t\tbot = this.bottom;\r\n\t\t}\r\n\t\tlet range=this.max_y-this.min_y;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(0,top);\r\n\t\tctx.lineTo(0,bot);\r\n\t\tctx.moveTo(0,top);\r\n\t\tctx.lineTo(20,top);\r\n\t\tctx.moveTo(0,bot);\r\n\t\tctx.lineTo(20,bot);\r\n\t\tctx.font=\"12px Arial\";\r\n\t\tctx.stroke();\r\n\t\tctx.textBaseline=\"top\";\r\n\t\tctx.fillText(this.max_y.toFixed(2),20,top);\r\n\t\tctx.textBaseline=\"alphabetic\";\r\n\t\tctx.fillText(this.min_y,20,bot);\r\n\r\n\t}\r\n\t\r\n\tdrawFeatures(options) {\r\n\t\tlet self = this,\r\n\t    features = options.features,\r\n\t    color=self.config.color,\r\n\t    ctx = options.context,\r\n\t    bpPerPixel = options.bpPerPixel,\r\n\t    bpStart = options.bpStart,\r\n\t    pixelWidth = options.pixelWidth,\r\n\t    pixelHeight =options.pixelHeight,\r\n\t    y_offset=this.config.discrete?options.top:0,\r\n\t    bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\r\n\t    featureValueMinimum,\r\n\t    featureValueMaximum,\r\n\t    featureValueRange,\r\n\t    $dataRangeTrackLabel,\r\n\t    str,\r\n\t    min,\r\n\t    max;\r\n\t    if(this.config.discrete){\r\n\t    \tif (this.config.group){\r\n\t    \t\tpixelHeight=options.height;\r\n\t    \t}\r\n\t    \telse{\r\n\t    \t\t pixelHeight=this.config.height;\r\n\t    \t}\r\n\t    \t\r\n\t    }\r\n\t          \r\n\t    if (!color){\r\n\t    \tcolor=\"black\";       \r\n\t    }\r\n\t    self.prev_coords={x:0,y:0};\r\n\t\t\r\n\t    if (features) {\r\n\t    \tif (self.scale_link_to){\r\n\t    \t\tlet t = self.scale_link_to.config;\r\n\t            if (t){\r\n\t            \tself.config.scale=t.scale;\r\n\t                self.max_y=self.scale_link_to.max_y;\r\n\t                self.min_y=self.scale_link_to.min_y;\r\n\t            }\r\n\t       }\r\n\t       else if ( (self.max_y === undefined && self.config.scale===\"automatic\") || self.config.scale===\"dynamic\"){\r\n\t                var s = autoscale(features);\r\n\t                self.min_y = s.min;\r\n\t                self.max_y = s.max;\r\n\t            }\r\n\t            else if (self.config.scale===\"fixed\") {\r\n\t                self.min_y = self.config.min_y;\r\n\t                self.max_y=self.config.max_y;\r\n\t            }\r\n\t          \r\n\t            featureValueRange = self.max_y - self.min_y;\r\n\r\n\t            //$dataRangeTrackLabel = $(this.trackView.trackDiv).find('.igv-data-range-track-label');\r\n\t            //\r\n\t            //min = (Math.floor(track.dataRange.min) === track.dataRange.min) ? track.dataRange.min : track.dataRange.min.toFixed(2);\r\n\t            //max = (Math.floor(track.dataRange.max) === track.dataRange.max) ? track.dataRange.max : track.dataRange.max.toFixed(2);\r\n\t            //str = '[' + min + ' - ' + max + ']';\r\n\t            //\r\n\t            //$dataRangeTrackLabel.text(str);\r\n\t            let prev_x=0;\r\n\t            let prev_y=0;\r\n\t            ctx.globalAlpha   = this.config.opacity?this.config.opacity:1;\r\n\t            if (self.is_line){  \r\n\t                let y = (1.0 - self.config.value / featureValueRange)*pixelHeight;\r\n\t                Graphics.strokeLine(ctx,0,y,pixelWidth,y,{\"strokeStyle\":self.config.color,\"lineWidth\":self.config.width?self.config.width:1});\r\n\t             }\r\n\t            else{\r\n\t            \tfeatures.forEach(renderFeature);\r\n\t            }\r\n\t            ctx.globalAlpha=1\r\n\t        }\r\n\t         \r\n\t        function renderFeature(feature, index, featureList) {\r\n\r\n\t            var yUnitless,\r\n\t                heightUnitLess,\r\n\t                x,\r\n\t                y,\r\n\t                width,\r\n\t                height,\r\n\t                rectEnd,\r\n\t                rectBaseline;\r\n\r\n\t            if (feature.end < bpStart) return;\r\n\t            if (feature.start > bpEnd) return;\r\n\r\n\t            x = Math.floor((feature.start - bpStart) / bpPerPixel);\r\n\t            rectEnd = Math.floor((feature.end - bpStart) / bpPerPixel);\r\n\t            width = Math.max(0, rectEnd - x);\r\n\r\n\t            //height = ((feature.value - featureValueMinimum) / featureValueRange) * pixelHeight;\r\n\t            //rectBaseline = pixelHeight - height;\r\n\t            //canvas.fillRect(rectOrigin, rectBaseline, rectWidth, rectHeight, {fillStyle: track.color});\r\n\r\n\t            if (signsDiffer(self.min_y, self.max_y)) {\r\n\r\n\t                if (feature.value < 0) {\r\n\t                    yUnitless = self.max_y/ featureValueRange;\r\n\t                    heightUnitLess = -feature.value / featureValueRange;\r\n\t                } else {\r\n\t                    yUnitless = ((self.max_y - feature.value) / featureValueRange);\r\n\t                    heightUnitLess = feature.value / featureValueRange;\r\n\t                }\r\n\r\n\t            }\r\n\t            else if (self.min_y < 0) {\r\n\t                yUnitless = 0;\r\n\t                heightUnitLess = -feature.value / featureValueRange;\r\n\t            }\r\n\t            else {\r\n\t                yUnitless = 1.0 - ((feature.value-self.min_y) / featureValueRange);\r\n\t                heightUnitLess = (feature.value+self.min_y) / featureValueRange;\r\n\t            }\r\n\r\n\t           \ty = (yUnitless*pixelHeight)+y_offset;\r\n\t            y=y<y_offset?y_offset:y;\r\n\t            height=heightUnitLess * pixelHeight;\r\n\t            height=height>pixelHeight?pixelHeight:height\r\n\r\n\t            //canvas.fillRect(x, yUnitless * pixelHeight, width, heightUnitLess * pixelHeight, { fillStyle: igv.randomRGB(64, 255) });\r\n\t            if (self.config.display==='line'){\r\n\t                 if (self.prev_coords.x){\r\n\t                    Graphics.strokeLine(ctx,x,y,self.prev_coords.x,self.prev_coords.y,{\"strokeStyle\":color,\"lineWidth\":3});\r\n\r\n\t                }\r\n\t                self.prev_coords.x=x;\r\n\t                self.prev_coords.y=y;\r\n\t            }\r\n\t            else{\r\n\t                Graphics.fillRect(ctx, x, y, width, height, {fillStyle: color});\r\n\t            }\r\n\t        }\r\n\t         function autoscale(features) {\r\n        var min = 0,\r\n            max = -Number.MAX_VALUE;\r\n\r\n        features.forEach(function (f) {\r\n            min = Math.min(min, f.value);\r\n            max = Math.max(max, f.value);\r\n        });\r\n\r\n        return {min: min, max: max};\r\n\r\n    }\r\n\r\n    function signsDiffer(a, b) {\r\n        return (a > 0 && b < 0 || a < 0 && b > 0);\r\n    }\r\n    this.top=y_offset;\r\n    this.bottom=y_offset+pixelHeight;\r\n    if (this.config.discrete){\r\n    \treturn this.bottom;\r\n    }\r\n    else{\r\n    \tthis.top=0;\r\n    \tthis.bottom=0;\r\n    }\r\n\r\n\t    \r\n}\r\n}\r\n class LineTrack extends MLVWigTrack{\r\n\t constructor(config){\r\n\t\t super(config);\r\n\t\t this.is_line=true;\r\n\t }\r\n\t \r\n\t getFeatures(chr, bpStart, bpEnd) {\r\n\t\t return new Promise(function (fulfill, reject) {\r\n\t\t\t fulfill([]);\r\n\t     });\r\n\t }\r\n\t \r\n\t \r\n }\r\n\r\n\r\n\r\n\r\nclass SequenceTrack extends MLVTrack{\r\n    constructor(config){\r\n\t\tsuper(config) \r\n        this._setFeatureSource(config);\r\n        this.sequenceType = config.sequenceType || \"dna\";  \r\n        this.height = 15;\r\n    }\r\n\r\n    _setFeatureSource(config){\r\n    \tthis.feature_source = new _feature_js__WEBPACK_IMPORTED_MODULE_1__[\"FastaSequence\"](config.url);\r\n    }\r\n\r\n\r\n\r\n    getFeatures(chr, bpStart, bpEnd,force,data) {\r\n\t\tlet self = this;\r\n        return new Promise(function (fulfill, reject) {\r\n            if (data.bpPerPixel > 1/*igv.browser.trackViewportWidthBP() > 30000*/) {\r\n                fulfill(null);\r\n            }\r\n            else {\r\n                self.feature_source.getSequence(chr, bpStart, bpEnd).then(fulfill).catch(reject);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    drawFeatures(options) {\r\n\r\n        var sequence = options.features,\r\n            ctx = options.context,\r\n            bpPerPixel = options.bpPerPixel,\r\n            bpStart = options.bpStart,\r\n            pixelWidth = options.pixelWidth,\r\n            bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\r\n            len, w, y, pos, offset, b, p0, p1, pc, c;\r\n\r\n        let y_pos1=options.top;\r\n        let y_pos2=y_pos1+5;\r\n\r\n        if (sequence) {\r\n\r\n            len = sequence.length;\r\n            w = 1 / bpPerPixel;\r\n\r\n            y = y_pos1+this.height / 2;\r\n            for (pos = bpStart; pos <= bpEnd; pos++) {\r\n\r\n                offset = pos - bpStart;\r\n                if (offset < len) {\r\n//                            var b = sequence.charAt(offset);\r\n                    b = sequence[offset];\r\n                    p0 = Math.floor(offset * w);\r\n                    p1 = Math.floor((offset + 1) * w);\r\n                    pc = Math.round((p0 + p1) / 2);\r\n\r\n                    if (this.color) {\r\n                        c = this.color;\r\n                    }\r\n                    else if (\"dna\" === this.sequenceType) {\r\n                        c = Graphics.nucleotideColors[b];\r\n                    }\r\n                    else {\r\n                        c = \"rgb(0, 0, 150)\";\r\n                    }\r\n\r\n                    if (!c) c = \"gray\";\r\n\r\n                    if (bpPerPixel >0.15) {\r\n\r\n                        Graphics.fillRect(ctx, p0, y_pos1, p1 - p0, 10, {fillStyle: c});\r\n                    }\r\n                    else {\r\n\r\n                        Graphics.strokeText(ctx, b, pc, y, {\r\n                            strokeStyle: c,\r\n                            font: 'normal 10px Arial',\r\n                            textAlign: 'center'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n      return y_pos1+10;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n//*******js/ifv-canvas.js***********************\r\n\r\n\r\nclass Graphics{\r\n\r\n\r\n       static setProperties(ctx, properties) {\r\n\r\n            for (var key in properties) {\r\n                if (properties.hasOwnProperty(key)) {\r\n                    var value = properties[key];\r\n                    ctx[key] = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        static strokeLine (ctx, x1, y1, x2, y2, properties) {\r\n\r\n            x1 = Math.floor(x1) + 0.5;\r\n            y1 = Math.floor(y1) + 0.5;\r\n            x2 = Math.floor(x2) + 0.5;\r\n            y2 = Math.floor(y2) + 0.5;\r\n\r\n            //log(\"stroke line, prop: \" + properties);\r\n\r\n            ctx.save();\r\n            if (properties) Graphics.setProperties(ctx, properties);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        static fillRect(ctx, x, y, w, h, properties) {\r\n\r\n            var c;\r\n            x = Math.round(x);\r\n            y = Math.round(y);\r\n\r\n            if (properties) {\r\n                ctx.save();\r\n                Graphics.setProperties(ctx, properties);\r\n            }\r\n            \r\n            ctx.fillRect(x, y, w, h);\r\n\r\n            if (properties) ctx.restore();\r\n        }\r\n\r\n        static fillPolygon(ctx, x, y, properties) {\r\n            ctx.save();\r\n            if (properties)   Graphics.setProperties(ctx, properties);\r\n            Graphics.doPath(ctx, x, y);\r\n            ctx.fill();\r\n            ctx.restore();\r\n        }\r\n\r\n        static strokePolygon(ctx, x, y, properties) {\r\n            ctx.save();\r\n            if (properties)   Graphics.setProperties(ctx, properties);\r\n            Graphics.doPath(ctx, x, y);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        static fillText(ctx, text, x, y, properties, transforms) {\r\n\r\n            if (properties) {\r\n                ctx.save();\r\n                Graphics.setProperties(ctx, properties);\r\n            }\r\n\r\n\r\n            ctx.save();\r\n\r\n            ctx.translate(x, y);\r\n            if (transforms) {\r\n\r\n                for (var transform in transforms) {\r\n                    var value = transforms[transform];\r\n\r\n                    // TODO: Add error checking for robustness\r\n                    if (transform == 'translate') {\r\n                        ctx.translate(value['x'], value['y']);\r\n                    }\r\n                    if (transform == 'rotate') {\r\n                        ctx.rotate(value['angle'] * Math.PI / 180);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            ctx.fillText(text, 0, 0);\r\n            ctx.restore();\r\n\r\n            if (properties) ctx.restore();\r\n\r\n        }\r\n\r\n        static strokeText(ctx, text, x, y, properties, transforms) {\r\n\r\n\r\n            ctx.save();\r\n            if (properties) {\r\n                Graphics.setProperties(ctx, properties);\r\n            }\r\n\r\n\r\n            ctx.translate(x, y);\r\n            if (transforms) {\r\n\r\n                for (var transform in transforms) {\r\n                    var value = transforms[transform];\r\n\r\n                    // TODO: Add error checking for robustness\r\n                    if (transform == 'translate') {\r\n                        ctx.translate(value['x'], value['y']);\r\n                    }\r\n                    if (transform == 'rotate') {\r\n                        ctx.rotate(value['angle'] * Math.PI / 180);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            ctx.strokeText(text, 0, 0);\r\n            ctx.restore();\r\n\r\n        }\r\n\r\n        static strokeCircle(ctx, x, y, radius) {\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n            ctx.stroke();\r\n        }\r\n\r\n        static fillCircle (ctx, x, y, radius) {\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n        }\r\n\r\n        static drawArrowhead(ctx, x, y, size, lineWidth) {\r\n\r\n            ctx.save();\r\n            if (!size) {\r\n                size = 5;\r\n            }\r\n            if (lineWidth) {\r\n                ctx.lineWidth = lineWidth;\r\n            }\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y - size / 2);\r\n            ctx.lineTo(x, y + size / 2);\r\n            ctx.lineTo(x + size, y);\r\n            ctx.lineTo(x, y - size / 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.restore();\r\n        }\r\n\r\n        static dashedLine(ctx, x1, y1, x2, y2, dashLen, properties) {\r\n            ctx.save();\r\n            x1 = Math.round(x1);\r\n            y1 = Math.round(y1);\r\n            x2 = Math.round(x2);\r\n            y2 = Math.round(y2);\r\n            dashLen = Math.round(dashLen);\r\n            log(\"dashedLine\");\r\n            if (properties) Graphics.setProperties(ctx, properties);\r\n\r\n            if (dashLen == undefined) dashLen = 2;\r\n            ctx.moveTo(x1, y1);\r\n\r\n            var dX = x2 - x1;\r\n            var dY = y2 - y1;\r\n            var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\r\n            var dashX = dX / dashes;\r\n            var dashY = dY / dashes;\r\n\r\n            var q = 0;\r\n            while (q++ < dashes) {\r\n                x1 += dashX;\r\n                y1 += dashY;\r\n                ctx[q % 2 == 0 ? 'moveTo' : 'lineTo'](x1, y1);\r\n            }\r\n            ctx[q % 2 == 0 ? 'moveTo' : 'lineTo'](x2, y2);\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n\r\n    \r\n\r\n        static doPath(ctx, x, y) {\r\n\r\n\r\n        \tvar i, len = x.length;\r\n        \tfor (i = 0; i < len; i++) {\r\n        \t\tx[i] = Math.round(x[i]);\r\n        \t\ty[i] = Math.round(y[i]);\r\n        \t}\r\n\r\n        \tctx.beginPath();\r\n        \tctx.moveTo(x[0], y[0]);\r\n        \tfor (i = 1; i < len; i++) {\r\n        \t\tctx.lineTo(x[i], y[i]);\r\n        \t}\r\n        \tctx.closePath();\r\n        }\r\n\r\n}\r\n\r\nGraphics.nucleotideColors={\r\n\t\"A\":\"green\",\r\n\t\"T\":\"red\",\r\n\t\"G\":\"black\",\r\n\t\"C\":\"blue\",\r\n\t\"a\":\"green\",\r\n\t\"t\":\"red\",\r\n\t\"c\":\"black\",\r\n\t\"g\":\"blue\"\r\n\r\n}\r\n\r\n\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! extend */ \"extend\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/tracks.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: Utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($, XMLHttpRequest) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Utils\", function() { return Utils; });\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\nlet parseUri_options = {\r\n        strictMode: false,\r\n        key: [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"],\r\n        q: {\r\n            name: \"queryKey\",\r\n            parser: /(?:^|&)([^&=]*)=?([^&]*)/g\r\n        },\r\n        parser: {\r\n            strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\r\n            loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\r\n        }\r\n    };\r\n\r\n\r\n\r\nclass Utils{\r\n\r\n    \r\n    static addAlphaToRGB(rgbString, alpha) {\r\n\r\n        if (rgbString.startsWith(\"rgb\")) {\r\n            return rgbString.replace(\"rgb\", \"rgba\").replace(\")\", \", \" + alpha + \")\");\r\n        } else {\r\n            console.log(rgbString + \" is not an rgb style string\");\r\n            return rgbString;\r\n        }\r\n\r\n    }\r\n\r\n    static presentAlert(track_div,error){\r\n        let div= $(\"<div>\").css({\"position\":\"absolute\",\"background-color\":\"white\"}).attr(\"class\",\"mlv-alert\").appendTo(track_div);\r\n        let div1= $(\"<div>\").css({\"display\":\"flex\",\"justify-content\":\"center\"}).appendTo(div);\r\n        div1.append($('<i class=\"fas fa-exclamation-circle\"></i>').css({color:\"red\",\"font-size\":\"16px\",\"text-align\":\"center\",}));\r\n        div.append($(\"<div>\"+error+\"</div>\").css({color:\"red\",\"font-size\":\"14px\",\"text-align\":\"center\"}));\r\n        let left = Math.round((track_div.width()/2)-(div.width()/2));\r\n        let top =Math.round((track_div.height()/2)-(div.height()/2));\r\n        div.css({\"left\":left+\"px\",top:top+\"px\"});\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n   \r\n\r\n    static spinner(size) {\r\n\r\n        // spinner\r\n        var $container,\r\n            $spinner;\r\n\r\n        $spinner = $('<i class=\"fa fa-lg fa-spinner fa-spin igv-spinner\">').css({position:\"absolute\",top:\"50%\",left:\"50%\"});\r\n        if (size) {\r\n            $spinner.css(\"font-size\", size);\r\n        }\r\n\r\n    \r\n\r\n        return $spinner[0];\r\n    }\r\n\r\n    /**\r\n     * Find spinner\r\n     */\r\n    static getSpinnerObjectWithParentElement(parentElement) {\r\n        return parentElement.find(\"div.igv-spinner-container\");\r\n    };\r\n\r\n    /**\r\n     * Start the spinner for the parent element, if it has one\r\n     */\r\n    static startSpinnerAtParentElement(parentElement) {\r\n       parentElement.children(\".fa-spinner\").show();  \r\n\r\n    };\r\n\r\n    /**\r\n     * Stop the spinner for the parent element, if it has one\r\n     * @param parentElement\r\n     */\r\n    static stopSpinnerAtParentElement (parentElement) {\r\n        parentElement.children(\".fa-spinner\").hide();\r\n       \r\n\r\n    }\r\n\r\n    static parseUri(str) {\r\n\r\n        var o = parseUri_options,\r\n            m = o.parser[o.strictMode ? \"strict\" : \"loose\"].exec(str),\r\n            uri = {},\r\n            i = 14;\r\n\r\n        while (i--) uri[o.key[i]] = m[i] || \"\";\r\n\r\n        uri[o.q.name] = {};\r\n        uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {\r\n            if ($1) uri[o.q.name][$1] = $2;\r\n        });\r\n\r\n        return uri;\r\n    }\r\n    \r\n    \r\n    \r\n  \r\n    static domElementRectAsString(element) {\r\n        return \" x \" + element.clientLeft + \" y \" + element.clientTop + \" w \" + element.clientWidth + \" h \" + element.clientHeight;\r\n    };\r\n\r\n    static isNumber(n) {\r\n\r\n        if (\"\" === n) {\r\n\r\n            return false\r\n        } else if (undefined === n) {\r\n\r\n            return false;\r\n        } else {\r\n\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        }\r\n\r\n    };\r\n\r\n    static guid  () {\r\n        return (\"0000\" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\r\n    };\r\n\r\n    // Returns a random number between min (inclusive) and max (exclusive)\r\n    static random(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    };\r\n\r\n    // StackOverflow: http://stackoverflow.com/a/10810674/116169\r\n    static numberFormatter(rawNumber) {\r\n\r\n        var dec = String(rawNumber).split(/[.,]/),\r\n            sep = ',',\r\n            decsep = '.';\r\n\r\n        return dec[0].split('').reverse().reduce(function (prev, now, i) {\r\n                return i % 3 === 0 ? prev + sep + now : prev + now;\r\n            }).split('').reverse().join('') + (dec[1] ? decsep + dec[1] : '');\r\n    };\r\n\r\n    static numberUnFormatter (formatedNumber) {\r\n\r\n        return formatedNumber.split(\",\").join().replace(\",\", \"\", \"g\");\r\n    };\r\n\r\n    /**\r\n     * Translate the mouse coordinates for the event to the coordinates for the given target element\r\n     * @param e\r\n     * @param target\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    static translateMouseCoordinates(e, target) {\r\n\r\n        var eFixed = $.event.fix(e),   // Sets pageX and pageY for browsers that don't support them\r\n            posx = eFixed.pageX - $(target).offset().left,\r\n            posy = eFixed.pageY - $(target).offset().top;\r\n\r\n        return {x: posx, y: posy}\r\n\r\n    };\r\n\r\n    /**\r\n     * Format markup for popover text from an array of name value pairs [{name, value}]\r\n     */\r\n    static formatPopoverText (nameValueArray) {\r\n\r\n        var markup = \"<table class=\\\"igv-popover-table\\\">\";\r\n\r\n        nameValueArray.forEach(function (nameValue) {\r\n\r\n            if (nameValue.name) {\r\n                //markup += \"<tr><td class=\\\"igv-popover-td\\\">\" + \"<span class=\\\"igv-popoverName\\\">\" + nameValue.name + \"</span>\" + \"<span class=\\\"igv-popoverValue\\\">\" + nameValue.value + \"</span>\" + \"</td></tr>\";\r\n                markup += \"<tr><td class=\\\"igv-popover-td\\\">\" + \"<div class=\\\"igv-popoverNameValue\\\">\" + \"<span class=\\\"igv-popoverName\\\">\" + nameValue.name + \"</span>\" + \"<span class=\\\"igv-popoverValue\\\">\" + nameValue.value + \"</span>\" + \"</div>\" + \"</td></tr>\";\r\n            }\r\n            else {\r\n                // not a name/value pair\r\n                markup += \"<tr><td>\" + nameValue.toString() + \"</td></tr>\";\r\n            }\r\n        });\r\n\r\n        markup += \"</table>\";\r\n        return markup;\r\n\r\n\r\n    };\r\n\r\n    static throttle(fn, threshhold, scope) {\r\n        threshhold || (threshhold = 200);\r\n        var last, deferTimer;\r\n\r\n        return function () {\r\n            var context = scope || this;\r\n\r\n            var now = +new Date,\r\n                args = arguments;\r\n            if (last && now < last + threshhold) {\r\n                // hold on to it\r\n                clearTimeout(deferTimer);\r\n                deferTimer = setTimeout(function () {\r\n                    last = now;\r\n                    fn.apply(context, args);\r\n                }, threshhold);\r\n            } else {\r\n                last = now;\r\n                fn.apply(context, args);\r\n            }\r\n        }\r\n    };\r\n\r\n    static splitStringRespectingQuotes(string, delim) {\r\n\r\n        var tokens = [],\r\n            len = string.length,\r\n            i,\r\n            n = 0,\r\n            quote = false,\r\n            c;\r\n\r\n        if (len > 0) {\r\n\r\n            tokens[n] = string.charAt(0);\r\n            for (i = 1; i < len; i++) {\r\n                c = string.charAt(i);\r\n                if (c === '\"') {\r\n                    quote = !quote;\r\n                }\r\n                else if (!quote && c === delim) {\r\n                    n++;\r\n                    tokens[n] = \"\";\r\n                }\r\n                else {\r\n                    tokens[n] += c;\r\n                }\r\n            }\r\n        }\r\n        return tokens;\r\n    };\r\n\r\n    /**\r\n     * Extend jQuery's ajax function to handle binary requests.   Credit to Henry Algus:\r\n     *\r\n     * http://www.henryalgus.com/reading-binary-files-using-jquery-ajax/\r\n     */\r\n   static addAjaxExtensions () {\r\n\r\n        // use this transport for \"binary\" data type\r\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\r\n\r\n            return {\r\n                // create new XMLHttpRequest\r\n                send: function (_, callback) {\r\n                    // setup all variables\r\n                    var xhr = new XMLHttpRequest(),\r\n                        url = options.url,\r\n                        type = options.type,\r\n                        responseType = \"arraybuffer\",\r\n                        data = options.data || null;\r\n\r\n                    xhr.addEventListener('load', function () {\r\n                        var data = {};\r\n                        data[options.dataType] = xhr.response;\r\n                        // make callback and send data\r\n                        callback(xhr.status, xhr.statusText, data, xhr.getAllResponseHeaders());\r\n                    });\r\n\r\n                    xhr.open(type, url);\r\n                    xhr.responseType = responseType;\r\n\r\n                    if (options.headers) {\r\n                        for (var prop in options.headers) {\r\n                            if (options.headers.hasOwnProperty(prop)) {\r\n                                xhr.setRequestHeader(prop, options.headers[prop]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // TODO -- set any other options values\r\n                },\r\n                abort: function () {\r\n                    jqXHR.abort();\r\n                }\r\n            };\r\n\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Test if the given value is a string or number.  Not using typeof as it fails on boxed primitives.\r\n     *\r\n     * @param value\r\n     * @returns boolean\r\n     */\r\n    static isStringOrNumber(value) {\r\n        return (value.substring || value.toFixed) ? true : false\r\n    };\r\n\r\n    static constrainBBox($child, $parent) {\r\n\r\n        var delta,\r\n            topLeft,\r\n            bboxChild = {},\r\n            bboxParent = {};\r\n\r\n        bboxParent.left = bboxParent.top = 0;\r\n        bboxParent.right = $parent.outerWidth();\r\n        bboxParent.bottom = $parent.outerHeight();\r\n\r\n        topLeft = $child.offset();\r\n\r\n        bboxChild.left = topLeft.left - $parent.offset().left;\r\n        bboxChild.top = topLeft.top - $parent.offset().top;\r\n        bboxChild.right = bboxChild.left + $child.outerWidth();\r\n        bboxChild.bottom = bboxChild.top + $child.outerHeight();\r\n\r\n        delta = bboxChild.bottom - bboxParent.bottom;\r\n        if (delta > 0) {\r\n\r\n            // clamp to trackContainer bottom\r\n            topLeft.top -= delta;\r\n\r\n            bboxChild.top -= delta;\r\n            bboxChild.bottom -= delta;\r\n\r\n            delta = bboxChild.top - bboxParent.top;\r\n            if (delta < 0) {\r\n                topLeft.top -= delta;\r\n            }\r\n\r\n        }\r\n\r\n        return topLeft;\r\n\r\n    };\r\n\r\n    static log(message) {\r\n        if (igv.enableLogging && console && console.log) {\r\n            console.log(message);\r\n        }\r\n    };\r\n\r\n\r\n}\r\n\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"jquery\"), __webpack_require__(/*! xhr2 */ \"xhr2\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ }),

/***/ "./src/vendor/inflate.js":
/*!*******************************!*\
  !*** ./src/vendor/inflate.js ***!
  \*******************************/
/*! exports provided: jszlib_inflate_buffer, arrayCopy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"jszlib_inflate_buffer\", function() { return jszlib_inflate_buffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayCopy\", function() { return arrayCopy; });\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n    \n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    let nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z, \n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy \n\n    this.table = 0;           // table lengths (14 bits) \n    this.index = 0;           // index into blens (or border) \n    this.blens = null;         // bit lengths of codes \n    this.bb=new Int32Array(1); // bit length tree depth \n    this.tb=new Int32Array(1); // bit length decoding tree \n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block \n\n  // mode independent information \n    this.bitk = 0;            // bits in bit buffer \n    this.bitb = 0;            // bit buffer \n    this.read = 0;            // window read pointer \n    this.write = 0;           // window write pointer \n    this.check = 0;          // check on output \n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored \n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q; \n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tthis.mode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k; \n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), \n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k; \n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q; \n\tr = this.inflate_flush(z, r); \n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tthis.mode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){ \n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits, \n\t\t\t   this.ltree, this.ltree_index, \n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }  \n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl; \n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){           \n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){           \n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n \n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      } \n      while(true);\n    } \n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n \n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){ \n        this.v=new Int32Array(vsize); \n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    } \n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); \n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else { \n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521; \n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/inflate.js\n");

/***/ }),

/***/ "./src/vendor/zlib_and_gzip.min.js":
/*!*****************************************!*\
  !*** ./src/vendor/zlib_and_gzip.min.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function q(b){throw b;}var t=void 0,u=!0,aa=this;function A(b,a){var c=b.split(\".\"),d=aa;!(c[0]in d)&&d.execScript&&d.execScript(\"var \"+c[0]);for(var f;c.length&&(f=c.shift());)!c.length&&a!==t?d[f]=a:d=d[f]?d[f]:d[f]={}};var B=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array;function F(b,a){this.index=\"number\"===typeof a?a:0;this.m=0;this.buffer=b instanceof(B?Uint8Array:Array)?b:new (B?Uint8Array:Array)(32768);2*this.buffer.length<=this.index&&q(Error(\"invalid index\"));this.buffer.length<=this.index&&this.f()}F.prototype.f=function(){var b=this.buffer,a,c=b.length,d=new (B?Uint8Array:Array)(c<<1);if(B)d.set(b);else for(a=0;a<c;++a)d[a]=b[a];return this.buffer=d};\nF.prototype.d=function(b,a,c){var d=this.buffer,f=this.index,e=this.m,g=d[f],k;c&&1<a&&(b=8<a?(H[b&255]<<24|H[b>>>8&255]<<16|H[b>>>16&255]<<8|H[b>>>24&255])>>32-a:H[b]>>8-a);if(8>a+e)g=g<<a|b,e+=a;else for(k=0;k<a;++k)g=g<<1|b>>a-k-1&1,8===++e&&(e=0,d[f++]=H[g],g=0,f===d.length&&(d=this.f()));d[f]=g;this.buffer=d;this.m=e;this.index=f};F.prototype.finish=function(){var b=this.buffer,a=this.index,c;0<this.m&&(b[a]<<=8-this.m,b[a]=H[b[a]],a++);B?c=b.subarray(0,a):(b.length=a,c=b);return c};\nvar ba=new (B?Uint8Array:Array)(256),ca;for(ca=0;256>ca;++ca){for(var K=ca,da=K,ea=7,K=K>>>1;K;K>>>=1)da<<=1,da|=K&1,--ea;ba[ca]=(da<<ea&255)>>>0}var H=ba;function ja(b,a,c){var d,f=\"number\"===typeof a?a:a=0,e=\"number\"===typeof c?c:b.length;d=-1;for(f=e&7;f--;++a)d=d>>>8^O[(d^b[a])&255];for(f=e>>3;f--;a+=8)d=d>>>8^O[(d^b[a])&255],d=d>>>8^O[(d^b[a+1])&255],d=d>>>8^O[(d^b[a+2])&255],d=d>>>8^O[(d^b[a+3])&255],d=d>>>8^O[(d^b[a+4])&255],d=d>>>8^O[(d^b[a+5])&255],d=d>>>8^O[(d^b[a+6])&255],d=d>>>8^O[(d^b[a+7])&255];return(d^4294967295)>>>0}\nvar ka=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,\n2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,\n2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,\n2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,\n3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,\n936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],O=B?new Uint32Array(ka):ka;function P(){}P.prototype.getName=function(){return this.name};P.prototype.getData=function(){return this.data};P.prototype.X=function(){return this.Y};A(\"Zlib.GunzipMember\",P);A(\"Zlib.GunzipMember.prototype.getName\",P.prototype.getName);A(\"Zlib.GunzipMember.prototype.getData\",P.prototype.getData);A(\"Zlib.GunzipMember.prototype.getMtime\",P.prototype.X);function la(b){this.buffer=new (B?Uint16Array:Array)(2*b);this.length=0}la.prototype.getParent=function(b){return 2*((b-2)/4|0)};la.prototype.push=function(b,a){var c,d,f=this.buffer,e;c=this.length;f[this.length++]=a;for(f[this.length++]=b;0<c;)if(d=this.getParent(c),f[c]>f[d])e=f[c],f[c]=f[d],f[d]=e,e=f[c+1],f[c+1]=f[d+1],f[d+1]=e,c=d;else break;return this.length};\nla.prototype.pop=function(){var b,a,c=this.buffer,d,f,e;a=c[0];b=c[1];this.length-=2;c[0]=c[this.length];c[1]=c[this.length+1];for(e=0;;){f=2*e+2;if(f>=this.length)break;f+2<this.length&&c[f+2]>c[f]&&(f+=2);if(c[f]>c[e])d=c[e],c[e]=c[f],c[f]=d,d=c[e+1],c[e+1]=c[f+1],c[f+1]=d;else break;e=f}return{index:b,value:a,length:this.length}};function ma(b){var a=b.length,c=0,d=Number.POSITIVE_INFINITY,f,e,g,k,h,l,s,n,m;for(n=0;n<a;++n)b[n]>c&&(c=b[n]),b[n]<d&&(d=b[n]);f=1<<c;e=new (B?Uint32Array:Array)(f);g=1;k=0;for(h=2;g<=c;){for(n=0;n<a;++n)if(b[n]===g){l=0;s=k;for(m=0;m<g;++m)l=l<<1|s&1,s>>=1;for(m=l;m<f;m+=h)e[m]=g<<16|n;++k}++g;k<<=1;h<<=1}return[e,c,d]};function na(b,a){this.k=qa;this.I=0;this.input=B&&b instanceof Array?new Uint8Array(b):b;this.b=0;a&&(a.lazy&&(this.I=a.lazy),\"number\"===typeof a.compressionType&&(this.k=a.compressionType),a.outputBuffer&&(this.a=B&&a.outputBuffer instanceof Array?new Uint8Array(a.outputBuffer):a.outputBuffer),\"number\"===typeof a.outputIndex&&(this.b=a.outputIndex));this.a||(this.a=new (B?Uint8Array:Array)(32768))}var qa=2,ra={NONE:0,v:1,o:qa,aa:3},sa=[],S;\nfor(S=0;288>S;S++)switch(u){case 143>=S:sa.push([S+48,8]);break;case 255>=S:sa.push([S-144+400,9]);break;case 279>=S:sa.push([S-256+0,7]);break;case 287>=S:sa.push([S-280+192,8]);break;default:q(\"invalid literal: \"+S)}\nna.prototype.g=function(){var b,a,c,d,f=this.input;switch(this.k){case 0:c=0;for(d=f.length;c<d;){a=B?f.subarray(c,c+65535):f.slice(c,c+65535);c+=a.length;var e=a,g=c===d,k=t,h=t,l=t,s=t,n=t,m=this.a,p=this.b;if(B){for(m=new Uint8Array(this.a.buffer);m.length<=p+e.length+5;)m=new Uint8Array(m.length<<1);m.set(this.a)}k=g?1:0;m[p++]=k|0;h=e.length;l=~h+65536&65535;m[p++]=h&255;m[p++]=h>>>8&255;m[p++]=l&255;m[p++]=l>>>8&255;if(B)m.set(e,p),p+=e.length,m=m.subarray(0,p);else{s=0;for(n=e.length;s<n;++s)m[p++]=\ne[s];m.length=p}this.b=p;this.a=m}break;case 1:var r=new F(B?new Uint8Array(this.a.buffer):this.a,this.b);r.d(1,1,u);r.d(1,2,u);var v=ta(this,f),x,Q,y;x=0;for(Q=v.length;x<Q;x++)if(y=v[x],F.prototype.d.apply(r,sa[y]),256<y)r.d(v[++x],v[++x],u),r.d(v[++x],5),r.d(v[++x],v[++x],u);else if(256===y)break;this.a=r.finish();this.b=this.a.length;break;case qa:var E=new F(B?new Uint8Array(this.a.buffer):this.a,this.b),Ja,R,X,Y,Z,pb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],fa,Ka,ga,La,oa,wa=Array(19),\nMa,$,pa,C,Na;Ja=qa;E.d(1,1,u);E.d(Ja,2,u);R=ta(this,f);fa=ua(this.V,15);Ka=va(fa);ga=ua(this.U,7);La=va(ga);for(X=286;257<X&&0===fa[X-1];X--);for(Y=30;1<Y&&0===ga[Y-1];Y--);var Oa=X,Pa=Y,J=new (B?Uint32Array:Array)(Oa+Pa),w,L,z,ha,I=new (B?Uint32Array:Array)(316),G,D,M=new (B?Uint8Array:Array)(19);for(w=L=0;w<Oa;w++)J[L++]=fa[w];for(w=0;w<Pa;w++)J[L++]=ga[w];if(!B){w=0;for(ha=M.length;w<ha;++w)M[w]=0}w=G=0;for(ha=J.length;w<ha;w+=L){for(L=1;w+L<ha&&J[w+L]===J[w];++L);z=L;if(0===J[w])if(3>z)for(;0<\nz--;)I[G++]=0,M[0]++;else for(;0<z;)D=138>z?z:138,D>z-3&&D<z&&(D=z-3),10>=D?(I[G++]=17,I[G++]=D-3,M[17]++):(I[G++]=18,I[G++]=D-11,M[18]++),z-=D;else if(I[G++]=J[w],M[J[w]]++,z--,3>z)for(;0<z--;)I[G++]=J[w],M[J[w]]++;else for(;0<z;)D=6>z?z:6,D>z-3&&D<z&&(D=z-3),I[G++]=16,I[G++]=D-3,M[16]++,z-=D}b=B?I.subarray(0,G):I.slice(0,G);oa=ua(M,7);for(C=0;19>C;C++)wa[C]=oa[pb[C]];for(Z=19;4<Z&&0===wa[Z-1];Z--);Ma=va(oa);E.d(X-257,5,u);E.d(Y-1,5,u);E.d(Z-4,4,u);for(C=0;C<Z;C++)E.d(wa[C],3,u);C=0;for(Na=b.length;C<\nNa;C++)if($=b[C],E.d(Ma[$],oa[$],u),16<=$){C++;switch($){case 16:pa=2;break;case 17:pa=3;break;case 18:pa=7;break;default:q(\"invalid code: \"+$)}E.d(b[C],pa,u)}var Qa=[Ka,fa],Ra=[La,ga],N,Sa,ia,za,Ta,Ua,Va,Wa;Ta=Qa[0];Ua=Qa[1];Va=Ra[0];Wa=Ra[1];N=0;for(Sa=R.length;N<Sa;++N)if(ia=R[N],E.d(Ta[ia],Ua[ia],u),256<ia)E.d(R[++N],R[++N],u),za=R[++N],E.d(Va[za],Wa[za],u),E.d(R[++N],R[++N],u);else if(256===ia)break;this.a=E.finish();this.b=this.a.length;break;default:q(\"invalid compression type\")}return this.a};\nfunction xa(b,a){this.length=b;this.P=a}\nvar ya=function(){function b(a){switch(u){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,\na-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:q(\"invalid length: \"+a)}}var a=[],c,d;for(c=3;258>=c;c++)d=b(c),a[c]=d[2]<<24|d[1]<<\n16|d[0];return a}(),Aa=B?new Uint32Array(ya):ya;\nfunction ta(b,a){function c(a,c){var b=a.P,d=[],e=0,f;f=Aa[a.length];d[e++]=f&65535;d[e++]=f>>16&255;d[e++]=f>>24;var g;switch(u){case 1===b:g=[0,b-1,0];break;case 2===b:g=[1,b-2,0];break;case 3===b:g=[2,b-3,0];break;case 4===b:g=[3,b-4,0];break;case 6>=b:g=[4,b-5,1];break;case 8>=b:g=[5,b-7,1];break;case 12>=b:g=[6,b-9,2];break;case 16>=b:g=[7,b-13,2];break;case 24>=b:g=[8,b-17,3];break;case 32>=b:g=[9,b-25,3];break;case 48>=b:g=[10,b-33,4];break;case 64>=b:g=[11,b-49,4];break;case 96>=b:g=[12,b-\n65,5];break;case 128>=b:g=[13,b-97,5];break;case 192>=b:g=[14,b-129,6];break;case 256>=b:g=[15,b-193,6];break;case 384>=b:g=[16,b-257,7];break;case 512>=b:g=[17,b-385,7];break;case 768>=b:g=[18,b-513,8];break;case 1024>=b:g=[19,b-769,8];break;case 1536>=b:g=[20,b-1025,9];break;case 2048>=b:g=[21,b-1537,9];break;case 3072>=b:g=[22,b-2049,10];break;case 4096>=b:g=[23,b-3073,10];break;case 6144>=b:g=[24,b-4097,11];break;case 8192>=b:g=[25,b-6145,11];break;case 12288>=b:g=[26,b-8193,12];break;case 16384>=\nb:g=[27,b-12289,12];break;case 24576>=b:g=[28,b-16385,13];break;case 32768>=b:g=[29,b-24577,13];break;default:q(\"invalid distance\")}f=g;d[e++]=f[0];d[e++]=f[1];d[e++]=f[2];var h,k;h=0;for(k=d.length;h<k;++h)m[p++]=d[h];v[d[0]]++;x[d[3]]++;r=a.length+c-1;n=null}var d,f,e,g,k,h={},l,s,n,m=B?new Uint16Array(2*a.length):[],p=0,r=0,v=new (B?Uint32Array:Array)(286),x=new (B?Uint32Array:Array)(30),Q=b.I,y;if(!B){for(e=0;285>=e;)v[e++]=0;for(e=0;29>=e;)x[e++]=0}v[256]=1;d=0;for(f=a.length;d<f;++d){e=k=0;\nfor(g=3;e<g&&d+e!==f;++e)k=k<<8|a[d+e];h[k]===t&&(h[k]=[]);l=h[k];if(!(0<r--)){for(;0<l.length&&32768<d-l[0];)l.shift();if(d+3>=f){n&&c(n,-1);e=0;for(g=f-d;e<g;++e)y=a[d+e],m[p++]=y,++v[y];break}0<l.length?(s=Ba(a,d,l),n?n.length<s.length?(y=a[d-1],m[p++]=y,++v[y],c(s,0)):c(n,-1):s.length<Q?n=s:c(s,0)):n?c(n,-1):(y=a[d],m[p++]=y,++v[y])}l.push(d)}m[p++]=256;v[256]++;b.V=v;b.U=x;return B?m.subarray(0,p):m}\nfunction Ba(b,a,c){var d,f,e=0,g,k,h,l,s=b.length;k=0;l=c.length;a:for(;k<l;k++){d=c[l-k-1];g=3;if(3<e){for(h=e;3<h;h--)if(b[d+h-1]!==b[a+h-1])continue a;g=e}for(;258>g&&a+g<s&&b[d+g]===b[a+g];)++g;g>e&&(f=d,e=g);if(258===g)break}return new xa(e,a-f)}\nfunction ua(b,a){var c=b.length,d=new la(572),f=new (B?Uint8Array:Array)(c),e,g,k,h,l;if(!B)for(h=0;h<c;h++)f[h]=0;for(h=0;h<c;++h)0<b[h]&&d.push(h,b[h]);e=Array(d.length/2);g=new (B?Uint32Array:Array)(d.length/2);if(1===e.length)return f[d.pop().index]=1,f;h=0;for(l=d.length/2;h<l;++h)e[h]=d.pop(),g[h]=e[h].value;k=Ca(g,g.length,a);h=0;for(l=e.length;h<l;++h)f[e[h].index]=k[h];return f}\nfunction Ca(b,a,c){function d(b){var c=h[b][l[b]];c===a?(d(b+1),d(b+1)):--g[c];++l[b]}var f=new (B?Uint16Array:Array)(c),e=new (B?Uint8Array:Array)(c),g=new (B?Uint8Array:Array)(a),k=Array(c),h=Array(c),l=Array(c),s=(1<<c)-a,n=1<<c-1,m,p,r,v,x;f[c-1]=a;for(p=0;p<c;++p)s<n?e[p]=0:(e[p]=1,s-=n),s<<=1,f[c-2-p]=(f[c-1-p]/2|0)+a;f[0]=e[0];k[0]=Array(f[0]);h[0]=Array(f[0]);for(p=1;p<c;++p)f[p]>2*f[p-1]+e[p]&&(f[p]=2*f[p-1]+e[p]),k[p]=Array(f[p]),h[p]=Array(f[p]);for(m=0;m<a;++m)g[m]=c;for(r=0;r<f[c-1];++r)k[c-\n1][r]=b[r],h[c-1][r]=r;for(m=0;m<c;++m)l[m]=0;1===e[c-1]&&(--g[0],++l[c-1]);for(p=c-2;0<=p;--p){v=m=0;x=l[p+1];for(r=0;r<f[p];r++)v=k[p+1][x]+k[p+1][x+1],v>b[m]?(k[p][r]=v,h[p][r]=a,x+=2):(k[p][r]=b[m],h[p][r]=m,++m);l[p]=0;1===e[p]&&d(p)}return g}\nfunction va(b){var a=new (B?Uint16Array:Array)(b.length),c=[],d=[],f=0,e,g,k,h;e=0;for(g=b.length;e<g;e++)c[b[e]]=(c[b[e]]|0)+1;e=1;for(g=16;e<=g;e++)d[e]=f,f+=c[e]|0,f<<=1;e=0;for(g=b.length;e<g;e++){f=d[b[e]];d[b[e]]+=1;k=a[e]=0;for(h=b[e];k<h;k++)a[e]=a[e]<<1|f&1,f>>>=1}return a};function Da(b,a){this.input=b;this.b=this.c=0;this.i={};a&&(a.flags&&(this.i=a.flags),\"string\"===typeof a.filename&&(this.filename=a.filename),\"string\"===typeof a.comment&&(this.A=a.comment),a.deflateOptions&&(this.l=a.deflateOptions));this.l||(this.l={})}\nDa.prototype.g=function(){var b,a,c,d,f,e,g,k,h=new (B?Uint8Array:Array)(32768),l=0,s=this.input,n=this.c,m=this.filename,p=this.A;h[l++]=31;h[l++]=139;h[l++]=8;b=0;this.i.fname&&(b|=Ea);this.i.fcomment&&(b|=Fa);this.i.fhcrc&&(b|=Ga);h[l++]=b;a=(Date.now?Date.now():+new Date)/1E3|0;h[l++]=a&255;h[l++]=a>>>8&255;h[l++]=a>>>16&255;h[l++]=a>>>24&255;h[l++]=0;h[l++]=Ha;if(this.i.fname!==t){g=0;for(k=m.length;g<k;++g)e=m.charCodeAt(g),255<e&&(h[l++]=e>>>8&255),h[l++]=e&255;h[l++]=0}if(this.i.comment){g=\n0;for(k=p.length;g<k;++g)e=p.charCodeAt(g),255<e&&(h[l++]=e>>>8&255),h[l++]=e&255;h[l++]=0}this.i.fhcrc&&(c=ja(h,0,l)&65535,h[l++]=c&255,h[l++]=c>>>8&255);this.l.outputBuffer=h;this.l.outputIndex=l;f=new na(s,this.l);h=f.g();l=f.b;B&&(l+8>h.buffer.byteLength?(this.a=new Uint8Array(l+8),this.a.set(new Uint8Array(h.buffer)),h=this.a):h=new Uint8Array(h.buffer));d=ja(s,t,t);h[l++]=d&255;h[l++]=d>>>8&255;h[l++]=d>>>16&255;h[l++]=d>>>24&255;k=s.length;h[l++]=k&255;h[l++]=k>>>8&255;h[l++]=k>>>16&255;h[l++]=\nk>>>24&255;this.c=n;B&&l<h.length&&(this.a=h=h.subarray(0,l));return h};var Ha=255,Ga=2,Ea=8,Fa=16;A(\"Zlib.Gzip\",Da);A(\"Zlib.Gzip.prototype.compress\",Da.prototype.g);function T(b,a){this.p=[];this.q=32768;this.e=this.j=this.c=this.u=0;this.input=B?new Uint8Array(b):b;this.w=!1;this.r=Ia;this.L=!1;if(a||!(a={}))a.index&&(this.c=a.index),a.bufferSize&&(this.q=a.bufferSize),a.bufferType&&(this.r=a.bufferType),a.resize&&(this.L=a.resize);switch(this.r){case Xa:this.b=32768;this.a=new (B?Uint8Array:Array)(32768+this.q+258);break;case Ia:this.b=0;this.a=new (B?Uint8Array:Array)(this.q);this.f=this.T;this.B=this.Q;this.s=this.S;break;default:q(Error(\"invalid inflate mode\"))}}\nvar Xa=0,Ia=1,Ya={N:Xa,M:Ia};\nT.prototype.h=function(){for(;!this.w;){var b=U(this,3);b&1&&(this.w=u);b>>>=1;switch(b){case 0:var a=this.input,c=this.c,d=this.a,f=this.b,e=t,g=t,k=t,h=d.length,l=t;this.e=this.j=0;e=a[c++];e===t&&q(Error(\"invalid uncompressed block header: LEN (first byte)\"));g=e;e=a[c++];e===t&&q(Error(\"invalid uncompressed block header: LEN (second byte)\"));g|=e<<8;e=a[c++];e===t&&q(Error(\"invalid uncompressed block header: NLEN (first byte)\"));k=e;e=a[c++];e===t&&q(Error(\"invalid uncompressed block header: NLEN (second byte)\"));k|=\ne<<8;g===~k&&q(Error(\"invalid uncompressed block header: length verify\"));c+g>a.length&&q(Error(\"input buffer is broken\"));switch(this.r){case Xa:for(;f+g>d.length;){l=h-f;g-=l;if(B)d.set(a.subarray(c,c+l),f),f+=l,c+=l;else for(;l--;)d[f++]=a[c++];this.b=f;d=this.f();f=this.b}break;case Ia:for(;f+g>d.length;)d=this.f({F:2});break;default:q(Error(\"invalid inflate mode\"))}if(B)d.set(a.subarray(c,c+g),f),f+=g,c+=g;else for(;g--;)d[f++]=a[c++];this.c=c;this.b=f;this.a=d;break;case 1:this.s(Za,$a);break;\ncase 2:ab(this);break;default:q(Error(\"unknown BTYPE: \"+b))}}return this.B()};\nvar bb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],cb=B?new Uint16Array(bb):bb,db=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],eb=B?new Uint16Array(db):db,fb=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],gb=B?new Uint8Array(fb):fb,hb=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ib=B?new Uint16Array(hb):hb,jb=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,\n10,11,11,12,12,13,13],kb=B?new Uint8Array(jb):jb,lb=new (B?Uint8Array:Array)(288),V,mb;V=0;for(mb=lb.length;V<mb;++V)lb[V]=143>=V?8:255>=V?9:279>=V?7:8;var Za=ma(lb),nb=new (B?Uint8Array:Array)(30),ob,qb;ob=0;for(qb=nb.length;ob<qb;++ob)nb[ob]=5;var $a=ma(nb);function U(b,a){for(var c=b.j,d=b.e,f=b.input,e=b.c,g;d<a;)g=f[e++],g===t&&q(Error(\"input buffer is broken\")),c|=g<<d,d+=8;g=c&(1<<a)-1;b.j=c>>>a;b.e=d-a;b.c=e;return g}\nfunction rb(b,a){for(var c=b.j,d=b.e,f=b.input,e=b.c,g=a[0],k=a[1],h,l,s;d<k;){h=f[e++];if(h===t)break;c|=h<<d;d+=8}l=g[c&(1<<k)-1];s=l>>>16;b.j=c>>s;b.e=d-s;b.c=e;return l&65535}\nfunction ab(b){function a(a,b,c){var d,e,f,g;for(g=0;g<a;)switch(d=rb(this,b),d){case 16:for(f=3+U(this,2);f--;)c[g++]=e;break;case 17:for(f=3+U(this,3);f--;)c[g++]=0;e=0;break;case 18:for(f=11+U(this,7);f--;)c[g++]=0;e=0;break;default:e=c[g++]=d}return c}var c=U(b,5)+257,d=U(b,5)+1,f=U(b,4)+4,e=new (B?Uint8Array:Array)(cb.length),g,k,h,l;for(l=0;l<f;++l)e[cb[l]]=U(b,3);g=ma(e);k=new (B?Uint8Array:Array)(c);h=new (B?Uint8Array:Array)(d);b.s(ma(a.call(b,c,g,k)),ma(a.call(b,d,g,h)))}\nT.prototype.s=function(b,a){var c=this.a,d=this.b;this.C=b;for(var f=c.length-258,e,g,k,h;256!==(e=rb(this,b));)if(256>e)d>=f&&(this.b=d,c=this.f(),d=this.b),c[d++]=e;else{g=e-257;h=eb[g];0<gb[g]&&(h+=U(this,gb[g]));e=rb(this,a);k=ib[e];0<kb[e]&&(k+=U(this,kb[e]));d>=f&&(this.b=d,c=this.f(),d=this.b);for(;h--;)c[d]=c[d++-k]}for(;8<=this.e;)this.e-=8,this.c--;this.b=d};\nT.prototype.S=function(b,a){var c=this.a,d=this.b;this.C=b;for(var f=c.length,e,g,k,h;256!==(e=rb(this,b));)if(256>e)d>=f&&(c=this.f(),f=c.length),c[d++]=e;else{g=e-257;h=eb[g];0<gb[g]&&(h+=U(this,gb[g]));e=rb(this,a);k=ib[e];0<kb[e]&&(k+=U(this,kb[e]));d+h>f&&(c=this.f(),f=c.length);for(;h--;)c[d]=c[d++-k]}for(;8<=this.e;)this.e-=8,this.c--;this.b=d};\nT.prototype.f=function(){var b=new (B?Uint8Array:Array)(this.b-32768),a=this.b-32768,c,d,f=this.a;if(B)b.set(f.subarray(32768,b.length));else{c=0;for(d=b.length;c<d;++c)b[c]=f[c+32768]}this.p.push(b);this.u+=b.length;if(B)f.set(f.subarray(a,a+32768));else for(c=0;32768>c;++c)f[c]=f[a+c];this.b=32768;return f};\nT.prototype.T=function(b){var a,c=this.input.length/this.c+1|0,d,f,e,g=this.input,k=this.a;b&&(\"number\"===typeof b.F&&(c=b.F),\"number\"===typeof b.O&&(c+=b.O));2>c?(d=(g.length-this.c)/this.C[2],e=258*(d/2)|0,f=e<k.length?k.length+e:k.length<<1):f=k.length*c;B?(a=new Uint8Array(f),a.set(k)):a=k;return this.a=a};\nT.prototype.B=function(){var b=0,a=this.a,c=this.p,d,f=new (B?Uint8Array:Array)(this.u+(this.b-32768)),e,g,k,h;if(0===c.length)return B?this.a.subarray(32768,this.b):this.a.slice(32768,this.b);e=0;for(g=c.length;e<g;++e){d=c[e];k=0;for(h=d.length;k<h;++k)f[b++]=d[k]}e=32768;for(g=this.b;e<g;++e)f[b++]=a[e];this.p=[];return this.buffer=f};\nT.prototype.Q=function(){var b,a=this.b;B?this.L?(b=new Uint8Array(a),b.set(this.a.subarray(0,a))):b=this.a.subarray(0,a):(this.a.length>a&&(this.a.length=a),b=this.a);return this.buffer=b};function sb(b){this.input=b;this.c=0;this.t=[];this.D=!1}sb.prototype.W=function(){this.D||this.h();return this.t.slice()};\nsb.prototype.h=function(){for(var b=this.input.length;this.c<b;){var a=new P,c=t,d=t,f=t,e=t,g=t,k=t,h=t,l=t,s=t,n=this.input,m=this.c;a.G=n[m++];a.H=n[m++];(31!==a.G||139!==a.H)&&q(Error(\"invalid file signature:\"+a.G+\",\"+a.H));a.z=n[m++];switch(a.z){case 8:break;default:q(Error(\"unknown compression method: \"+a.z))}a.n=n[m++];l=n[m++]|n[m++]<<8|n[m++]<<16|n[m++]<<24;a.Y=new Date(1E3*l);a.ea=n[m++];a.da=n[m++];0<(a.n&4)&&(a.$=n[m++]|n[m++]<<8,m+=a.$);if(0<(a.n&Ea)){h=[];for(k=0;0<(g=n[m++]);)h[k++]=\nString.fromCharCode(g);a.name=h.join(\"\")}if(0<(a.n&Fa)){h=[];for(k=0;0<(g=n[m++]);)h[k++]=String.fromCharCode(g);a.A=h.join(\"\")}0<(a.n&Ga)&&(a.R=ja(n,0,m)&65535,a.R!==(n[m++]|n[m++]<<8)&&q(Error(\"invalid header crc16\")));c=n[n.length-4]|n[n.length-3]<<8|n[n.length-2]<<16|n[n.length-1]<<24;n.length-m-4-4<512*c&&(e=c);d=new T(n,{index:m,bufferSize:e});a.data=f=d.h();m=d.c;a.ba=s=(n[m++]|n[m++]<<8|n[m++]<<16|n[m++]<<24)>>>0;ja(f,t,t)!==s&&q(Error(\"invalid CRC-32 checksum: 0x\"+ja(f,t,t).toString(16)+\n\" / 0x\"+s.toString(16)));a.ca=c=(n[m++]|n[m++]<<8|n[m++]<<16|n[m++]<<24)>>>0;(f.length&4294967295)!==c&&q(Error(\"invalid input size: \"+(f.length&4294967295)+\" / \"+c));this.t.push(a);this.c=m}this.D=u;var p=this.t,r,v,x=0,Q=0,y;r=0;for(v=p.length;r<v;++r)Q+=p[r].data.length;if(B){y=new Uint8Array(Q);for(r=0;r<v;++r)y.set(p[r].data,x),x+=p[r].data.length}else{y=[];for(r=0;r<v;++r)y[r]=p[r].data;y=Array.prototype.concat.apply([],y)}return y};A(\"Zlib.Gunzip\",sb);A(\"Zlib.Gunzip.prototype.decompress\",sb.prototype.h);A(\"Zlib.Gunzip.prototype.getMembers\",sb.prototype.W);function tb(b){if(\"string\"===typeof b){var a=b.split(\"\"),c,d;c=0;for(d=a.length;c<d;c++)a[c]=(a[c].charCodeAt(0)&255)>>>0;b=a}for(var f=1,e=0,g=b.length,k,h=0;0<g;){k=1024<g?1024:g;g-=k;do f+=b[h++],e+=f;while(--k);f%=65521;e%=65521}return(e<<16|f)>>>0};function ub(b,a){var c,d;this.input=b;this.c=0;if(a||!(a={}))a.index&&(this.c=a.index),a.verify&&(this.Z=a.verify);c=b[this.c++];d=b[this.c++];switch(c&15){case vb:this.method=vb;break;default:q(Error(\"unsupported compression method\"))}0!==((c<<8)+d)%31&&q(Error(\"invalid fcheck flag:\"+((c<<8)+d)%31));d&32&&q(Error(\"fdict flag is not supported\"));this.K=new T(b,{index:this.c,bufferSize:a.bufferSize,bufferType:a.bufferType,resize:a.resize})}\nub.prototype.h=function(){var b=this.input,a,c;a=this.K.h();this.c=this.K.c;this.Z&&(c=(b[this.c++]<<24|b[this.c++]<<16|b[this.c++]<<8|b[this.c++])>>>0,c!==tb(a)&&q(Error(\"invalid adler-32 checksum\")));return a};var vb=8;function wb(b,a){this.input=b;this.a=new (B?Uint8Array:Array)(32768);this.k=W.o;var c={},d;if((a||!(a={}))&&\"number\"===typeof a.compressionType)this.k=a.compressionType;for(d in a)c[d]=a[d];c.outputBuffer=this.a;this.J=new na(this.input,c)}var W=ra;\nwb.prototype.g=function(){var b,a,c,d,f,e,g,k=0;g=this.a;b=vb;switch(b){case vb:a=Math.LOG2E*Math.log(32768)-8;break;default:q(Error(\"invalid compression method\"))}c=a<<4|b;g[k++]=c;switch(b){case vb:switch(this.k){case W.NONE:f=0;break;case W.v:f=1;break;case W.o:f=2;break;default:q(Error(\"unsupported compression type\"))}break;default:q(Error(\"invalid compression method\"))}d=f<<6|0;g[k++]=d|31-(256*c+d)%31;e=tb(this.input);this.J.b=k;g=this.J.g();k=g.length;B&&(g=new Uint8Array(g.buffer),g.length<=\nk+4&&(this.a=new Uint8Array(g.length+4),this.a.set(g),g=this.a),g=g.subarray(0,k+4));g[k++]=e>>24&255;g[k++]=e>>16&255;g[k++]=e>>8&255;g[k++]=e&255;return g};function xb(b,a){var c,d,f,e;if(Object.keys)c=Object.keys(a);else for(d in c=[],f=0,a)c[f++]=d;f=0;for(e=c.length;f<e;++f)d=c[f],A(b+\".\"+d,a[d])};A(\"Zlib.Inflate\",ub);A(\"Zlib.Inflate.prototype.decompress\",ub.prototype.h);xb(\"Zlib.Inflate.BufferType\",{ADAPTIVE:Ya.M,BLOCK:Ya.N});A(\"Zlib.Deflate\",wb);A(\"Zlib.Deflate.compress\",function(b,a){return(new wb(b,a)).g()});A(\"Zlib.Deflate.prototype.compress\",wb.prototype.g);xb(\"Zlib.Deflate.CompressionType\",{NONE:W.NONE,FIXED:W.v,DYNAMIC:W.o});}).call(this); //@ sourceMappingURL=zlib_and_gzip.min.js.map\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/vendor/zlib_and_gzip.min.js\n");

/***/ }),

/***/ "canvas":
/*!*************************!*\
  !*** external "canvas" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"canvas\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY2FudmFzXCI/ZDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjYW52YXNcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///canvas\n");

/***/ }),

/***/ "extend":
/*!*************************!*\
  !*** external "extend" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"extend\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXh0ZW5kXCI/MGU3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJleHRlbmRcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///extend\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiP2E0MGQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///fs\n");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jquery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"jquery\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF1ZXJ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwianF1ZXJ5XCI/OGY4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJqcXVlcnlcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///jquery\n");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInBhdGhcIj83NGJiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///path\n");

/***/ }),

/***/ "xhr2":
/*!***********************!*\
  !*** external "xhr2" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"xhr2\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInhocjJcIj85YTkwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInhocjJcIik7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///xhr2\n");

/***/ })

/******/ });